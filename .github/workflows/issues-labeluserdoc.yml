name: Issues Handle User Doc

on:
  issues:
    types: [labeled]

env:
  GITHUB_TOKEN: ${{ secrets.KUBEBLOCKS_TOKEN }}

jobs:
  User_doc:
    runs-on: ubuntu-latest
    if: | 
      contains(github.event.issue.labels.*.name, 'user doc') 
    steps:
     - name: Update issue
       uses: actions-cool/issues-helper@v3
       with:
         actions: 'update-issue'
         token: ${{ env.GITHUB_TOKEN }}
         state: 'open'
         assignees: 'michelle-0808'
     - name: Get project data
       env:
         ORGANIZATION: apecloud
         PROJECT_NUMBER: 2
       run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV

     - name: Add Issue to Project
       env:
         ISSUE_ID: ${{ github.event.issue.node_id }}
       run: |
         item_id="$( gh api graphql -f query='
           mutation($project:ID!, $issueid:ID!) {
             addProjectV2ItemById(input: {projectId: $project, contentId: $issueid}) {
               item {
                 id
               }
             }
           }' -f project=$PROJECT_ID -f issueid=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"

         echo 'ITEM_ID='$item_id >> $GITHUB_ENV
     - name: Set fields
       run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} --silent
            
            
