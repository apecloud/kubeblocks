name: ISSUES-MOVE
on:
  issues:
    types: [ assigned ]
  release:
    types: [ published ]

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  move_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          ORGANIZATION: apecloud
          PROJECT_NUMBER: 2

        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV

      - name: Assigned Issue
        if: |
          github.event.action == 'assigned'
        run: |
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV
      - name: PreRelease Issue
        if: |
          github.event.action == 'published'
        run: |
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="PreRelease") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add Issue to project
        env:
          ISSUE_ID: ${{ github.event.issue.node_id }}
        if: github.event.action == 'assigned'
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issueid:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issueid}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issueid=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"

          echo 'ITEM_ID='$item_id >> $GITHUB_ENV        

      - name: Set fields
        if: github.event.action == 'assigned'
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} --silent

      - uses: actions/checkout@v3
        if: |
          github.event.action == 'published'

      - name: move publish release Issue
        if: |
          github.event.action == 'published'
        run: |
          cd ${{ github.workspace }}
          bash ${{ github.workspace }}/.github/utils/issue_prerelease.sh \
            ${{ env.GITHUB_TOKEN }} \
            ${{ github.repository }} \
            ${{ github.repository_owner }} \
            $PROJECT_ID \
            $STATUS_FIELD_ID \
            ${{ env.TODO_OPTION_ID }} \
            "${{ github.event.release.body }}"
