name: RELEASE-CREATE

on:
  push:
    tags:
      - v*

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  RELEASE_BOT_WEBHOOK: ${{ secrets.RELEASE_BOT_WEBHOOK }}

jobs:
  release-create:
    name: create a release
    runs-on: ubuntu-latest
    outputs:
      rel-version: ${{ steps.get_rel_version.outputs.rel_version }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Parse release version and set REL_VERSION
        id: get_rel_version
        run: |
          python ./.github/utils/is_rc_or_stable_release_version.py
          echo rel_version=v${{ env.REL_VERSION }} >> $GITHUB_OUTPUT

      - name: release pre-release without release notes
        uses: softprops/action-gh-release@v1
        if: not ${{ env.WITH_RELEASE_NOTES }}
        with:
          # body_path: ./docs/release_notes/v${{ env.REL_VERSION }}/v${{ env.REL_VERSION }}.md
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: KubeBlocks v${{ env.REL_VERSION }}
          generate_release_notes: true
          tag_name: v${{ env.REL_VERSION }}
          prerelease: true
      - name: release RC with release notes
        uses: softprops/action-gh-release@v1
        if: ${{ env.WITH_RELEASE_NOTES }}
        with:
          body_path: ./docs/release_notes/v${{ env.REL_VERSION }}/v${{ env.REL_VERSION }}.md
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          name: KubeBlocks v${{ env.REL_VERSION }}
          tag_name: v${{ env.REL_VERSION }}
          prerelease: true
      - name: sanitized release body 
        if: not ${{ env.WITH_RELEASE_NOTES }}
        run: ./.github/utils/sanitize_release_body.sh

  send-message:
    needs: [ release-create ]
    if: ${{ failure() || cancelled() }}
    uses: apecloud/apecloud-cd/.github/workflows/feishui-message.yml@v0.1.38
    with:
      TYPE: "2"
      CONTENT: "create release ${{ needs.release-create.outputs.rel-version }} error"
      APECD_REF: "v0.1.38"
    secrets: inherit
