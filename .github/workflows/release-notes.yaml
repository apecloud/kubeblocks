name: RELEASE-NOTES

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  build:
    name: Generate release notes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install PyGithub
      - name: Generate release notes
        run: python ./.github/utils/generate_release_notes.py
      - name: Commit and push to branch
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          COMMIT_MSG: |
            Generating KubeBlocks release notes.
            skip-checks: true
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git remote -v
          git checkout ${REL_BRANCH} || git checkout main
          echo "BASE_BRANCH=$(git branch --show-current)" >> $GITHUB_ENV
          git checkout -b support/pre-release-notes-${REL_VERSION}
          git add .
          # Only commit and push if have changes
          git diff --quiet && git diff --staged --quiet || (git commit -m "${COMMIT_MSG}"; git push -u origin support/pre-release-notes-${REL_VERSION})
      - name: Create pull request
        run: |
          gh pr create --title "Create release notes for ${{ env.REL_VERSION }}." --body "Release notes." --base ${{ env.BASE_BRANCH }} --draft

      - name: Get project data
        env:
          ORGANIZATION: apecloud
          PROJECT_NUMBER: 2
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV

      - name: Released Issue
        run: |
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Released") |.id' project_data.json) >> $GITHUB_ENV

      - name: Move Released Issue
        run: |
          cd ${{ github.workspace }}
          bash ${{ github.workspace }}/.github/utils/issue_release.sh \
            ${{ env.GITHUB_TOKEN }} \
            ${{ github.repository }} \
            ${{ github.repository_owner }} \
            $PROJECT_ID \
            $STATUS_FIELD_ID \
            ${{ env.TODO_OPTION_ID }} \
            ${{ github.workspace }}/docs/release_notes
