name: RELEASE-PUBLISH

on:
  release:
    types:
      - published

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TAG_NAME: ${{ github.ref_name }}
  GO_VERSION: "1.20"
  CLI_NAME: 'kbcli'
  CLI_REPO: 'apecloud/kbcli'
  GITLAB_KBCLI_PROJECT_ID: 85948
  GITLAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  RELEASE_BOT_WEBHOOK: ${{ secrets.RELEASE_BOT_WEBHOOK }}
  FURY_TOKEN: ${{ secrets.FURY_UPLOAD_TOKEN }}
  FURY_ACCOUNT: ${{ secrets.FURY_ACCOUNT }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  PASSPHRASE: ${{ secrets.PASSPHRASE }}

jobs:
  create-release-kbcli:
    name: Create Release kbcli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: create release ${{ env.CLI_NAME }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: KubeBlocks ${{ env.TAG_NAME }}
          repository: ${{ env.CLI_REPO }}
          token: ${{ env.GITHUB_TOKEN }}
          prerelease: true
      - name: create gitlab release ${{ env.CLI_NAME }}
        run: |
          bash ${{ github.workspace }}/.github/utils/release_gitlab.sh \
            --type 1 \
            --project-id ${{ env.GITLAB_KBCLI_PROJECT_ID }} \
            --tag-name ${{ env.TAG_NAME }} \
            --access-token ${{ env.GITLAB_ACCESS_TOKEN }}

  upload-release-assert:
    needs: create-release-kbcli
    name: Upload and release kbcli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install lib
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libbtrfs-dev \
            libdevmapper-dev

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ env.GPG_PRIVATE_KEY }}
          passphrase: ${{ env.PASSPHRASE }}

      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --config ${{ github.workspace }}/.goreleaser.yaml --clean
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: upload .rpm and .deb to fury.io
        run: |
          for file in $(find "${{ github.workspace }}/dist" -type f | grep -E '\.(deb|rpm)$'); do
            echo "Processing file: $file"
            curl -F package=@$file https://${{ env.FURY_TOKEN }}@push.fury.io/${{ env.FURY_ACCOUNT }}/
          done

      - name: get kbcli's release upload url
        run: |
          echo 'UPLOAD_URL='`bash ${{ github.workspace }}/.github/utils/utils.sh \
            --tag-name ${{ env.TAG_NAME }} \
            --type 3 \
            --github-repo ${{ env.CLI_REPO }} \
            --github-token ${{ env.GITHUB_TOKEN }}` >> $GITHUB_ENV
      - name: upload kbcli.exe to kbcli's release page for winget
        uses: actions/upload-release-asset@main
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ github.workspace }}/dist/kbcli_windows_amd64_v1/${{ env.CLI_NAME }}.exe
          asset_name: ${{ env.CLI_NAME }}.exe
          asset_content_type: application/octet-stream

      - name: Upload release assets to an existing kubeblocks's release
        uses: echapmanFromBunnings/upload-release-assets@1.3
        with:
          releaseTag: ${{ env.TAG_NAME }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./dist/*.tar.gz
            ./dist/*.zip

      - name: upload assets to gitlab
        run: |
          for file in $(find "${{ github.workspace }}/dist" -type f | grep -E '\.(gz|zip)$'); do
            echo "Processing file: $file"
            filename=$(basename "$file")
            bash ${{ github.workspace }}/.github/utils/release_gitlab.sh \
            --type 2 \
            --project-id ${{ env.GITLAB_KBCLI_PROJECT_ID }} \
            --tag-name ${{ env.TAG_NAME }} \
            --asset-path $file \
            --asset-name $filename \
            --access-token ${{ env.GITLAB_ACCESS_TOKEN }}
          done

  send-message:
    runs-on: ubuntu-latest
    needs: upload-release-assert
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v3
      - name: send message
        id: send_message
        run: |
          release_result="${{ env.TAG_NAME }}-kbcli"
          touch ${release_result}
          echo 'release-result='${release_result} >> $GITHUB_OUTPUT
          
          CONTENT="release\u00a0${{ env.TAG_NAME }}\u00a0kbcli\u00a0error"
          if [[ "${{ needs.upload-release-assert.result }}" == "success" ]]; then
              CONTENT="release\u00a0${{ env.TAG_NAME }}\u00a0kbcli\u00a0success"
              echo "success" > ${release_result}
          else
              echo "error" > ${release_result}
          fi
          
          bash .github/utils/utils.sh --type 12 \
            --tag-name ${{ env.TAG_NAME }} \
            --content "${CONTENT}"\
            --bot-webhook ${{ env.RELEASE_BOT_WEBHOOK }} \
            --run-url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

      - name: Save Artifact
        id: cache-artifact-save
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ steps.send_message.outputs.release-result }}
          key: ${{ steps.send_message.outputs.release-result }}
