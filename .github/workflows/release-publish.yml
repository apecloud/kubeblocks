name: RELEASE-PUBLISH

on:
  release:
    types:
    - published

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TAG_NAME: ${{ github.ref_name }}
  GO_VERSION: '1.19'
  CLI_NAME: 'kbcli'
  CLI_REPO: 'apecloud/kbcli'
  GITLAB_KBCLI_PROJECT_ID: 85948

jobs:
  create-release-kbcli:
    name: Create Release kbcli
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: create release ${{ env.CLI_NAME }}
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: KubeBlocks ${{ env.TAG_NAME }}
        repository: ${{ env.CLI_REPO }}
        token: ${{ env.GITHUB_TOKEN }}
        prerelease: true
    - name: create gitlab release ${{ env.CLI_NAME }}
      run: |
        bash ${{ github.workspace }}/.github/utils/release_gitlab.sh \
          --type 1 \
          --project-id ${{ env.GITLAB_KBCLI_PROJECT_ID }} \
          --tag-name ${{ env.TAG_NAME }} \
          --access-token ${{ secrets.GITLAB_ACCESS_TOKEN }}


  upload-release-assert:
    needs: create-release-kbcli
    name: Upload ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64]

    steps:
    - uses: actions/checkout@v3
    - name: install lib
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libbtrfs-dev \
          libdevmapper-dev

    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: make generate
      run: make generate

    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2

    - name: Set CLI_BINARY and add BINARY_EXT if necessary
      id: set_binary
      run: |
        if [[ "${{ matrix.os }}" == *"windows"* ]]; then
          echo  "BINARY_EXT=.exe" >> $GITHUB_OUTPUT
          echo  "CLI_BINARY=${{ env.CLI_NAME }}-${{ matrix.os }}.zip" >> $GITHUB_OUTPUT
        else
         echo  "CLI_BINARY=${{ env.CLI_NAME }}-${{ matrix.os }}.tar.gz" >> $GITHUB_OUTPUT
        fi     

    - name: make build
      run: |
        
        CLI_OS_ARCH=`bash ${{ github.workspace }}/.github/utils/utils.sh \
          --tag-name ${{ matrix.os }} \
          --type 2`
        RELEASE_VERSION=`bash ${{ github.workspace }}/.github/utils/utils.sh \
          --tag-name ${{ env.TAG_NAME }} \
           --type 1`
        
        mkdir -p ${{ matrix.os }}-${RELEASE_VERSION}

        VERSION=$RELEASE_VERSION make bin/${{ env.CLI_NAME }}.$CLI_OS_ARCH
          
        mv bin/${{ env.CLI_NAME }}*  ${{ matrix.os }}-${RELEASE_VERSION}/${{ env.CLI_NAME }}${{ steps.set_binary.outputs.BINARY_EXT }} # move the binary file and add the suffix 
          
        if [[ "${{ matrix.os }}" == *"windows" ]]; then 
          zip -r ${{ steps.set_binary.outputs.CLI_BINARY }} ${{ matrix.os }}-${RELEASE_VERSION}
        else  
          tar -zcvf ${{ steps.set_binary.outputs.CLI_BINARY }} ${{ matrix.os }}-${RELEASE_VERSION}
        fi 
          
        mv ${{ steps.set_binary.outputs.CLI_BINARY }} bin/
        
   
    - name: upload release asset ${{ matrix.os }}
      uses: actions/upload-release-asset@main
      if: matrix.os != 'windows-amd64'
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./bin/${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_name: ${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_content_type: application/gzip
    
    - name: upload release asset ${{ matrix.os }}
      uses: actions/upload-release-asset@main
      if: matrix.os == 'windows-amd64'
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./bin/${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_name: ${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_content_type: application/zip
       
    - name: get release kbcli upload url
      run: |
        echo 'UPLOAD_URL='`bash ${{ github.workspace }}/.github/utils/utils.sh \
          --tag-name ${{ env.TAG_NAME }} \
          --type 3 \
          --github-repo ${{ env.CLI_REPO }} \
          --github-token ${{ env.GITHUB_TOKEN }}` >> $GITHUB_ENV

    

    - name: upload release kbcli asset ${{ matrix.os }}
      uses: actions/upload-release-asset@main
      if: matrix.os != 'windows-amd64'
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./bin/${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_name: ${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_content_type: application/gzip

    - name: upload release kbcli asset ${{ matrix.os }}
      uses: actions/upload-release-asset@main
      if: matrix.os == 'windows-amd64'
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./bin/${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_name: ${{ steps.set_binary.outputs.CLI_BINARY }}
        asset_content_type: application/zip

    - name: upload gitlab kbcli asset ${{ matrix.os }}
      run: |
        bash ${{ github.workspace }}/.github/utils/release_gitlab.sh \
          --type 2 \
          --project-id ${{ env.GITLAB_KBCLI_PROJECT_ID }} \
          --tag-name ${{ env.TAG_NAME }} \
          --asset-path ./bin/${{ steps.set_binary.outputs.CLI_BINARY }} \
          --asset-name ${{ steps.set_binary.outputs.CLI_BINARY }} \
          --access-token ${{ secrets.GITLAB_ACCESS_TOKEN }}
