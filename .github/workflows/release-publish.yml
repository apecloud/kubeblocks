name: RELEASE-PUBLISH

on:
  release:
    types:
      - published

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TAG_NAME: ${{ github.ref_name }}
  GO_VERSION: '1.19'
  CLI_NAME: 'kbcli'
  CLI_REPO: 'apecloud/kbcli'
  GITLAB_KBCLI_PROJECT_ID: 85948
  ASSET_NAME: ""
  ASSET_CONTENT_TYPE: ""


jobs:
  create-release-kbcli:
    name: Create Release kbcli
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: create release ${{ env.CLI_NAME }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: KubeBlocks ${{ env.TAG_NAME }}
          repository: ${{ env.CLI_REPO }}
          token: ${{ env.GITHUB_TOKEN }}
          prerelease: true
      - name: create gitlab release ${{ env.CLI_NAME }}
        run: |
          bash ${{ github.workspace }}/.github/utils/release_gitlab.sh \
            --type 1 \
            --project-id ${{ env.GITLAB_KBCLI_PROJECT_ID }} \
            --tag-name ${{ env.TAG_NAME }} \
            --access-token ${{ secrets.GITLAB_ACCESS_TOKEN }}
            

  upload-release-assert:
    needs: create-release-kbcli
    name: Upload ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64]
    steps:
      - uses: actions/checkout@v3
      - name: install lib
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libbtrfs-dev \
            libdevmapper-dev

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: make generate
        run: make generate

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2

      - name: make build
        id: build
        run: |    
          CLI_OS_ARCH=`bash ${{ github.workspace }}/.github/utils/utils.sh \
            --tag-name ${{ matrix.os }} \
            --type 2`
          RELEASE_VERSION=`bash ${{ github.workspace }}/.github/utils/utils.sh \
            --tag-name ${{ env.TAG_NAME }} \
            --type 1`

          VERSION=$RELEASE_VERSION make bin/${{ env.CLI_NAME }}.$CLI_OS_ARCH
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}" 
          mkdir -p ${{ env.CLI_NAME }}-${{ matrix.os }}-v${RELEASE_VERSION}

      - name: make zip
        if: matrix.os == 'windows-amd64'
        run: |
          mv bin/${{ env.CLI_NAME }}*  ${{ env.CLI_NAME }}-${{ matrix.os }}-${{ steps.build.outputs.RELEASE_VERSION }}/${{ env.CLI_NAME }}.exe   
          zip -r -o ${{ env.CLI_NAME }}-${{ matrix.os }}.zip  ${{ env.CLI_NAME }}-${{ matrix.os }}-${{ steps.build.outputs.RELEASE_VERSION }}
          file ${{ env.CLI_NAME }}-${{ matrix.os }}.zip  # for debug 
          mv ${{ env.CLI_NAME }}-${{ matrix.os }}.zip bin/
          echo "::set-env name=ASSET_NAME::${{ env.CLI_NAME }}-${{ matrix.os }}.zip"
          echo "::set-env name=ASSET_CONTENT_TYPE::application/zip"
      
      - name: make tar
        if: matrix.os != 'windows-amd64'    
        run: |
          mv bin/${{ env.CLI_NAME }}*  ${{ env.CLI_NAME }}-${{ matrix.os }}-${{ steps.build.outputs.RELEASE_VERSION }}/${{ env.CLI_NAME }}
          tar -zcvf ${{ env.CLI_NAME }}-${{ matrix.os }}.tar.gz  ${{ env.CLI_NAME }}-${{ matrix.os }}-${{ steps.build.outputs.RELEASE_VERSION }}
          mv ${{ env.CLI_NAME }}-${{ matrix.os }}.tar.gz bin/
          echo "::set-env name=ASSET_NAME::${{ env.CLI_NAME }}-${{ matrix.os }}.tar.gz"
          echo "::set-env name=ASSET_CONTENT_TYPE::application/gzip"         
          
      - name: upload release asset 
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./bin/${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: ${{ env.ASSET_CONTENT_TYPE }}
      
      - name: get release kbcli upload url
        run: |
          echo 'UPLOAD_URL='`bash ${{ github.workspace }}/.github/utils/utils.sh \
            --tag-name ${{ env.TAG_NAME }} \
            --type 3 \
            --github-repo ${{ env.CLI_REPO }} \
            --github-token ${{ env.GITHUB_TOKEN }}` >> $GITHUB_ENV

      - name: upload release kbcli asset 
        uses: actions/upload-release-asset@main
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./bin/${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: ${{ env.ASSET_CONTENT_TYPE }}

      - name: upload gitlab kbcli asset 
        run: |
          bash ${{ github.workspace }}/.github/utils/release_gitlab.sh \
            --type 2 \
            --project-id ${{ env.GITLAB_KBCLI_PROJECT_ID }} \
            --tag-name ${{ env.TAG_NAME }} \
            --asset-path ./bin/${{ env.ASSET_NAME }} \
            --asset-name ${{ env.ASSET_NAME }}\
            --access-token ${{ secrets.GITLAB_ACCESS_TOKEN }}
