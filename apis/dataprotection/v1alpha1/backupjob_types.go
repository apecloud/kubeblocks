/*
Copyright ApeCloud Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupJobSpec defines the desired state of BackupJob
type BackupJobSpec struct {
	// which backupPolicy to perform this backupJob
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Pattern:=`^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$`
	BackupPolicyName string `json:"backupPolicyName"`

	// Backup Type. full or incremental or snapshot. if unset, default is full.
	// +kubebuilder:validation:Enum={full,incremental,snapshot}
	// +kubebuilder:default=full
	BackupType BackupJobType `json:"backupType"`

	// if backupType is incremental, parentBackupName is required.
	// +optional
	ParentBackupJobName string `json:"parentBackupJobName,omitempty"`

	// TTL is a time.Duration-parsable string describing how long
	// the Backup should be retained for.
	// +optional
	TTL *metav1.Duration `json:"ttl,omitempty"`
}

// BackupJobPhase The current phase. Valid values are New, InProgress, Completed, Failed.
// +enum
type BackupJobPhase string

// These are the valid statuses of BackupJob.
const (
	BackupJobNew BackupJobPhase = "New"

	BackupJobInProgress BackupJobPhase = "InProgress"

	BackupJobCompleted BackupJobPhase = "Completed"

	BackupJobFailed BackupJobPhase = "Failed"
)

// BackupJobType the job type, marked job is full or incremental.
// +enum
type BackupJobType string

const (
	BackupTypeFull BackupJobType = "full"

	BackupTypeIncremental BackupJobType = "incremental"

	BackupTypeSnapshot BackupJobType = "snapshot"
)

// BackupJobStatus defines the observed state of BackupJob
type BackupJobStatus struct {
	// +optional
	Phase BackupJobPhase `json:"phase,omitempty"`

	// record parentBackupJobName if backupType is incremental.
	// +optional
	ParentBackupJobName string `json:"parentBackupJobName,omitempty"`

	// The date and time when the Backup is eligible for garbage collection.
	// 'null' means the Backup is NOT be cleaned except delete manual.
	// +optional
	Expiration *metav1.Time `json:"expiration,omitempty"`

	// Date/time when the backup started being processed.
	// +optional
	StartTimestamp *metav1.Time `json:"startTimestamp,omitempty"`

	// Date/time when the backup finished being processed.
	// +optional
	CompletionTimestamp *metav1.Time `json:"completionTimestamp,omitempty"`

	// backup total size
	// +optional
	TotalSize string `json:"totalSize,omitempty"`

	// backup total size
	// +optional
	UploadTotalSize string `json:"uploadTotalSize,omitempty"`

	// checksum of backup file, generated by md5 or sha1 or sha256
	// +optional
	CheckSum string `json:"checkSum,omitempty"`

	// backup check point, for incremental backup.
	// +optional
	CheckPoint string `json:"CheckPoint,omitempty"`

	// the reason if backup failed.
	// +optional
	FailureReason string `json:"failureReason,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:categories={dbaas},scope=Namespaced
// +kubebuilder:printcolumn:name="STATUS",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="COMPLETIONTIME",type=date,JSONPath=`.status.completionTimestamp`
// +kubebuilder:printcolumn:name="AGE",type=date,JSONPath=`.metadata.creationTimestamp`

// BackupJob is the Schema for the backupjobs API (defined by User)
type BackupJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BackupJobSpec   `json:"spec,omitempty"`
	Status BackupJobStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// BackupJobList contains a list of BackupJob
type BackupJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupJob `json:"items"`
}

func init() {
	SchemeBuilder.Register(&BackupJob{}, &BackupJobList{})
}
