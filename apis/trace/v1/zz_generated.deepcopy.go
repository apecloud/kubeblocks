//go:build !ignore_autogenerated

/*
Copyright (C) 2022-2024 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CELExpression) DeepCopyInto(out *CELExpression) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CELExpression.
func (in *CELExpression) DeepCopy() *CELExpression {
	if in == nil {
		return nil
	}
	out := new(CELExpression)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DryRun) DeepCopyInto(out *DryRun) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DryRun.
func (in *DryRun) DeepCopy() *DryRun {
	if in == nil {
		return nil
	}
	out := new(DryRun)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DryRunResult) DeepCopyInto(out *DryRunResult) {
	*out = *in
	in.Plan.DeepCopyInto(&out.Plan)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DryRunResult.
func (in *DryRunResult) DeepCopy() *DryRunResult {
	if in == nil {
		return nil
	}
	out := new(DryRunResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventAttributes) DeepCopyInto(out *EventAttributes) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventAttributes.
func (in *EventAttributes) DeepCopy() *EventAttributes {
	if in == nil {
		return nil
	}
	out := new(EventAttributes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectChange) DeepCopyInto(out *ObjectChange) {
	*out = *in
	out.ObjectReference = in.ObjectReference
	if in.EventAttributes != nil {
		in, out := &in.EventAttributes, &out.EventAttributes
		*out = new(EventAttributes)
		**out = **in
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		*out = (*in).DeepCopy()
	}
	if in.LocalDescription != nil {
		in, out := &in.LocalDescription, &out.LocalDescription
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectChange.
func (in *ObjectChange) DeepCopy() *ObjectChange {
	if in == nil {
		return nil
	}
	out := new(ObjectChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectChangeSummary) DeepCopyInto(out *ObjectChangeSummary) {
	*out = *in
	if in.Added != nil {
		in, out := &in.Added, &out.Added
		*out = new(int32)
		**out = **in
	}
	if in.Updated != nil {
		in, out := &in.Updated, &out.Updated
		*out = new(int32)
		**out = **in
	}
	if in.Deleted != nil {
		in, out := &in.Deleted, &out.Deleted
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectChangeSummary.
func (in *ObjectChangeSummary) DeepCopy() *ObjectChangeSummary {
	if in == nil {
		return nil
	}
	out := new(ObjectChangeSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectReference) DeepCopyInto(out *ObjectReference) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectReference.
func (in *ObjectReference) DeepCopy() *ObjectReference {
	if in == nil {
		return nil
	}
	out := new(ObjectReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectSummary) DeepCopyInto(out *ObjectSummary) {
	*out = *in
	out.ObjectType = in.ObjectType
	if in.ChangeSummary != nil {
		in, out := &in.ChangeSummary, &out.ChangeSummary
		*out = new(ObjectChangeSummary)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectSummary.
func (in *ObjectSummary) DeepCopy() *ObjectSummary {
	if in == nil {
		return nil
	}
	out := new(ObjectSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectTreeDiffSummary) DeepCopyInto(out *ObjectTreeDiffSummary) {
	*out = *in
	if in.ObjectSummaries != nil {
		in, out := &in.ObjectSummaries, &out.ObjectSummaries
		*out = make([]ObjectSummary, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectTreeDiffSummary.
func (in *ObjectTreeDiffSummary) DeepCopy() *ObjectTreeDiffSummary {
	if in == nil {
		return nil
	}
	out := new(ObjectTreeDiffSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectTreeNode) DeepCopyInto(out *ObjectTreeNode) {
	*out = *in
	out.Primary = in.Primary
	if in.Secondaries != nil {
		in, out := &in.Secondaries, &out.Secondaries
		*out = make([]*ObjectTreeNode, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(ObjectTreeNode)
				(*in).DeepCopyInto(*out)
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectTreeNode.
func (in *ObjectTreeNode) DeepCopy() *ObjectTreeNode {
	if in == nil {
		return nil
	}
	out := new(ObjectTreeNode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ObjectType) DeepCopyInto(out *ObjectType) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ObjectType.
func (in *ObjectType) DeepCopy() *ObjectType {
	if in == nil {
		return nil
	}
	out := new(ObjectType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReconciliationCycleState) DeepCopyInto(out *ReconciliationCycleState) {
	*out = *in
	in.Summary.DeepCopyInto(&out.Summary)
	if in.ObjectTree != nil {
		in, out := &in.ObjectTree, &out.ObjectTree
		*out = new(ObjectTreeNode)
		(*in).DeepCopyInto(*out)
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		*out = make([]ObjectChange, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReconciliationCycleState.
func (in *ReconciliationCycleState) DeepCopy() *ReconciliationCycleState {
	if in == nil {
		return nil
	}
	out := new(ReconciliationCycleState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReconciliationTrace) DeepCopyInto(out *ReconciliationTrace) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReconciliationTrace.
func (in *ReconciliationTrace) DeepCopy() *ReconciliationTrace {
	if in == nil {
		return nil
	}
	out := new(ReconciliationTrace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReconciliationTrace) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReconciliationTraceList) DeepCopyInto(out *ReconciliationTraceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ReconciliationTrace, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReconciliationTraceList.
func (in *ReconciliationTraceList) DeepCopy() *ReconciliationTraceList {
	if in == nil {
		return nil
	}
	out := new(ReconciliationTraceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ReconciliationTraceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReconciliationTraceSpec) DeepCopyInto(out *ReconciliationTraceSpec) {
	*out = *in
	if in.TargetObject != nil {
		in, out := &in.TargetObject, &out.TargetObject
		*out = new(ObjectReference)
		**out = **in
	}
	if in.DryRun != nil {
		in, out := &in.DryRun, &out.DryRun
		*out = new(DryRun)
		**out = **in
	}
	if in.StateEvaluationExpression != nil {
		in, out := &in.StateEvaluationExpression, &out.StateEvaluationExpression
		*out = new(StateEvaluationExpression)
		(*in).DeepCopyInto(*out)
	}
	if in.Locale != nil {
		in, out := &in.Locale, &out.Locale
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReconciliationTraceSpec.
func (in *ReconciliationTraceSpec) DeepCopy() *ReconciliationTraceSpec {
	if in == nil {
		return nil
	}
	out := new(ReconciliationTraceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReconciliationTraceStatus) DeepCopyInto(out *ReconciliationTraceStatus) {
	*out = *in
	if in.DryRunResult != nil {
		in, out := &in.DryRunResult, &out.DryRunResult
		*out = new(DryRunResult)
		(*in).DeepCopyInto(*out)
	}
	if in.InitialObjectTree != nil {
		in, out := &in.InitialObjectTree, &out.InitialObjectTree
		*out = new(ObjectTreeNode)
		(*in).DeepCopyInto(*out)
	}
	in.CurrentState.DeepCopyInto(&out.CurrentState)
	if in.DesiredState != nil {
		in, out := &in.DesiredState, &out.DesiredState
		*out = new(ReconciliationCycleState)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReconciliationTraceStatus.
func (in *ReconciliationTraceStatus) DeepCopy() *ReconciliationTraceStatus {
	if in == nil {
		return nil
	}
	out := new(ReconciliationTraceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StateEvaluationExpression) DeepCopyInto(out *StateEvaluationExpression) {
	*out = *in
	if in.CELExpression != nil {
		in, out := &in.CELExpression, &out.CELExpression
		*out = new(CELExpression)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StateEvaluationExpression.
func (in *StateEvaluationExpression) DeepCopy() *StateEvaluationExpression {
	if in == nil {
		return nil
	}
	out := new(StateEvaluationExpression)
	in.DeepCopyInto(out)
	return out
}
