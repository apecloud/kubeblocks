apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.1
  labels:
    app.kubernetes.io/name: kubeblocks
  name: components.apps.kubeblocks.io
spec:
  group: apps.kubeblocks.io
  names:
    categories:
    - kubeblocks
    - all
    kind: Component
    listKind: ComponentList
    plural: components
    shortNames:
    - cmp
    singular: component
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: component definition
      jsonPath: .spec.compDef
      name: DEFINITION
      type: string
    - description: service version
      jsonPath: .spec.serviceVersion
      name: SERVICE-VERSION
      type: string
    - description: status phase
      jsonPath: .status.phase
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "Component is a fundamental building block of a Cluster object.
          For example, a Redis Cluster can include Components like 'redis', 'sentinel',
          and potentially a proxy like 'twemproxy'. \n The Component object is responsible
          for managing the lifecycle of all replicas within a Cluster component, It
          supports a wide range of operations including provisioning, stopping, restarting,
          termination, upgrading, configuration changes, vertical and horizontal scaling,
          failover, switchover, cross-node migration, scheduling configuration, exposing
          Services, managing system accounts, enabling/disabling exporter, and configuring
          log collection. \n Component is an internal sub-object derived from the
          user-submitted Cluster object. It is designed primarily to be used by the
          KubeBlocks controllers, users are discouraged from modifying Component objects
          directly and should use them only for monitoring Component statuses."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ComponentSpec defines the desired state of Component.
            properties:
              affinity:
                description: Specifies a group of affinity scheduling rules for the
                  Component. It allows users to control how the Component's Pods are
                  scheduled onto nodes in the Cluster.
                properties:
                  nodeLabels:
                    additionalProperties:
                      type: string
                    description: "Indicates the node labels that must be present on
                      nodes for pods to be scheduled on them. It is a map where the
                      keys are the label keys and the values are the corresponding
                      label values. Pods will only be scheduled on nodes that have
                      all the specified labels with the corresponding values. \n For
                      example, if NodeLabels is set to {\"nodeType\": \"ssd\", \"environment\":
                      \"production\"}, pods will only be scheduled on nodes that have
                      both the \"nodeType\" label with value \"ssd\" and the \"environment\"
                      label with value \"production\". \n This field allows users
                      to control Pod placement based on specific node labels. It can
                      be used to ensure that Pods are scheduled on nodes with certain
                      characteristics, such as specific hardware (e.g., SSD), environment
                      (e.g., production, staging), or any other custom labels assigned
                      to nodes."
                    type: object
                  podAntiAffinity:
                    default: Preferred
                    description: 'Specifies the anti-affinity level of Pods within
                      a Component. It determines how pods should be spread across
                      nodes to improve availability and performance. It can have the
                      following values: `Preferred` and `Required`. The default value
                      is `Preferred`.'
                    enum:
                    - Preferred
                    - Required
                    type: string
                  tenancy:
                    default: SharedNode
                    description: "Determines the level of resource isolation between
                      Pods. It can have the following values: `SharedNode` and `DedicatedNode`.
                      \n - SharedNode: Allow that multiple Pods may share the same
                      node, which is the default behavior of K8s. - DedicatedNode:
                      Each Pod runs on a dedicated node, ensuring that no two Pods
                      share the same node. In other words, if a Pod is already running
                      on a node, no other Pods will be scheduled on that node. Which
                      provides a higher level of isolation and resource guarantee
                      for Pods. \n The default value is `SharedNode`."
                    enum:
                    - SharedNode
                    - DedicatedNode
                    type: string
                  topologyKeys:
                    description: "Represents the key of node labels used to define
                      the topology domain for Pod anti-affinity and Pod spread constraints.
                      \n In K8s, a topology domain is a set of nodes that have the
                      same value for a specific label key. Nodes with labels containing
                      any of the specified TopologyKeys and identical values are considered
                      to be in the same topology domain. \n Note: The concept of topology
                      in the context of K8s TopologyKeys is different from the concept
                      of topology in the ClusterDefinition. \n When a Pod has anti-affinity
                      or spread constraints specified, Kubernetes will attempt to
                      schedule the Pod on nodes with different values for the specified
                      TopologyKeys. This ensures that Pods are spread across different
                      topology domains, promoting high availability and reducing the
                      impact of node failures. \n Some well-known label keys, such
                      as `kubernetes.io/hostname` and `topology.kubernetes.io/zone`,
                      are often used as TopologyKey. These keys represent the hostname
                      and zone of a node, respectively. By including these keys in
                      the TopologyKeys list, Pods will be spread across nodes with
                      different hostnames or zones. \n In addition to the well-known
                      keys, users can also specify custom label keys as TopologyKeys.
                      This allows for more flexible and custom topology definitions
                      based on the specific needs of the application or environment.
                      \n The TopologyKeys field is a slice of strings, where each
                      string represents a label key. The order of the keys in the
                      slice does not matter."
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: set
                type: object
              annotations:
                additionalProperties:
                  type: string
                description: Specifies Annotations to override or add for underlying
                  Pods.
                type: object
              classDefRef:
                description: "References the class defined in ComponentClassDefinition.
                  \n Deprecated since v0.9. This field is maintained for backward
                  compatibility and its use is discouraged. Existing usage should
                  be updated to the current preferred approach to avoid compatibility
                  issues in future releases."
                properties:
                  class:
                    description: Defines the name of the class that is defined in
                      the ComponentClassDefinition.
                    type: string
                  name:
                    description: Specifies the name of the ComponentClassDefinition.
                    maxLength: 63
                    pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                    type: string
                required:
                - class
                type: object
              compDef:
                description: Specifies the name of the referenced ComponentDefinition.
                maxLength: 64
                type: string
              configs:
                description: Reserved field for future use.
                items:
                  properties:
                    asEnvFrom:
                      description: "Specifies the containers to inject the ConfigMap
                        parameters as environment variables. \n This is useful when
                        application images accept parameters through environment variables
                        and generate the final configuration file in the startup script
                        based on these variables. \n This field allows users to specify
                        a list of container names, and KubeBlocks will inject the
                        environment variables converted from the ConfigMap into these
                        designated containers. This provides a flexible way to pass
                        the configuration items from the ConfigMap to the container
                        without modifying the image. \n Deprecated: `asEnvFrom` has
                        been deprecated since 0.9.0 and will be removed in 0.10.0.
                        Use `injectEnvTo` instead."
                      items:
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                    constraintRef:
                      description: Specifies the name of the referenced configuration
                        constraints object.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    defaultMode:
                      description: "The operator attempts to set default file permissions
                        for scripts (0555) and configurations (0444). However, certain
                        database engines may require different file permissions. You
                        can specify the desired file permissions here. \n Must be
                        specified as an octal value between 0000 and 0777 (inclusive),
                        or as a decimal value between 0 and 511 (inclusive). YAML
                        supports both octal and decimal values for file permissions.
                        \n Please note that this setting only affects the permissions
                        of the files themselves. Directories within the specified
                        path are not impacted by this setting. It's important to be
                        aware that this setting might conflict with other options
                        that influence the file mode, such as fsGroup. In such cases,
                        the resulting file mode may have additional bits set. Refers
                        to documents of k8s.ConfigMapVolumeSource.defaultMode for
                        more information."
                      format: int32
                      type: integer
                    injectEnvTo:
                      description: "Specifies the containers to inject the ConfigMap
                        parameters as environment variables. \n This is useful when
                        application images accept parameters through environment variables
                        and generate the final configuration file in the startup script
                        based on these variables. \n This field allows users to specify
                        a list of container names, and KubeBlocks will inject the
                        environment variables converted from the ConfigMap into these
                        designated containers. This provides a flexible way to pass
                        the configuration items from the ConfigMap to the container
                        without modifying the image."
                      items:
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                    keys:
                      description: "Specifies the configuration files within the ConfigMap
                        that support dynamic updates. \n A configuration template
                        (provided in the form of a ConfigMap) may contain templates
                        for multiple configuration files. Each configuration file
                        corresponds to a key in the ConfigMap. Some of these configuration
                        files may support dynamic modification and reloading without
                        requiring a pod restart. \n If empty or omitted, all configuration
                        files in the ConfigMap are assumed to support dynamic updates,
                        and ConfigConstraint applies to all keys."
                      items:
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                    legacyRenderedConfigSpec:
                      description: "Specifies the secondary rendered config spec for
                        pod-specific customization. \n The template is rendered inside
                        the pod (by the \"config-manager\" sidecar container) and
                        merged with the main template's render result to generate
                        the final configuration file. \n This field is intended to
                        handle scenarios where different pods within the same Component
                        have varying configurations. It allows for pod-specific customization
                        of the configuration. \n Note: This field will be deprecated
                        in future versions, and the functionality will be moved to
                        `cluster.spec.componentSpecs[*].instances[*]`."
                      properties:
                        namespace:
                          default: default
                          description: Specifies the namespace of the referenced configuration
                            template ConfigMap object. An empty namespace is equivalent
                            to the "default" namespace.
                          maxLength: 63
                          pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                          type: string
                        policy:
                          default: none
                          description: Defines the strategy for merging externally
                            imported templates into component templates.
                          enum:
                          - patch
                          - replace
                          - none
                          type: string
                        templateRef:
                          description: Specifies the name of the referenced configuration
                            template ConfigMap object.
                          maxLength: 63
                          pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                          type: string
                      required:
                      - templateRef
                      type: object
                    name:
                      description: Specifies the name of the configuration template.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    namespace:
                      default: default
                      description: Specifies the namespace of the referenced configuration
                        template ConfigMap object. An empty namespace is equivalent
                        to the "default" namespace.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                      type: string
                    reRenderResourceTypes:
                      description: "Specifies whether the configuration needs to be
                        re-rendered after v-scale or h-scale operations to reflect
                        changes. \n In some scenarios, the configuration may need
                        to be updated to reflect the changes in resource allocation
                        or cluster topology. Examples: \n - Redis: adjust maxmemory
                        after v-scale operation. - MySQL: increase max connections
                        after v-scale operation. - Zookeeper: update zoo.cfg with
                        new node addresses after h-scale operation."
                      items:
                        description: RerenderResourceType defines the resource requirements
                          for a component.
                        enum:
                        - vscale
                        - hscale
                        - tls
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                    templateRef:
                      description: Specifies the name of the referenced configuration
                        template ConfigMap object.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    volumeName:
                      description: Refers to the volume name of PodTemplate. The configuration
                        file produced through the configuration template will be mounted
                        to the corresponding volume. Must be a DNS_LABEL name. The
                        volume name must be defined in podSpec.containers[*].volumeMounts.
                      maxLength: 63
                      pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                      type: string
                  required:
                  - name
                  - templateRef
                  - volumeName
                  type: object
                type: array
              disableExporter:
                description: "Determines whether metrics exporter information is annotated
                  on the Component's headless Service. \n If set to true, the following
                  annotations will not be patched into the Service: \n - \"monitor.kubeblocks.io/path\"
                  - \"monitor.kubeblocks.io/port\" - \"monitor.kubeblocks.io/scheme\"
                  \n These annotations allow the Prometheus installed by KubeBlocks
                  to discover and scrape metrics from the exporter."
                type: boolean
              enabledLogs:
                description: "Specifies which types of logs should be collected for
                  the Cluster. The log types are defined in the `componentDefinition.spec.logConfigs`
                  field with the LogConfig entries. \n The elements in the `enabledLogs`
                  array correspond to the names of the LogConfig entries. For example,
                  if the `componentDefinition.spec.logConfigs` defines LogConfig entries
                  with names \"slow_query_log\" and \"error_log\", you can enable
                  the collection of these logs by including their names in the `enabledLogs`
                  array: ```yaml enabledLogs: - slow_query_log - error_log ```"
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              env:
                description: List of environment variables to add.
                items:
                  description: EnvVar represents an environment variable present in
                    a Container.
                  properties:
                    name:
                      description: Name of the environment variable. Must be a C_IDENTIFIER.
                      type: string
                    value:
                      description: 'Variable references $(VAR_NAME) are expanded using
                        the previously defined environment variables in the container
                        and any service environment variables. If a variable cannot
                        be resolved, the reference in the input string will be unchanged.
                        Double $$ are reduced to a single $, which allows for escaping
                        the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
                        string literal "$(VAR_NAME)". Escaped references will never
                        be expanded, regardless of whether the variable exists or
                        not. Defaults to "".'
                      type: string
                    valueFrom:
                      description: Source for the environment variable's value. Cannot
                        be used if value is not empty.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key
                                must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                        fieldRef:
                          description: 'Selects a field of the pod: supports metadata.name,
                            metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`,
                            spec.nodeName, spec.serviceAccountName, status.hostIP,
                            status.podIP, status.podIPs.'
                          properties:
                            apiVersion:
                              description: Version of the schema the FieldPath is
                                written in terms of, defaults to "v1".
                              type: string
                            fieldPath:
                              description: Path of the field to select in the specified
                                API version.
                              type: string
                          required:
                          - fieldPath
                          type: object
                          x-kubernetes-map-type: atomic
                        resourceFieldRef:
                          description: 'Selects a resource of the container: only
                            resources limits and requests (limits.cpu, limits.memory,
                            limits.ephemeral-storage, requests.cpu, requests.memory
                            and requests.ephemeral-storage) are currently supported.'
                          properties:
                            containerName:
                              description: 'Container name: required for volumes,
                                optional for env vars'
                              type: string
                            divisor:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Specifies the output format of the exposed
                                resources, defaults to "1"
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            resource:
                              description: 'Required: resource to select'
                              type: string
                          required:
                          - resource
                          type: object
                          x-kubernetes-map-type: atomic
                        secretKeyRef:
                          description: Selects a key of a secret in the pod's namespace
                          properties:
                            key:
                              description: The key of the secret to select from.  Must
                                be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must
                                be defined
                              type: boolean
                          required:
                          - key
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  required:
                  - name
                  type: object
                type: array
              instances:
                description: "Allows for the customization of configuration values
                  for each instance within a Component. An Instance represent a single
                  replica (Pod and associated K8s resources like PVCs, Services, and
                  ConfigMaps). While instances typically share a common configuration
                  as defined in the ClusterComponentSpec, they can require unique
                  settings in various scenarios: \n For example: - A database Component
                  might require different resource allocations for primary and secondary
                  instances, with primaries needing more resources. - During a rolling
                  upgrade, a Component may first update the image for one or a few
                  instances, and then update the remaining instances after verifying
                  that the updated instances are functioning correctly. \n InstanceTemplate
                  allows for specifying these unique configurations per instance.
                  Each instance's name is constructed using the pattern: $(component.name)-$(template.name)-$(ordinal),
                  starting with an ordinal of 0. It is crucial to maintain unique
                  names for each InstanceTemplate to avoid conflicts. \n The sum of
                  replicas across all InstanceTemplates should not exceed the total
                  number of Replicas specified for the Component. Any remaining replicas
                  will be generated using the default template and will follow the
                  default naming rules."
                items:
                  description: InstanceTemplate allows customization of individual
                    replica configurations in a Component.
                  properties:
                    annotations:
                      additionalProperties:
                        type: string
                      description: Specifies a map of key-value pairs to be merged
                        into the Pod's existing annotations. Existing keys will have
                        their values overwritten, while new keys will be added to
                        the annotations.
                      type: object
                    env:
                      description: Defines Env to override. Add new or override existing
                        envs.
                      items:
                        description: EnvVar represents an environment variable present
                          in a Container.
                        properties:
                          name:
                            description: Name of the environment variable. Must be
                              a C_IDENTIFIER.
                            type: string
                          value:
                            description: 'Variable references $(VAR_NAME) are expanded
                              using the previously defined environment variables in
                              the container and any service environment variables.
                              If a variable cannot be resolved, the reference in the
                              input string will be unchanged. Double $$ are reduced
                              to a single $, which allows for escaping the $(VAR_NAME)
                              syntax: i.e. "$$(VAR_NAME)" will produce the string
                              literal "$(VAR_NAME)". Escaped references will never
                              be expanded, regardless of whether the variable exists
                              or not. Defaults to "".'
                            type: string
                          valueFrom:
                            description: Source for the environment variable's value.
                              Cannot be used if value is not empty.
                            properties:
                              configMapKeyRef:
                                description: Selects a key of a ConfigMap.
                                properties:
                                  key:
                                    description: The key to select.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the ConfigMap or
                                      its key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              fieldRef:
                                description: 'Selects a field of the pod: supports
                                  metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`,
                                  `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                  spec.serviceAccountName, status.hostIP, status.podIP,
                                  status.podIPs.'
                                properties:
                                  apiVersion:
                                    description: Version of the schema the FieldPath
                                      is written in terms of, defaults to "v1".
                                    type: string
                                  fieldPath:
                                    description: Path of the field to select in the
                                      specified API version.
                                    type: string
                                required:
                                - fieldPath
                                type: object
                                x-kubernetes-map-type: atomic
                              resourceFieldRef:
                                description: 'Selects a resource of the container:
                                  only resources limits and requests (limits.cpu,
                                  limits.memory, limits.ephemeral-storage, requests.cpu,
                                  requests.memory and requests.ephemeral-storage)
                                  are currently supported.'
                                properties:
                                  containerName:
                                    description: 'Container name: required for volumes,
                                      optional for env vars'
                                    type: string
                                  divisor:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: Specifies the output format of the
                                      exposed resources, defaults to "1"
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  resource:
                                    description: 'Required: resource to select'
                                    type: string
                                required:
                                - resource
                                type: object
                                x-kubernetes-map-type: atomic
                              secretKeyRef:
                                description: Selects a key of a secret in the pod's
                                  namespace
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                            type: object
                        required:
                        - name
                        type: object
                      type: array
                    image:
                      description: Specifies an override for the first container's
                        image in the Pod.
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      description: Specifies a map of key-value pairs that will be
                        merged into the Pod's existing labels. Values for existing
                        keys will be overwritten, and new keys will be added.
                      type: object
                    name:
                      description: 'Name specifies the unique name of the instance
                        Pod created using this InstanceTemplate. This name is constructed
                        by concatenating the Component''s name, the template''s name,
                        and the instance''s ordinal using the pattern: $(cluster.name)-$(component.name)-$(template.name)-$(ordinal).
                        Ordinals start from 0. The specified name overrides any default
                        naming conventions or patterns.'
                      maxLength: 54
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    replicas:
                      default: 1
                      description: Specifies the number of instances (Pods) to create
                        from this InstanceTemplate. This field allows setting how
                        many replicated instances of the Component, with the specific
                        overrides in the InstanceTemplate, are created. The default
                        value is 1. A value of 0 disables instance creation.
                      format: int32
                      minimum: 0
                      type: integer
                    resources:
                      description: Specifies an override for the resource requirements
                        of the first container in the Pod. This field allows for customizing
                        resource allocation (CPU, memory, etc.) for the container.
                      properties:
                        claims:
                          description: "Claims lists the names of resources, defined
                            in spec.resourceClaims, that are used by this container.
                            \n This is an alpha field and requires enabling the DynamicResourceAllocation
                            feature gate. \n This field is immutable. It can only
                            be set for containers."
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: Name must match the name of one entry
                                  in pod.spec.resourceClaims of the Pod where this
                                  field is used. It makes that resource available
                                  inside a container.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                            resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                            resources required. If Requests is omitted for a container,
                            it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. Requests
                            cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                      type: object
                    schedulingPolicy:
                      description: Specifies the scheduling policy for the Component.
                      properties:
                        affinity:
                          description: Specifies a group of affinity scheduling rules
                            of the Cluster, including NodeAffinity, PodAffinity, and
                            PodAntiAffinity.
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules
                                for the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule
                                    pods to nodes that satisfy the affinity expressions
                                    specified by this field, but it may choose a node
                                    that violates one or more of the expressions.
                                    The node that is most preferred is the one with
                                    the greatest sum of weights, i.e. for each node
                                    that meets all of the scheduling requirements
                                    (resource request, requiredDuringScheduling affinity
                                    expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding
                                    "weight" to the sum if the node matches the corresponding
                                    matchExpressions; the node(s) with the highest
                                    sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term
                                      matches all objects with implicit weight 0 (i.e.
                                      it's a no-op). A null preferred scheduling term
                                      matches no objects (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated
                                          with the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      weight:
                                        description: Weight associated with matching
                                          the corresponding nodeSelectorTerm, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - preference
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified
                                    by this field are not met at scheduling time,
                                    the pod will not be scheduled onto the node. If
                                    the affinity requirements specified by this field
                                    cease to be met at some point during pod execution
                                    (e.g. due to an update), the system may or may
                                    not try to eventually evict the pod from its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector
                                        terms. The terms are ORed.
                                      items:
                                        description: A null or empty node selector
                                          term matches no objects. The requirements
                                          of them are ANDed. The TopologySelectorTerm
                                          type implements a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      type: array
                                  required:
                                  - nodeSelectorTerms
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules
                                (e.g. co-locate this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule
                                    pods to nodes that satisfy the affinity expressions
                                    specified by this field, but it may choose a node
                                    that violates one or more of the expressions.
                                    The node that is most preferred is the one with
                                    the greatest sum of weights, i.e. for each node
                                    that meets all of the scheduling requirements
                                    (resource request, requiredDuringScheduling affinity
                                    expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding
                                    "weight" to the sum if the node has pods which
                                    matches the corresponding podAffinityTerm; the
                                    node(s) with the highest sum are the most preferred.
                                  items:
                                    description: The weights of all of the matched
                                      WeightedPodAffinityTerm fields are added per-node
                                      to find the most preferred node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term,
                                          associated with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set
                                              of resources, in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaceSelector:
                                            description: A label query over the set
                                              of namespaces that the term applies
                                              to. The term is applied to the union
                                              of the namespaces selected by this field
                                              and the ones listed in the namespaces
                                              field. null selector and null or empty
                                              namespaces list means "this pod's namespace".
                                              An empty selector ({}) matches all namespaces.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaces:
                                            description: namespaces specifies a static
                                              list of namespace names that the term
                                              applies to. The term is applied to the
                                              union of the namespaces listed in this
                                              field and the ones selected by namespaceSelector.
                                              null or empty namespaces list and null
                                              namespaceSelector means "this pod's
                                              namespace".
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located
                                              (affinity) or not co-located (anti-affinity)
                                              with the pods matching the labelSelector
                                              in the specified namespaces, where co-located
                                              is defined as running on a node whose
                                              value of the label with key topologyKey
                                              matches that of any node on which any
                                              of the selected pods is running. Empty
                                              topologyKey is not allowed.
                                            type: string
                                        required:
                                        - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching
                                          the corresponding podAffinityTerm, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - podAffinityTerm
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified
                                    by this field are not met at scheduling time,
                                    the pod will not be scheduled onto the node. If
                                    the affinity requirements specified by this field
                                    cease to be met at some point during pod execution
                                    (e.g. due to a pod label update), the system may
                                    or may not try to eventually evict the pod from
                                    its node. When there are multiple elements, the
                                    lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those
                                      matching the labelSelector relative to the given
                                      namespace(s)) that this pod should be co-located
                                      (affinity) or not co-located (anti-affinity)
                                      with, where co-located is defined as running
                                      on a node whose value of the label with key
                                      <topologyKey> matches that of any node on which
                                      a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaceSelector:
                                        description: A label query over the set of
                                          namespaces that the term applies to. The
                                          term is applied to the union of the namespaces
                                          selected by this field and the ones listed
                                          in the namespaces field. null selector and
                                          null or empty namespaces list means "this
                                          pod's namespace". An empty selector ({})
                                          matches all namespaces.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        description: namespaces specifies a static
                                          list of namespace names that the term applies
                                          to. The term is applied to the union of
                                          the namespaces listed in this field and
                                          the ones selected by namespaceSelector.
                                          null or empty namespaces list and null namespaceSelector
                                          means "this pod's namespace".
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located
                                          (affinity) or not co-located (anti-affinity)
                                          with the pods matching the labelSelector
                                          in the specified namespaces, where co-located
                                          is defined as running on a node whose value
                                          of the label with key topologyKey matches
                                          that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not
                                          allowed.
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling
                                rules (e.g. avoid putting this pod in the same node,
                                zone, etc. as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule
                                    pods to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node
                                    that violates one or more of the expressions.
                                    The node that is most preferred is the one with
                                    the greatest sum of weights, i.e. for each node
                                    that meets all of the scheduling requirements
                                    (resource request, requiredDuringScheduling anti-affinity
                                    expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding
                                    "weight" to the sum if the node has pods which
                                    matches the corresponding podAffinityTerm; the
                                    node(s) with the highest sum are the most preferred.
                                  items:
                                    description: The weights of all of the matched
                                      WeightedPodAffinityTerm fields are added per-node
                                      to find the most preferred node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term,
                                          associated with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set
                                              of resources, in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaceSelector:
                                            description: A label query over the set
                                              of namespaces that the term applies
                                              to. The term is applied to the union
                                              of the namespaces selected by this field
                                              and the ones listed in the namespaces
                                              field. null selector and null or empty
                                              namespaces list means "this pod's namespace".
                                              An empty selector ({}) matches all namespaces.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaces:
                                            description: namespaces specifies a static
                                              list of namespace names that the term
                                              applies to. The term is applied to the
                                              union of the namespaces listed in this
                                              field and the ones selected by namespaceSelector.
                                              null or empty namespaces list and null
                                              namespaceSelector means "this pod's
                                              namespace".
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located
                                              (affinity) or not co-located (anti-affinity)
                                              with the pods matching the labelSelector
                                              in the specified namespaces, where co-located
                                              is defined as running on a node whose
                                              value of the label with key topologyKey
                                              matches that of any node on which any
                                              of the selected pods is running. Empty
                                              topologyKey is not allowed.
                                            type: string
                                        required:
                                        - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching
                                          the corresponding podAffinityTerm, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - podAffinityTerm
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time,
                                    the pod will not be scheduled onto the node. If
                                    the anti-affinity requirements specified by this
                                    field cease to be met at some point during pod
                                    execution (e.g. due to a pod label update), the
                                    system may or may not try to eventually evict
                                    the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to
                                    each podAffinityTerm are intersected, i.e. all
                                    terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those
                                      matching the labelSelector relative to the given
                                      namespace(s)) that this pod should be co-located
                                      (affinity) or not co-located (anti-affinity)
                                      with, where co-located is defined as running
                                      on a node whose value of the label with key
                                      <topologyKey> matches that of any node on which
                                      a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaceSelector:
                                        description: A label query over the set of
                                          namespaces that the term applies to. The
                                          term is applied to the union of the namespaces
                                          selected by this field and the ones listed
                                          in the namespaces field. null selector and
                                          null or empty namespaces list means "this
                                          pod's namespace". An empty selector ({})
                                          matches all namespaces.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        description: namespaces specifies a static
                                          list of namespace names that the term applies
                                          to. The term is applied to the union of
                                          the namespaces listed in this field and
                                          the ones selected by namespaceSelector.
                                          null or empty namespaces list and null namespaceSelector
                                          means "this pod's namespace".
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located
                                          (affinity) or not co-located (anti-affinity)
                                          with the pods matching the labelSelector
                                          in the specified namespaces, where co-located
                                          is defined as running on a node whose value
                                          of the label with key topologyKey matches
                                          that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not
                                          allowed.
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        nodeName:
                          description: NodeName is a request to schedule this Pod
                            onto a specific node. If it is non-empty, the scheduler
                            simply schedules this Pod onto that node, assuming that
                            it fits resource requirements.
                          type: string
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: 'NodeSelector is a selector which must be true
                            for the Pod to fit on a node. Selector which must match
                            a node''s labels for the Pod to be scheduled on that node.
                            More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                          type: object
                          x-kubernetes-map-type: atomic
                        schedulerName:
                          description: If specified, the Pod will be dispatched by
                            specified scheduler. If not specified, the Pod will be
                            dispatched by default scheduler.
                          type: string
                        tolerations:
                          description: "Allows Pods to be scheduled onto nodes with
                            matching taints. Each toleration in the array allows the
                            Pod to tolerate node taints based on specified `key`,
                            `value`, `effect`, and `operator`. \n - The `key`, `value`,
                            and `effect` identify the taint that the toleration matches.
                            - The `operator` determines how the toleration matches
                            the taint. \n Pods with matching tolerations are allowed
                            to be scheduled on tainted nodes, typically reserved for
                            specific purposes."
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect>
                              using the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to
                                  match. Empty means match all taint effects. When
                                  specified, allowed values are NoSchedule, PreferNoSchedule
                                  and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration
                                  applies to. Empty means match all taint keys. If
                                  the key is empty, operator must be Exists; this
                                  combination means to match all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship
                                  to the value. Valid operators are Exists and Equal.
                                  Defaults to Equal. Exists is equivalent to wildcard
                                  for value, so that a pod can tolerate all taints
                                  of a particular category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period
                                  of time the toleration (which must be of effect
                                  NoExecute, otherwise this field is ignored) tolerates
                                  the taint. By default, it is not set, which means
                                  tolerate the taint forever (do not evict). Zero
                                  and negative values will be treated as 0 (evict
                                  immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration
                                  matches to. If the operator is Exists, the value
                                  should be empty, otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        topologySpreadConstraints:
                          description: TopologySpreadConstraints describes how a group
                            of Pods ought to spread across topology domains. Scheduler
                            will schedule Pods in a way which abides by the constraints.
                            All topologySpreadConstraints are ANDed.
                          items:
                            description: TopologySpreadConstraint specifies how to
                              spread matching pods among the given topology.
                            properties:
                              labelSelector:
                                description: LabelSelector is used to find matching
                                  pods. Pods that match this label selector are counted
                                  to determine the number of pods in their corresponding
                                  topology domain.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                                x-kubernetes-map-type: atomic
                              matchLabelKeys:
                                description: "MatchLabelKeys is a set of pod label
                                  keys to select the pods over which spreading will
                                  be calculated. The keys are used to lookup values
                                  from the incoming pod labels, those key-value labels
                                  are ANDed with labelSelector to select the group
                                  of existing pods over which spreading will be calculated
                                  for the incoming pod. The same key is forbidden
                                  to exist in both MatchLabelKeys and LabelSelector.
                                  MatchLabelKeys cannot be set when LabelSelector
                                  isn't set. Keys that don't exist in the incoming
                                  pod labels will be ignored. A null or empty list
                                  means only match against labelSelector. \n This
                                  is a beta field and requires the MatchLabelKeysInPodTopologySpread
                                  feature gate to be enabled (enabled by default)."
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                              maxSkew:
                                description: 'MaxSkew describes the degree to which
                                  pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`,
                                  it is the maximum permitted difference between the
                                  number of matching pods in the target topology and
                                  the global minimum. The global minimum is the minimum
                                  number of matching pods in an eligible domain or
                                  zero if the number of eligible domains is less than
                                  MinDomains. For example, in a 3-zone cluster, MaxSkew
                                  is set to 1, and pods with the same labelSelector
                                  spread as 2/2/1: In this case, the global minimum
                                  is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   |
                                  - if MaxSkew is 1, incoming pod can only be scheduled
                                  to zone3 to become 2/2/2; scheduling it onto zone1(zone2)
                                  would make the ActualSkew(3-1) on zone1(zone2) violate
                                  MaxSkew(1). - if MaxSkew is 2, incoming pod can
                                  be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`,
                                  it is used to give higher precedence to topologies
                                  that satisfy it. It''s a required field. Default
                                  value is 1 and 0 is not allowed.'
                                format: int32
                                type: integer
                              minDomains:
                                description: "MinDomains indicates a minimum number
                                  of eligible domains. When the number of eligible
                                  domains with matching topology keys is less than
                                  minDomains, Pod Topology Spread treats \"global
                                  minimum\" as 0, and then the calculation of Skew
                                  is performed. And when the number of eligible domains
                                  with matching topology keys equals or greater than
                                  minDomains, this value has no effect on scheduling.
                                  As a result, when the number of eligible domains
                                  is less than minDomains, scheduler won't schedule
                                  more than maxSkew Pods to those domains. If value
                                  is nil, the constraint behaves as if MinDomains
                                  is equal to 1. Valid values are integers greater
                                  than 0. When value is not nil, WhenUnsatisfiable
                                  must be DoNotSchedule. \n For example, in a 3-zone
                                  cluster, MaxSkew is set to 2, MinDomains is set
                                  to 5 and pods with the same labelSelector spread
                                  as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P
                                  P  |  P P  | The number of domains is less than
                                  5(MinDomains), so \"global minimum\" is treated
                                  as 0. In this situation, new pod with the same labelSelector
                                  cannot be scheduled, because computed skew will
                                  be 3(3 - 0) if new Pod is scheduled to any of the
                                  three zones, it will violate MaxSkew. \n This is
                                  a beta field and requires the MinDomainsInPodTopologySpread
                                  feature gate to be enabled (enabled by default)."
                                format: int32
                                type: integer
                              nodeAffinityPolicy:
                                description: "NodeAffinityPolicy indicates how we
                                  will treat Pod's nodeAffinity/nodeSelector when
                                  calculating pod topology spread skew. Options are:
                                  - Honor: only nodes matching nodeAffinity/nodeSelector
                                  are included in the calculations. - Ignore: nodeAffinity/nodeSelector
                                  are ignored. All nodes are included in the calculations.
                                  \n If this value is nil, the behavior is equivalent
                                  to the Honor policy. This is a beta-level feature
                                  default enabled by the NodeInclusionPolicyInPodTopologySpread
                                  feature flag."
                                type: string
                              nodeTaintsPolicy:
                                description: "NodeTaintsPolicy indicates how we will
                                  treat node taints when calculating pod topology
                                  spread skew. Options are: - Honor: nodes without
                                  taints, along with tainted nodes for which the incoming
                                  pod has a toleration, are included. - Ignore: node
                                  taints are ignored. All nodes are included. \n If
                                  this value is nil, the behavior is equivalent to
                                  the Ignore policy. This is a beta-level feature
                                  default enabled by the NodeInclusionPolicyInPodTopologySpread
                                  feature flag."
                                type: string
                              topologyKey:
                                description: TopologyKey is the key of node labels.
                                  Nodes that have a label with this key and identical
                                  values are considered to be in the same topology.
                                  We consider each <key, value> as a "bucket", and
                                  try to put balanced number of pods into each bucket.
                                  We define a domain as a particular instance of a
                                  topology. Also, we define an eligible domain as
                                  a domain whose nodes meet the requirements of nodeAffinityPolicy
                                  and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname",
                                  each Node is a domain of that topology. And, if
                                  TopologyKey is "topology.kubernetes.io/zone", each
                                  zone is a domain of that topology. It's a required
                                  field.
                                type: string
                              whenUnsatisfiable:
                                description: 'WhenUnsatisfiable indicates how to deal
                                  with a pod if it doesn''t satisfy the spread constraint.
                                  - DoNotSchedule (default) tells the scheduler not
                                  to schedule it. - ScheduleAnyway tells the scheduler
                                  to schedule the pod in any location, but giving
                                  higher precedence to topologies that would help
                                  reduce the skew. A constraint is considered "Unsatisfiable"
                                  for an incoming pod if and only if every possible
                                  node assignment for that pod would violate "MaxSkew"
                                  on some topology. For example, in a 3-zone cluster,
                                  MaxSkew is set to 1, and pods with the same labelSelector
                                  spread as 3/1/1: | zone1 | zone2 | zone3 | | P P
                                  P |   P   |   P   | If WhenUnsatisfiable is set
                                  to DoNotSchedule, incoming pod can only be scheduled
                                  to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1)
                                  on zone2(zone3) satisfies MaxSkew(1). In other words,
                                  the cluster can still be imbalanced, but scheduler
                                  won''t make it *more* imbalanced. It''s a required
                                  field.'
                                type: string
                            required:
                            - maxSkew
                            - topologyKey
                            - whenUnsatisfiable
                            type: object
                          type: array
                      type: object
                    volumeClaimTemplates:
                      description: Defines VolumeClaimTemplates to override. Add new
                        or override existing volume claim templates.
                      items:
                        properties:
                          name:
                            description: "Refers to the name of a volumeMount defined
                              in either: \n - `componentDefinition.spec.runtime.containers[*].volumeMounts`
                              - `clusterDefinition.spec.componentDefs[*].podSpec.containers[*].volumeMounts`
                              (deprecated) \n The value of `name` must match the `name`
                              field of a volumeMount specified in the corresponding
                              `volumeMounts` array."
                            type: string
                          spec:
                            description: "Defines the desired characteristics of a
                              PersistentVolumeClaim that will be created for the volume
                              with the mount name specified in the `name` field. \n
                              When a Pod is created for this ClusterComponent, a new
                              PVC will be created based on the specification defined
                              in the `spec` field. The PVC will be associated with
                              the volume mount specified by the `name` field."
                            properties:
                              accessModes:
                                description: 'Contains the desired access modes the
                                  volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.'
                                items:
                                  type: string
                                type: array
                                x-kubernetes-preserve-unknown-fields: true
                              resources:
                                description: 'Represents the minimum resources the
                                  volume should have. If the RecoverVolumeExpansionFailure
                                  feature is enabled, users are allowed to specify
                                  resource requirements that are lower than the previous
                                  value but must still be higher than the capacity
                                  recorded in the status field of the claim. More
                                  info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources.'
                                properties:
                                  claims:
                                    description: "Claims lists the names of resources,
                                      defined in spec.resourceClaims, that are used
                                      by this container. \n This is an alpha field
                                      and requires enabling the DynamicResourceAllocation
                                      feature gate. \n This field is immutable. It
                                      can only be set for containers."
                                    items:
                                      description: ResourceClaim references one entry
                                        in PodSpec.ResourceClaims.
                                      properties:
                                        name:
                                          description: Name must match the name of
                                            one entry in pod.spec.resourceClaims of
                                            the Pod where this field is used. It makes
                                            that resource available inside a container.
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    type: array
                                    x-kubernetes-list-map-keys:
                                    - name
                                    x-kubernetes-list-type: map
                                  limits:
                                    additionalProperties:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    description: 'Limits describes the maximum amount
                                      of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                    type: object
                                  requests:
                                    additionalProperties:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    description: 'Requests describes the minimum amount
                                      of compute resources required. If Requests is
                                      omitted for a container, it defaults to Limits
                                      if that is explicitly specified, otherwise to
                                      an implementation-defined value. Requests cannot
                                      exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                    type: object
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                              storageClassName:
                                description: 'The name of the StorageClass required
                                  by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.'
                                type: string
                              volumeMode:
                                description: Defines what type of volume is required
                                  by the claim, either Block or Filesystem.
                                type: string
                            type: object
                        required:
                        - name
                        type: object
                      type: array
                    volumeMounts:
                      description: Defines VolumeMounts to override. Add new or override
                        existing volume mounts of the first container in the Pod.
                      items:
                        description: VolumeMount describes a mounting of a Volume
                          within a container.
                        properties:
                          mountPath:
                            description: Path within the container at which the volume
                              should be mounted.  Must not contain ':'.
                            type: string
                          mountPropagation:
                            description: mountPropagation determines how mounts are
                              propagated from the host to container and the other
                              way around. When not set, MountPropagationNone is used.
                              This field is beta in 1.10.
                            type: string
                          name:
                            description: This must match the Name of a Volume.
                            type: string
                          readOnly:
                            description: Mounted read-only if true, read-write otherwise
                              (false or unspecified). Defaults to false.
                            type: boolean
                          subPath:
                            description: Path within the volume from which the container's
                              volume should be mounted. Defaults to "" (volume's root).
                            type: string
                          subPathExpr:
                            description: Expanded path within the volume from which
                              the container's volume should be mounted. Behaves similarly
                              to SubPath but environment variable references $(VAR_NAME)
                              are expanded using the container's environment. Defaults
                              to "" (volume's root). SubPathExpr and SubPath are mutually
                              exclusive.
                            type: string
                        required:
                        - mountPath
                        - name
                        type: object
                      type: array
                    volumes:
                      description: Defines Volumes to override. Add new or override
                        existing volumes.
                      items:
                        description: Volume represents a named volume in a pod that
                          may be accessed by any container in the pod.
                        properties:
                          awsElasticBlockStore:
                            description: 'awsElasticBlockStore represents an AWS Disk
                              resource that is attached to a kubelet''s host machine
                              and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                            properties:
                              fsType:
                                description: 'fsType is the filesystem type of the
                                  volume that you want to mount. Tip: Ensure that
                                  the filesystem type is supported by the host operating
                                  system. Examples: "ext4", "xfs", "ntfs". Implicitly
                                  inferred to be "ext4" if unspecified. More info:
                                  https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                                  TODO: how do we prevent errors in the filesystem
                                  from compromising the machine'
                                type: string
                              partition:
                                description: 'partition is the partition in the volume
                                  that you want to mount. If omitted, the default
                                  is to mount by volume name. Examples: For volume
                                  /dev/sda1, you specify the partition as "1". Similarly,
                                  the volume partition for /dev/sda is "0" (or you
                                  can leave the property empty).'
                                format: int32
                                type: integer
                              readOnly:
                                description: 'readOnly value true will force the readOnly
                                  setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                                type: boolean
                              volumeID:
                                description: 'volumeID is unique ID of the persistent
                                  disk resource in AWS (Amazon EBS volume). More info:
                                  https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                                type: string
                            required:
                            - volumeID
                            type: object
                          azureDisk:
                            description: azureDisk represents an Azure Data Disk mount
                              on the host and bind mount to the pod.
                            properties:
                              cachingMode:
                                description: 'cachingMode is the Host Caching mode:
                                  None, Read Only, Read Write.'
                                type: string
                              diskName:
                                description: diskName is the Name of the data disk
                                  in the blob storage
                                type: string
                              diskURI:
                                description: diskURI is the URI of data disk in the
                                  blob storage
                                type: string
                              fsType:
                                description: fsType is Filesystem type to mount. Must
                                  be a filesystem type supported by the host operating
                                  system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
                                  to be "ext4" if unspecified.
                                type: string
                              kind:
                                description: 'kind expected values are Shared: multiple
                                  blob disks per storage account  Dedicated: single
                                  blob disk per storage account  Managed: azure managed
                                  data disk (only in managed availability set). defaults
                                  to shared'
                                type: string
                              readOnly:
                                description: readOnly Defaults to false (read/write).
                                  ReadOnly here will force the ReadOnly setting in
                                  VolumeMounts.
                                type: boolean
                            required:
                            - diskName
                            - diskURI
                            type: object
                          azureFile:
                            description: azureFile represents an Azure File Service
                              mount on the host and bind mount to the pod.
                            properties:
                              readOnly:
                                description: readOnly defaults to false (read/write).
                                  ReadOnly here will force the ReadOnly setting in
                                  VolumeMounts.
                                type: boolean
                              secretName:
                                description: secretName is the  name of secret that
                                  contains Azure Storage Account Name and Key
                                type: string
                              shareName:
                                description: shareName is the azure share Name
                                type: string
                            required:
                            - secretName
                            - shareName
                            type: object
                          cephfs:
                            description: cephFS represents a Ceph FS mount on the
                              host that shares a pod's lifetime
                            properties:
                              monitors:
                                description: 'monitors is Required: Monitors is a
                                  collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                                items:
                                  type: string
                                type: array
                              path:
                                description: 'path is Optional: Used as the mounted
                                  root, rather than the full Ceph tree, default is
                                  /'
                                type: string
                              readOnly:
                                description: 'readOnly is Optional: Defaults to false
                                  (read/write). ReadOnly here will force the ReadOnly
                                  setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                                type: boolean
                              secretFile:
                                description: 'secretFile is Optional: SecretFile is
                                  the path to key ring for User, default is /etc/ceph/user.secret
                                  More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                                type: string
                              secretRef:
                                description: 'secretRef is Optional: SecretRef is
                                  reference to the authentication secret for User,
                                  default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              user:
                                description: 'user is optional: User is the rados
                                  user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                                type: string
                            required:
                            - monitors
                            type: object
                          cinder:
                            description: 'cinder represents a cinder volume attached
                              and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                            properties:
                              fsType:
                                description: 'fsType is the filesystem type to mount.
                                  Must be a filesystem type supported by the host
                                  operating system. Examples: "ext4", "xfs", "ntfs".
                                  Implicitly inferred to be "ext4" if unspecified.
                                  More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                                type: string
                              readOnly:
                                description: 'readOnly defaults to false (read/write).
                                  ReadOnly here will force the ReadOnly setting in
                                  VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                                type: boolean
                              secretRef:
                                description: 'secretRef is optional: points to a secret
                                  object containing parameters used to connect to
                                  OpenStack.'
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              volumeID:
                                description: 'volumeID used to identify the volume
                                  in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                                type: string
                            required:
                            - volumeID
                            type: object
                          configMap:
                            description: configMap represents a configMap that should
                              populate this volume
                            properties:
                              defaultMode:
                                description: 'defaultMode is optional: mode bits used
                                  to set permissions on created files by default.
                                  Must be an octal value between 0000 and 0777 or
                                  a decimal value between 0 and 511. YAML accepts
                                  both octal and decimal values, JSON requires decimal
                                  values for mode bits. Defaults to 0644. Directories
                                  within the path are not affected by this setting.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              items:
                                description: items if unspecified, each key-value
                                  pair in the Data field of the referenced ConfigMap
                                  will be projected into the volume as a file whose
                                  name is the key and content is the value. If specified,
                                  the listed keys will be projected into the specified
                                  paths, and unlisted keys will not be present. If
                                  a key is specified which is not present in the ConfigMap,
                                  the volume setup will error unless it is marked
                                  optional. Paths must be relative and may not contain
                                  the '..' path or start with '..'.
                                items:
                                  description: Maps a string key to a path within
                                    a volume.
                                  properties:
                                    key:
                                      description: key is the key to project.
                                      type: string
                                    mode:
                                      description: 'mode is Optional: mode bits used
                                        to set permissions on this file. Must be an
                                        octal value between 0000 and 0777 or a decimal
                                        value between 0 and 511. YAML accepts both
                                        octal and decimal values, JSON requires decimal
                                        values for mode bits. If not specified, the
                                        volume defaultMode will be used. This might
                                        be in conflict with other options that affect
                                        the file mode, like fsGroup, and the result
                                        can be other mode bits set.'
                                      format: int32
                                      type: integer
                                    path:
                                      description: path is the relative path of the
                                        file to map the key to. May not be an absolute
                                        path. May not contain the path element '..'.
                                        May not start with the string '..'.
                                      type: string
                                  required:
                                  - key
                                  - path
                                  type: object
                                type: array
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                  TODO: Add other useful fields. apiVersion, kind,
                                  uid?'
                                type: string
                              optional:
                                description: optional specify whether the ConfigMap
                                  or its keys must be defined
                                type: boolean
                            type: object
                            x-kubernetes-map-type: atomic
                          csi:
                            description: csi (Container Storage Interface) represents
                              ephemeral storage that is handled by certain external
                              CSI drivers (Beta feature).
                            properties:
                              driver:
                                description: driver is the name of the CSI driver
                                  that handles this volume. Consult with your admin
                                  for the correct name as registered in the cluster.
                                type: string
                              fsType:
                                description: fsType to mount. Ex. "ext4", "xfs", "ntfs".
                                  If not provided, the empty value is passed to the
                                  associated CSI driver which will determine the default
                                  filesystem to apply.
                                type: string
                              nodePublishSecretRef:
                                description: nodePublishSecretRef is a reference to
                                  the secret object containing sensitive information
                                  to pass to the CSI driver to complete the CSI NodePublishVolume
                                  and NodeUnpublishVolume calls. This field is optional,
                                  and  may be empty if no secret is required. If the
                                  secret object contains more than one secret, all
                                  secret references are passed.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              readOnly:
                                description: readOnly specifies a read-only configuration
                                  for the volume. Defaults to false (read/write).
                                type: boolean
                              volumeAttributes:
                                additionalProperties:
                                  type: string
                                description: volumeAttributes stores driver-specific
                                  properties that are passed to the CSI driver. Consult
                                  your driver's documentation for supported values.
                                type: object
                            required:
                            - driver
                            type: object
                          downwardAPI:
                            description: downwardAPI represents downward API about
                              the pod that should populate this volume
                            properties:
                              defaultMode:
                                description: 'Optional: mode bits to use on created
                                  files by default. Must be a Optional: mode bits
                                  used to set permissions on created files by default.
                                  Must be an octal value between 0000 and 0777 or
                                  a decimal value between 0 and 511. YAML accepts
                                  both octal and decimal values, JSON requires decimal
                                  values for mode bits. Defaults to 0644. Directories
                                  within the path are not affected by this setting.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              items:
                                description: Items is a list of downward API volume
                                  file
                                items:
                                  description: DownwardAPIVolumeFile represents information
                                    to create the file containing the pod field
                                  properties:
                                    fieldRef:
                                      description: 'Required: Selects a field of the
                                        pod: only annotations, labels, name and namespace
                                        are supported.'
                                      properties:
                                        apiVersion:
                                          description: Version of the schema the FieldPath
                                            is written in terms of, defaults to "v1".
                                          type: string
                                        fieldPath:
                                          description: Path of the field to select
                                            in the specified API version.
                                          type: string
                                      required:
                                      - fieldPath
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    mode:
                                      description: 'Optional: mode bits used to set
                                        permissions on this file, must be an octal
                                        value between 0000 and 0777 or a decimal value
                                        between 0 and 511. YAML accepts both octal
                                        and decimal values, JSON requires decimal
                                        values for mode bits. If not specified, the
                                        volume defaultMode will be used. This might
                                        be in conflict with other options that affect
                                        the file mode, like fsGroup, and the result
                                        can be other mode bits set.'
                                      format: int32
                                      type: integer
                                    path:
                                      description: 'Required: Path is  the relative
                                        path name of the file to be created. Must
                                        not be absolute or contain the ''..'' path.
                                        Must be utf-8 encoded. The first item of the
                                        relative path must not start with ''..'''
                                      type: string
                                    resourceFieldRef:
                                      description: 'Selects a resource of the container:
                                        only resources limits and requests (limits.cpu,
                                        limits.memory, requests.cpu and requests.memory)
                                        are currently supported.'
                                      properties:
                                        containerName:
                                          description: 'Container name: required for
                                            volumes, optional for env vars'
                                          type: string
                                        divisor:
                                          anyOf:
                                          - type: integer
                                          - type: string
                                          description: Specifies the output format
                                            of the exposed resources, defaults to
                                            "1"
                                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                          x-kubernetes-int-or-string: true
                                        resource:
                                          description: 'Required: resource to select'
                                          type: string
                                      required:
                                      - resource
                                      type: object
                                      x-kubernetes-map-type: atomic
                                  required:
                                  - path
                                  type: object
                                type: array
                            type: object
                          emptyDir:
                            description: 'emptyDir represents a temporary directory
                              that shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                            properties:
                              medium:
                                description: 'medium represents what type of storage
                                  medium should back this directory. The default is
                                  "" which means to use the node''s default medium.
                                  Must be an empty string (default) or Memory. More
                                  info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                                type: string
                              sizeLimit:
                                anyOf:
                                - type: integer
                                - type: string
                                description: 'sizeLimit is the total amount of local
                                  storage required for this EmptyDir volume. The size
                                  limit is also applicable for memory medium. The
                                  maximum usage on memory medium EmptyDir would be
                                  the minimum value between the SizeLimit specified
                                  here and the sum of memory limits of all containers
                                  in a pod. The default is nil which means that the
                                  limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                            type: object
                          ephemeral:
                            description: "ephemeral represents a volume that is handled
                              by a cluster storage driver. The volume's lifecycle
                              is tied to the pod that defines it - it will be created
                              before the pod starts, and deleted when the pod is removed.
                              \n Use this if: a) the volume is only needed while the
                              pod runs, b) features of normal volumes like restoring
                              from snapshot or capacity tracking are needed, c) the
                              storage driver is specified through a storage class,
                              and d) the storage driver supports dynamic volume provisioning
                              through a PersistentVolumeClaim (see EphemeralVolumeSource
                              for more information on the connection between this
                              volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim
                              or one of the vendor-specific APIs for volumes that
                              persist for longer than the lifecycle of an individual
                              pod. \n Use CSI for light-weight local ephemeral volumes
                              if the CSI driver is meant to be used that way - see
                              the documentation of the driver for more information.
                              \n A pod can use both types of ephemeral volumes and
                              persistent volumes at the same time."
                            properties:
                              volumeClaimTemplate:
                                description: "Will be used to create a stand-alone
                                  PVC to provision the volume. The pod in which this
                                  EphemeralVolumeSource is embedded will be the owner
                                  of the PVC, i.e. the PVC will be deleted together
                                  with the pod.  The name of the PVC will be `<pod
                                  name>-<volume name>` where `<volume name>` is the
                                  name from the `PodSpec.Volumes` array entry. Pod
                                  validation will reject the pod if the concatenated
                                  name is not valid for a PVC (for example, too long).
                                  \n An existing PVC with that name that is not owned
                                  by the pod will *not* be used for the pod to avoid
                                  using an unrelated volume by mistake. Starting the
                                  pod is then blocked until the unrelated PVC is removed.
                                  If such a pre-created PVC is meant to be used by
                                  the pod, the PVC has to updated with an owner reference
                                  to the pod once the pod exists. Normally this should
                                  not be necessary, but it may be useful when manually
                                  reconstructing a broken cluster. \n This field is
                                  read-only and no changes will be made by Kubernetes
                                  to the PVC after it has been created. \n Required,
                                  must not be nil."
                                properties:
                                  metadata:
                                    description: May contain labels and annotations
                                      that will be copied into the PVC when creating
                                      it. No other fields are allowed and will be
                                      rejected during validation.
                                    properties:
                                      annotations:
                                        additionalProperties:
                                          type: string
                                        type: object
                                      finalizers:
                                        items:
                                          type: string
                                        type: array
                                      labels:
                                        additionalProperties:
                                          type: string
                                        type: object
                                      name:
                                        type: string
                                      namespace:
                                        type: string
                                    type: object
                                  spec:
                                    description: The specification for the PersistentVolumeClaim.
                                      The entire content is copied unchanged into
                                      the PVC that gets created from this template.
                                      The same fields as in a PersistentVolumeClaim
                                      are also valid here.
                                    properties:
                                      accessModes:
                                        description: 'accessModes contains the desired
                                          access modes the volume should have. More
                                          info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                        items:
                                          type: string
                                        type: array
                                      dataSource:
                                        description: 'dataSource field can be used
                                          to specify either: * An existing VolumeSnapshot
                                          object (snapshot.storage.k8s.io/VolumeSnapshot)
                                          * An existing PVC (PersistentVolumeClaim)
                                          If the provisioner or an external controller
                                          can support the specified data source, it
                                          will create a new volume based on the contents
                                          of the specified data source. When the AnyVolumeDataSource
                                          feature gate is enabled, dataSource contents
                                          will be copied to dataSourceRef, and dataSourceRef
                                          contents will be copied to dataSource when
                                          dataSourceRef.namespace is not specified.
                                          If the namespace is specified, then dataSourceRef
                                          will not be copied to dataSource.'
                                        properties:
                                          apiGroup:
                                            description: APIGroup is the group for
                                              the resource being referenced. If APIGroup
                                              is not specified, the specified Kind
                                              must be in the core API group. For any
                                              other third-party types, APIGroup is
                                              required.
                                            type: string
                                          kind:
                                            description: Kind is the type of resource
                                              being referenced
                                            type: string
                                          name:
                                            description: Name is the name of resource
                                              being referenced
                                            type: string
                                        required:
                                        - kind
                                        - name
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      dataSourceRef:
                                        description: 'dataSourceRef specifies the
                                          object from which to populate the volume
                                          with data, if a non-empty volume is desired.
                                          This may be any object from a non-empty
                                          API group (non core object) or a PersistentVolumeClaim
                                          object. When this field is specified, volume
                                          binding will only succeed if the type of
                                          the specified object matches some installed
                                          volume populator or dynamic provisioner.
                                          This field will replace the functionality
                                          of the dataSource field and as such if both
                                          fields are non-empty, they must have the
                                          same value. For backwards compatibility,
                                          when namespace isn''t specified in dataSourceRef,
                                          both fields (dataSource and dataSourceRef)
                                          will be set to the same value automatically
                                          if one of them is empty and the other is
                                          non-empty. When namespace is specified in
                                          dataSourceRef, dataSource isn''t set to
                                          the same value and must be empty. There
                                          are three important differences between
                                          dataSource and dataSourceRef: * While dataSource
                                          only allows two specific types of objects,
                                          dataSourceRef allows any non-core object,
                                          as well as PersistentVolumeClaim objects.
                                          * While dataSource ignores disallowed values
                                          (dropping them), dataSourceRef preserves
                                          all values, and generates an error if a
                                          disallowed value is specified. * While dataSource
                                          only allows local objects, dataSourceRef
                                          allows objects in any namespaces. (Beta)
                                          Using this field requires the AnyVolumeDataSource
                                          feature gate to be enabled. (Alpha) Using
                                          the namespace field of dataSourceRef requires
                                          the CrossNamespaceVolumeDataSource feature
                                          gate to be enabled.'
                                        properties:
                                          apiGroup:
                                            description: APIGroup is the group for
                                              the resource being referenced. If APIGroup
                                              is not specified, the specified Kind
                                              must be in the core API group. For any
                                              other third-party types, APIGroup is
                                              required.
                                            type: string
                                          kind:
                                            description: Kind is the type of resource
                                              being referenced
                                            type: string
                                          name:
                                            description: Name is the name of resource
                                              being referenced
                                            type: string
                                          namespace:
                                            description: Namespace is the namespace
                                              of resource being referenced Note that
                                              when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant
                                              object is required in the referent namespace
                                              to allow that namespace's owner to accept
                                              the reference. See the ReferenceGrant
                                              documentation for details. (Alpha) This
                                              field requires the CrossNamespaceVolumeDataSource
                                              feature gate to be enabled.
                                            type: string
                                        required:
                                        - kind
                                        - name
                                        type: object
                                      resources:
                                        description: 'resources represents the minimum
                                          resources the volume should have. If RecoverVolumeExpansionFailure
                                          feature is enabled users are allowed to
                                          specify resource requirements that are lower
                                          than previous value but must still be higher
                                          than capacity recorded in the status field
                                          of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                        properties:
                                          claims:
                                            description: "Claims lists the names of
                                              resources, defined in spec.resourceClaims,
                                              that are used by this container. \n
                                              This is an alpha field and requires
                                              enabling the DynamicResourceAllocation
                                              feature gate. \n This field is immutable.
                                              It can only be set for containers."
                                            items:
                                              description: ResourceClaim references
                                                one entry in PodSpec.ResourceClaims.
                                              properties:
                                                name:
                                                  description: Name must match the
                                                    name of one entry in pod.spec.resourceClaims
                                                    of the Pod where this field is
                                                    used. It makes that resource available
                                                    inside a container.
                                                  type: string
                                              required:
                                              - name
                                              type: object
                                            type: array
                                            x-kubernetes-list-map-keys:
                                            - name
                                            x-kubernetes-list-type: map
                                          limits:
                                            additionalProperties:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            description: 'Limits describes the maximum
                                              amount of compute resources allowed.
                                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                            type: object
                                          requests:
                                            additionalProperties:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            description: 'Requests describes the minimum
                                              amount of compute resources required.
                                              If Requests is omitted for a container,
                                              it defaults to Limits if that is explicitly
                                              specified, otherwise to an implementation-defined
                                              value. Requests cannot exceed Limits.
                                              More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                            type: object
                                        type: object
                                      selector:
                                        description: selector is a label query over
                                          volumes to consider for binding.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      storageClassName:
                                        description: 'storageClassName is the name
                                          of the StorageClass required by the claim.
                                          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                        type: string
                                      volumeMode:
                                        description: volumeMode defines what type
                                          of volume is required by the claim. Value
                                          of Filesystem is implied when not included
                                          in claim spec.
                                        type: string
                                      volumeName:
                                        description: volumeName is the binding reference
                                          to the PersistentVolume backing this claim.
                                        type: string
                                    type: object
                                required:
                                - spec
                                type: object
                            type: object
                          fc:
                            description: fc represents a Fibre Channel resource that
                              is attached to a kubelet's host machine and then exposed
                              to the pod.
                            properties:
                              fsType:
                                description: 'fsType is the filesystem type to mount.
                                  Must be a filesystem type supported by the host
                                  operating system. Ex. "ext4", "xfs", "ntfs". Implicitly
                                  inferred to be "ext4" if unspecified. TODO: how
                                  do we prevent errors in the filesystem from compromising
                                  the machine'
                                type: string
                              lun:
                                description: 'lun is Optional: FC target lun number'
                                format: int32
                                type: integer
                              readOnly:
                                description: 'readOnly is Optional: Defaults to false
                                  (read/write). ReadOnly here will force the ReadOnly
                                  setting in VolumeMounts.'
                                type: boolean
                              targetWWNs:
                                description: 'targetWWNs is Optional: FC target worldwide
                                  names (WWNs)'
                                items:
                                  type: string
                                type: array
                              wwids:
                                description: 'wwids Optional: FC volume world wide
                                  identifiers (wwids) Either wwids or combination
                                  of targetWWNs and lun must be set, but not both
                                  simultaneously.'
                                items:
                                  type: string
                                type: array
                            type: object
                          flexVolume:
                            description: flexVolume represents a generic volume resource
                              that is provisioned/attached using an exec based plugin.
                            properties:
                              driver:
                                description: driver is the name of the driver to use
                                  for this volume.
                                type: string
                              fsType:
                                description: fsType is the filesystem type to mount.
                                  Must be a filesystem type supported by the host
                                  operating system. Ex. "ext4", "xfs", "ntfs". The
                                  default filesystem depends on FlexVolume script.
                                type: string
                              options:
                                additionalProperties:
                                  type: string
                                description: 'options is Optional: this field holds
                                  extra command options if any.'
                                type: object
                              readOnly:
                                description: 'readOnly is Optional: defaults to false
                                  (read/write). ReadOnly here will force the ReadOnly
                                  setting in VolumeMounts.'
                                type: boolean
                              secretRef:
                                description: 'secretRef is Optional: secretRef is
                                  reference to the secret object containing sensitive
                                  information to pass to the plugin scripts. This
                                  may be empty if no secret object is specified. If
                                  the secret object contains more than one secret,
                                  all secrets are passed to the plugin scripts.'
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                            required:
                            - driver
                            type: object
                          flocker:
                            description: flocker represents a Flocker volume attached
                              to a kubelet's host machine. This depends on the Flocker
                              control service being running
                            properties:
                              datasetName:
                                description: datasetName is Name of the dataset stored
                                  as metadata -> name on the dataset for Flocker should
                                  be considered as deprecated
                                type: string
                              datasetUUID:
                                description: datasetUUID is the UUID of the dataset.
                                  This is unique identifier of a Flocker dataset
                                type: string
                            type: object
                          gcePersistentDisk:
                            description: 'gcePersistentDisk represents a GCE Disk
                              resource that is attached to a kubelet''s host machine
                              and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                            properties:
                              fsType:
                                description: 'fsType is filesystem type of the volume
                                  that you want to mount. Tip: Ensure that the filesystem
                                  type is supported by the host operating system.
                                  Examples: "ext4", "xfs", "ntfs". Implicitly inferred
                                  to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                                  TODO: how do we prevent errors in the filesystem
                                  from compromising the machine'
                                type: string
                              partition:
                                description: 'partition is the partition in the volume
                                  that you want to mount. If omitted, the default
                                  is to mount by volume name. Examples: For volume
                                  /dev/sda1, you specify the partition as "1". Similarly,
                                  the volume partition for /dev/sda is "0" (or you
                                  can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                                format: int32
                                type: integer
                              pdName:
                                description: 'pdName is unique name of the PD resource
                                  in GCE. Used to identify the disk in GCE. More info:
                                  https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                                type: string
                              readOnly:
                                description: 'readOnly here will force the ReadOnly
                                  setting in VolumeMounts. Defaults to false. More
                                  info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                                type: boolean
                            required:
                            - pdName
                            type: object
                          gitRepo:
                            description: 'gitRepo represents a git repository at a
                              particular revision. DEPRECATED: GitRepo is deprecated.
                              To provision a container with a git repo, mount an EmptyDir
                              into an InitContainer that clones the repo using git,
                              then mount the EmptyDir into the Pod''s container.'
                            properties:
                              directory:
                                description: directory is the target directory name.
                                  Must not contain or start with '..'.  If '.' is
                                  supplied, the volume directory will be the git repository.  Otherwise,
                                  if specified, the volume will contain the git repository
                                  in the subdirectory with the given name.
                                type: string
                              repository:
                                description: repository is the URL
                                type: string
                              revision:
                                description: revision is the commit hash for the specified
                                  revision.
                                type: string
                            required:
                            - repository
                            type: object
                          glusterfs:
                            description: 'glusterfs represents a Glusterfs mount on
                              the host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
                            properties:
                              endpoints:
                                description: 'endpoints is the endpoint name that
                                  details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                                type: string
                              path:
                                description: 'path is the Glusterfs volume path. More
                                  info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                                type: string
                              readOnly:
                                description: 'readOnly here will force the Glusterfs
                                  volume to be mounted with read-only permissions.
                                  Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                                type: boolean
                            required:
                            - endpoints
                            - path
                            type: object
                          hostPath:
                            description: 'hostPath represents a pre-existing file
                              or directory on the host machine that is directly exposed
                              to the container. This is generally used for system
                              agents or other privileged things that are allowed to
                              see the host machine. Most containers will NOT need
                              this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                              --- TODO(jonesdl) We need to restrict who can use host
                              directory mounts and who can/can not mount host directories
                              as read/write.'
                            properties:
                              path:
                                description: 'path of the directory on the host. If
                                  the path is a symlink, it will follow the link to
                                  the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                                type: string
                              type:
                                description: 'type for HostPath Volume Defaults to
                                  "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                                type: string
                            required:
                            - path
                            type: object
                          iscsi:
                            description: 'iscsi represents an ISCSI Disk resource
                              that is attached to a kubelet''s host machine and then
                              exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
                            properties:
                              chapAuthDiscovery:
                                description: chapAuthDiscovery defines whether support
                                  iSCSI Discovery CHAP authentication
                                type: boolean
                              chapAuthSession:
                                description: chapAuthSession defines whether support
                                  iSCSI Session CHAP authentication
                                type: boolean
                              fsType:
                                description: 'fsType is the filesystem type of the
                                  volume that you want to mount. Tip: Ensure that
                                  the filesystem type is supported by the host operating
                                  system. Examples: "ext4", "xfs", "ntfs". Implicitly
                                  inferred to be "ext4" if unspecified. More info:
                                  https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                                  TODO: how do we prevent errors in the filesystem
                                  from compromising the machine'
                                type: string
                              initiatorName:
                                description: initiatorName is the custom iSCSI Initiator
                                  Name. If initiatorName is specified with iscsiInterface
                                  simultaneously, new iSCSI interface <target portal>:<volume
                                  name> will be created for the connection.
                                type: string
                              iqn:
                                description: iqn is the target iSCSI Qualified Name.
                                type: string
                              iscsiInterface:
                                description: iscsiInterface is the interface Name
                                  that uses an iSCSI transport. Defaults to 'default'
                                  (tcp).
                                type: string
                              lun:
                                description: lun represents iSCSI Target Lun number.
                                format: int32
                                type: integer
                              portals:
                                description: portals is the iSCSI Target Portal List.
                                  The portal is either an IP or ip_addr:port if the
                                  port is other than default (typically TCP ports
                                  860 and 3260).
                                items:
                                  type: string
                                type: array
                              readOnly:
                                description: readOnly here will force the ReadOnly
                                  setting in VolumeMounts. Defaults to false.
                                type: boolean
                              secretRef:
                                description: secretRef is the CHAP Secret for iSCSI
                                  target and initiator authentication
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              targetPortal:
                                description: targetPortal is iSCSI Target Portal.
                                  The Portal is either an IP or ip_addr:port if the
                                  port is other than default (typically TCP ports
                                  860 and 3260).
                                type: string
                            required:
                            - iqn
                            - lun
                            - targetPortal
                            type: object
                          name:
                            description: 'name of the volume. Must be a DNS_LABEL
                              and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          nfs:
                            description: 'nfs represents an NFS mount on the host
                              that shares a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                            properties:
                              path:
                                description: 'path that is exported by the NFS server.
                                  More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                                type: string
                              readOnly:
                                description: 'readOnly here will force the NFS export
                                  to be mounted with read-only permissions. Defaults
                                  to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                                type: boolean
                              server:
                                description: 'server is the hostname or IP address
                                  of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                                type: string
                            required:
                            - path
                            - server
                            type: object
                          persistentVolumeClaim:
                            description: 'persistentVolumeClaimVolumeSource represents
                              a reference to a PersistentVolumeClaim in the same namespace.
                              More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                            properties:
                              claimName:
                                description: 'claimName is the name of a PersistentVolumeClaim
                                  in the same namespace as the pod using this volume.
                                  More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                                type: string
                              readOnly:
                                description: readOnly Will force the ReadOnly setting
                                  in VolumeMounts. Default false.
                                type: boolean
                            required:
                            - claimName
                            type: object
                          photonPersistentDisk:
                            description: photonPersistentDisk represents a PhotonController
                              persistent disk attached and mounted on kubelets host
                              machine
                            properties:
                              fsType:
                                description: fsType is the filesystem type to mount.
                                  Must be a filesystem type supported by the host
                                  operating system. Ex. "ext4", "xfs", "ntfs". Implicitly
                                  inferred to be "ext4" if unspecified.
                                type: string
                              pdID:
                                description: pdID is the ID that identifies Photon
                                  Controller persistent disk
                                type: string
                            required:
                            - pdID
                            type: object
                          portworxVolume:
                            description: portworxVolume represents a portworx volume
                              attached and mounted on kubelets host machine
                            properties:
                              fsType:
                                description: fSType represents the filesystem type
                                  to mount Must be a filesystem type supported by
                                  the host operating system. Ex. "ext4", "xfs". Implicitly
                                  inferred to be "ext4" if unspecified.
                                type: string
                              readOnly:
                                description: readOnly defaults to false (read/write).
                                  ReadOnly here will force the ReadOnly setting in
                                  VolumeMounts.
                                type: boolean
                              volumeID:
                                description: volumeID uniquely identifies a Portworx
                                  volume
                                type: string
                            required:
                            - volumeID
                            type: object
                          projected:
                            description: projected items for all in one resources
                              secrets, configmaps, and downward API
                            properties:
                              defaultMode:
                                description: defaultMode are the mode bits used to
                                  set permissions on created files by default. Must
                                  be an octal value between 0000 and 0777 or a decimal
                                  value between 0 and 511. YAML accepts both octal
                                  and decimal values, JSON requires decimal values
                                  for mode bits. Directories within the path are not
                                  affected by this setting. This might be in conflict
                                  with other options that affect the file mode, like
                                  fsGroup, and the result can be other mode bits set.
                                format: int32
                                type: integer
                              sources:
                                description: sources is the list of volume projections
                                items:
                                  description: Projection that may be projected along
                                    with other supported volume types
                                  properties:
                                    configMap:
                                      description: configMap information about the
                                        configMap data to project
                                      properties:
                                        items:
                                          description: items if unspecified, each
                                            key-value pair in the Data field of the
                                            referenced ConfigMap will be projected
                                            into the volume as a file whose name is
                                            the key and content is the value. If specified,
                                            the listed keys will be projected into
                                            the specified paths, and unlisted keys
                                            will not be present. If a key is specified
                                            which is not present in the ConfigMap,
                                            the volume setup will error unless it
                                            is marked optional. Paths must be relative
                                            and may not contain the '..' path or start
                                            with '..'.
                                          items:
                                            description: Maps a string key to a path
                                              within a volume.
                                            properties:
                                              key:
                                                description: key is the key to project.
                                                type: string
                                              mode:
                                                description: 'mode is Optional: mode
                                                  bits used to set permissions on
                                                  this file. Must be an octal value
                                                  between 0000 and 0777 or a decimal
                                                  value between 0 and 511. YAML accepts
                                                  both octal and decimal values, JSON
                                                  requires decimal values for mode
                                                  bits. If not specified, the volume
                                                  defaultMode will be used. This might
                                                  be in conflict with other options
                                                  that affect the file mode, like
                                                  fsGroup, and the result can be other
                                                  mode bits set.'
                                                format: int32
                                                type: integer
                                              path:
                                                description: path is the relative
                                                  path of the file to map the key
                                                  to. May not be an absolute path.
                                                  May not contain the path element
                                                  '..'. May not start with the string
                                                  '..'.
                                                type: string
                                            required:
                                            - key
                                            - path
                                            type: object
                                          type: array
                                        name:
                                          description: 'Name of the referent. More
                                            info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                            TODO: Add other useful fields. apiVersion,
                                            kind, uid?'
                                          type: string
                                        optional:
                                          description: optional specify whether the
                                            ConfigMap or its keys must be defined
                                          type: boolean
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    downwardAPI:
                                      description: downwardAPI information about the
                                        downwardAPI data to project
                                      properties:
                                        items:
                                          description: Items is a list of DownwardAPIVolume
                                            file
                                          items:
                                            description: DownwardAPIVolumeFile represents
                                              information to create the file containing
                                              the pod field
                                            properties:
                                              fieldRef:
                                                description: 'Required: Selects a
                                                  field of the pod: only annotations,
                                                  labels, name and namespace are supported.'
                                                properties:
                                                  apiVersion:
                                                    description: Version of the schema
                                                      the FieldPath is written in
                                                      terms of, defaults to "v1".
                                                    type: string
                                                  fieldPath:
                                                    description: Path of the field
                                                      to select in the specified API
                                                      version.
                                                    type: string
                                                required:
                                                - fieldPath
                                                type: object
                                                x-kubernetes-map-type: atomic
                                              mode:
                                                description: 'Optional: mode bits
                                                  used to set permissions on this
                                                  file, must be an octal value between
                                                  0000 and 0777 or a decimal value
                                                  between 0 and 511. YAML accepts
                                                  both octal and decimal values, JSON
                                                  requires decimal values for mode
                                                  bits. If not specified, the volume
                                                  defaultMode will be used. This might
                                                  be in conflict with other options
                                                  that affect the file mode, like
                                                  fsGroup, and the result can be other
                                                  mode bits set.'
                                                format: int32
                                                type: integer
                                              path:
                                                description: 'Required: Path is  the
                                                  relative path name of the file to
                                                  be created. Must not be absolute
                                                  or contain the ''..'' path. Must
                                                  be utf-8 encoded. The first item
                                                  of the relative path must not start
                                                  with ''..'''
                                                type: string
                                              resourceFieldRef:
                                                description: 'Selects a resource of
                                                  the container: only resources limits
                                                  and requests (limits.cpu, limits.memory,
                                                  requests.cpu and requests.memory)
                                                  are currently supported.'
                                                properties:
                                                  containerName:
                                                    description: 'Container name:
                                                      required for volumes, optional
                                                      for env vars'
                                                    type: string
                                                  divisor:
                                                    anyOf:
                                                    - type: integer
                                                    - type: string
                                                    description: Specifies the output
                                                      format of the exposed resources,
                                                      defaults to "1"
                                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                    x-kubernetes-int-or-string: true
                                                  resource:
                                                    description: 'Required: resource
                                                      to select'
                                                    type: string
                                                required:
                                                - resource
                                                type: object
                                                x-kubernetes-map-type: atomic
                                            required:
                                            - path
                                            type: object
                                          type: array
                                      type: object
                                    secret:
                                      description: secret information about the secret
                                        data to project
                                      properties:
                                        items:
                                          description: items if unspecified, each
                                            key-value pair in the Data field of the
                                            referenced Secret will be projected into
                                            the volume as a file whose name is the
                                            key and content is the value. If specified,
                                            the listed keys will be projected into
                                            the specified paths, and unlisted keys
                                            will not be present. If a key is specified
                                            which is not present in the Secret, the
                                            volume setup will error unless it is marked
                                            optional. Paths must be relative and may
                                            not contain the '..' path or start with
                                            '..'.
                                          items:
                                            description: Maps a string key to a path
                                              within a volume.
                                            properties:
                                              key:
                                                description: key is the key to project.
                                                type: string
                                              mode:
                                                description: 'mode is Optional: mode
                                                  bits used to set permissions on
                                                  this file. Must be an octal value
                                                  between 0000 and 0777 or a decimal
                                                  value between 0 and 511. YAML accepts
                                                  both octal and decimal values, JSON
                                                  requires decimal values for mode
                                                  bits. If not specified, the volume
                                                  defaultMode will be used. This might
                                                  be in conflict with other options
                                                  that affect the file mode, like
                                                  fsGroup, and the result can be other
                                                  mode bits set.'
                                                format: int32
                                                type: integer
                                              path:
                                                description: path is the relative
                                                  path of the file to map the key
                                                  to. May not be an absolute path.
                                                  May not contain the path element
                                                  '..'. May not start with the string
                                                  '..'.
                                                type: string
                                            required:
                                            - key
                                            - path
                                            type: object
                                          type: array
                                        name:
                                          description: 'Name of the referent. More
                                            info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                            TODO: Add other useful fields. apiVersion,
                                            kind, uid?'
                                          type: string
                                        optional:
                                          description: optional field specify whether
                                            the Secret or its key must be defined
                                          type: boolean
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    serviceAccountToken:
                                      description: serviceAccountToken is information
                                        about the serviceAccountToken data to project
                                      properties:
                                        audience:
                                          description: audience is the intended audience
                                            of the token. A recipient of a token must
                                            identify itself with an identifier specified
                                            in the audience of the token, and otherwise
                                            should reject the token. The audience
                                            defaults to the identifier of the apiserver.
                                          type: string
                                        expirationSeconds:
                                          description: expirationSeconds is the requested
                                            duration of validity of the service account
                                            token. As the token approaches expiration,
                                            the kubelet volume plugin will proactively
                                            rotate the service account token. The
                                            kubelet will start trying to rotate the
                                            token if the token is older than 80 percent
                                            of its time to live or if the token is
                                            older than 24 hours.Defaults to 1 hour
                                            and must be at least 10 minutes.
                                          format: int64
                                          type: integer
                                        path:
                                          description: path is the path relative to
                                            the mount point of the file to project
                                            the token into.
                                          type: string
                                      required:
                                      - path
                                      type: object
                                  type: object
                                type: array
                            type: object
                          quobyte:
                            description: quobyte represents a Quobyte mount on the
                              host that shares a pod's lifetime
                            properties:
                              group:
                                description: group to map volume access to Default
                                  is no group
                                type: string
                              readOnly:
                                description: readOnly here will force the Quobyte
                                  volume to be mounted with read-only permissions.
                                  Defaults to false.
                                type: boolean
                              registry:
                                description: registry represents a single or multiple
                                  Quobyte Registry services specified as a string
                                  as host:port pair (multiple entries are separated
                                  with commas) which acts as the central registry
                                  for volumes
                                type: string
                              tenant:
                                description: tenant owning the given Quobyte volume
                                  in the Backend Used with dynamically provisioned
                                  Quobyte volumes, value is set by the plugin
                                type: string
                              user:
                                description: user to map volume access to Defaults
                                  to serivceaccount user
                                type: string
                              volume:
                                description: volume is a string that references an
                                  already created Quobyte volume by name.
                                type: string
                            required:
                            - registry
                            - volume
                            type: object
                          rbd:
                            description: 'rbd represents a Rados Block Device mount
                              on the host that shares a pod''s lifetime. More info:
                              https://examples.k8s.io/volumes/rbd/README.md'
                            properties:
                              fsType:
                                description: 'fsType is the filesystem type of the
                                  volume that you want to mount. Tip: Ensure that
                                  the filesystem type is supported by the host operating
                                  system. Examples: "ext4", "xfs", "ntfs". Implicitly
                                  inferred to be "ext4" if unspecified. More info:
                                  https://kubernetes.io/docs/concepts/storage/volumes#rbd
                                  TODO: how do we prevent errors in the filesystem
                                  from compromising the machine'
                                type: string
                              image:
                                description: 'image is the rados image name. More
                                  info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                type: string
                              keyring:
                                description: 'keyring is the path to key ring for
                                  RBDUser. Default is /etc/ceph/keyring. More info:
                                  https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                type: string
                              monitors:
                                description: 'monitors is a collection of Ceph monitors.
                                  More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                items:
                                  type: string
                                type: array
                              pool:
                                description: 'pool is the rados pool name. Default
                                  is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                type: string
                              readOnly:
                                description: 'readOnly here will force the ReadOnly
                                  setting in VolumeMounts. Defaults to false. More
                                  info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                type: boolean
                              secretRef:
                                description: 'secretRef is name of the authentication
                                  secret for RBDUser. If provided overrides keyring.
                                  Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              user:
                                description: 'user is the rados user name. Default
                                  is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                                type: string
                            required:
                            - image
                            - monitors
                            type: object
                          scaleIO:
                            description: scaleIO represents a ScaleIO persistent volume
                              attached and mounted on Kubernetes nodes.
                            properties:
                              fsType:
                                description: fsType is the filesystem type to mount.
                                  Must be a filesystem type supported by the host
                                  operating system. Ex. "ext4", "xfs", "ntfs". Default
                                  is "xfs".
                                type: string
                              gateway:
                                description: gateway is the host address of the ScaleIO
                                  API Gateway.
                                type: string
                              protectionDomain:
                                description: protectionDomain is the name of the ScaleIO
                                  Protection Domain for the configured storage.
                                type: string
                              readOnly:
                                description: readOnly Defaults to false (read/write).
                                  ReadOnly here will force the ReadOnly setting in
                                  VolumeMounts.
                                type: boolean
                              secretRef:
                                description: secretRef references to the secret for
                                  ScaleIO user and other sensitive information. If
                                  this is not provided, Login operation will fail.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              sslEnabled:
                                description: sslEnabled Flag enable/disable SSL communication
                                  with Gateway, default false
                                type: boolean
                              storageMode:
                                description: storageMode indicates whether the storage
                                  for a volume should be ThickProvisioned or ThinProvisioned.
                                  Default is ThinProvisioned.
                                type: string
                              storagePool:
                                description: storagePool is the ScaleIO Storage Pool
                                  associated with the protection domain.
                                type: string
                              system:
                                description: system is the name of the storage system
                                  as configured in ScaleIO.
                                type: string
                              volumeName:
                                description: volumeName is the name of a volume already
                                  created in the ScaleIO system that is associated
                                  with this volume source.
                                type: string
                            required:
                            - gateway
                            - secretRef
                            - system
                            type: object
                          secret:
                            description: 'secret represents a secret that should populate
                              this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                            properties:
                              defaultMode:
                                description: 'defaultMode is Optional: mode bits used
                                  to set permissions on created files by default.
                                  Must be an octal value between 0000 and 0777 or
                                  a decimal value between 0 and 511. YAML accepts
                                  both octal and decimal values, JSON requires decimal
                                  values for mode bits. Defaults to 0644. Directories
                                  within the path are not affected by this setting.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              items:
                                description: items If unspecified, each key-value
                                  pair in the Data field of the referenced Secret
                                  will be projected into the volume as a file whose
                                  name is the key and content is the value. If specified,
                                  the listed keys will be projected into the specified
                                  paths, and unlisted keys will not be present. If
                                  a key is specified which is not present in the Secret,
                                  the volume setup will error unless it is marked
                                  optional. Paths must be relative and may not contain
                                  the '..' path or start with '..'.
                                items:
                                  description: Maps a string key to a path within
                                    a volume.
                                  properties:
                                    key:
                                      description: key is the key to project.
                                      type: string
                                    mode:
                                      description: 'mode is Optional: mode bits used
                                        to set permissions on this file. Must be an
                                        octal value between 0000 and 0777 or a decimal
                                        value between 0 and 511. YAML accepts both
                                        octal and decimal values, JSON requires decimal
                                        values for mode bits. If not specified, the
                                        volume defaultMode will be used. This might
                                        be in conflict with other options that affect
                                        the file mode, like fsGroup, and the result
                                        can be other mode bits set.'
                                      format: int32
                                      type: integer
                                    path:
                                      description: path is the relative path of the
                                        file to map the key to. May not be an absolute
                                        path. May not contain the path element '..'.
                                        May not start with the string '..'.
                                      type: string
                                  required:
                                  - key
                                  - path
                                  type: object
                                type: array
                              optional:
                                description: optional field specify whether the Secret
                                  or its keys must be defined
                                type: boolean
                              secretName:
                                description: 'secretName is the name of the secret
                                  in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                                type: string
                            type: object
                          storageos:
                            description: storageOS represents a StorageOS volume attached
                              and mounted on Kubernetes nodes.
                            properties:
                              fsType:
                                description: fsType is the filesystem type to mount.
                                  Must be a filesystem type supported by the host
                                  operating system. Ex. "ext4", "xfs", "ntfs". Implicitly
                                  inferred to be "ext4" if unspecified.
                                type: string
                              readOnly:
                                description: readOnly defaults to false (read/write).
                                  ReadOnly here will force the ReadOnly setting in
                                  VolumeMounts.
                                type: boolean
                              secretRef:
                                description: secretRef specifies the secret to use
                                  for obtaining the StorageOS API credentials.  If
                                  not specified, default values will be attempted.
                                properties:
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                type: object
                                x-kubernetes-map-type: atomic
                              volumeName:
                                description: volumeName is the human-readable name
                                  of the StorageOS volume.  Volume names are only
                                  unique within a namespace.
                                type: string
                              volumeNamespace:
                                description: volumeNamespace specifies the scope of
                                  the volume within StorageOS.  If no namespace is
                                  specified then the Pod's namespace will be used.  This
                                  allows the Kubernetes name scoping to be mirrored
                                  within StorageOS for tighter integration. Set VolumeName
                                  to any name to override the default behaviour. Set
                                  to "default" if you are not using namespaces within
                                  StorageOS. Namespaces that do not pre-exist within
                                  StorageOS will be created.
                                type: string
                            type: object
                          vsphereVolume:
                            description: vsphereVolume represents a vSphere volume
                              attached and mounted on kubelets host machine
                            properties:
                              fsType:
                                description: fsType is filesystem type to mount. Must
                                  be a filesystem type supported by the host operating
                                  system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
                                  to be "ext4" if unspecified.
                                type: string
                              storagePolicyID:
                                description: storagePolicyID is the storage Policy
                                  Based Management (SPBM) profile ID associated with
                                  the StoragePolicyName.
                                type: string
                              storagePolicyName:
                                description: storagePolicyName is the storage Policy
                                  Based Management (SPBM) profile name.
                                type: string
                              volumePath:
                                description: volumePath is the path that identifies
                                  vSphere volume vmdk
                                type: string
                            required:
                            - volumePath
                            type: object
                        required:
                        - name
                        type: object
                      type: array
                  required:
                  - name
                  type: object
                type: array
              labels:
                additionalProperties:
                  type: string
                description: Specifies Labels to override or add for underlying Pods.
                type: object
              offlineInstances:
                description: "Specifies the names of instances to be transitioned
                  to offline status. \n Marking an instance as offline results in
                  the following: \n 1. The associated Pod is stopped, and its PersistentVolumeClaim
                  (PVC) is retained for potential future reuse or data recovery, but
                  it is no longer actively used. 2. The ordinal number assigned to
                  this instance is preserved, ensuring it remains unique and avoiding
                  conflicts with new instances. \n Setting instances to offline allows
                  for a controlled scale-in process, preserving their data and maintaining
                  ordinal consistency within the Cluster. Note that offline instances
                  and their associated resources, such as PVCs, are not automatically
                  deleted. The administrator must manually manage the cleanup and
                  removal of these resources when they are no longer needed."
                items:
                  type: string
                type: array
              replicas:
                default: 1
                description: Specifies the desired number of replicas in the Component
                  for enhancing availability and durability, or load balancing.
                format: int32
                minimum: 0
                type: integer
              resources:
                description: Specifies the resources required by the Component. It
                  allows defining the CPU, memory requirements and limits for the
                  Component's containers.
                properties:
                  claims:
                    description: "Claims lists the names of resources, defined in
                      spec.resourceClaims, that are used by this container. \n This
                      is an alpha field and requires enabling the DynamicResourceAllocation
                      feature gate. \n This field is immutable. It can only be set
                      for containers."
                    items:
                      description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                      properties:
                        name:
                          description: Name must match the name of one entry in pod.spec.resourceClaims
                            of the Pod where this field is used. It makes that resource
                            available inside a container.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - name
                    x-kubernetes-list-type: map
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources
                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute
                      resources required. If Requests is omitted for a container,
                      it defaults to Limits if that is explicitly specified, otherwise
                      to an implementation-defined value. Requests cannot exceed Limits.
                      More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
                x-kubernetes-preserve-unknown-fields: true
              runtimeClassName:
                description: Defines runtimeClassName for all Pods managed by this
                  Component.
                type: string
              serviceAccountName:
                description: "Specifies the name of the ServiceAccount required by
                  the running Component. This ServiceAccount is used to grant necessary
                  permissions for the Component's Pods to interact with other Kubernetes
                  resources, such as modifying Pod labels or sending events. \n Defaults:
                  If not specified, KubeBlocks automatically assigns a default ServiceAccount
                  named \"kb-{cluster.name}\", bound to a default role defined during
                  KubeBlocks installation. \n Future Changes: Future versions might
                  change the default ServiceAccount creation strategy to one per Component,
                  potentially revising the naming to \"kb-{cluster.name}-{component.name}\".
                  \n Users can override the automatic ServiceAccount assignment by
                  explicitly setting the name of an existed ServiceAccount in this
                  field."
                type: string
              serviceRefs:
                description: "Defines a list of ServiceRef for a Component, enabling
                  access to both external services and Services provided by other
                  Clusters. \n Types of services: \n - External services: Not managed
                  by KubeBlocks or managed by a different KubeBlocks operator; Require
                  a ServiceDescriptor for connection details. - Services provided
                  by a Cluster: Managed by the same KubeBlocks operator; identified
                  using Cluster, Component and Service names. \n ServiceRefs with
                  identical `serviceRef.name` in the same Cluster are considered the
                  same. \n Example: ```yaml serviceRefs: - name: \"redis-sentinel\"
                  serviceDescriptor: name: \"external-redis-sentinel\" - name: \"postgres-cluster\"
                  clusterServiceSelector: cluster: \"my-postgres-cluster\" service:
                  component: \"postgresql\" ``` The example above includes ServiceRefs
                  to an external Redis Sentinel service and a PostgreSQL Cluster."
                items:
                  properties:
                    cluster:
                      description: "Specifies the name of the KubeBlocks Cluster being
                        referenced. This is used when services from another KubeBlocks
                        Cluster are consumed. \n By default, the referenced KubeBlocks
                        Cluster's `clusterDefinition.spec.connectionCredential` will
                        be utilized to bind to the current Component. This credential
                        should include: `endpoint`, `port`, `username`, and `password`.
                        \n Note: \n - The `ServiceKind` and `ServiceVersion` specified
                        in the service reference within the ClusterDefinition are
                        not validated when using this approach. - If both `cluster`
                        and `serviceDescriptor` are present, `cluster` will take precedence.
                        \n Deprecated since v0.9 since `clusterDefinition.spec.connectionCredential`
                        is deprecated, use `clusterServiceSelector` instead. This
                        field is maintained for backward compatibility and its use
                        is discouraged. Existing usage should be updated to the current
                        preferred approach to avoid compatibility issues in future
                        releases."
                      type: string
                    clusterServiceSelector:
                      description: References a service provided by another KubeBlocks
                        Cluster. It specifies the ClusterService and the account credentials
                        needed for access.
                      properties:
                        cluster:
                          description: The name of the Cluster being referenced.
                          type: string
                        credential:
                          description: Specifies the SystemAccount to authenticate
                            and establish a connection with the referenced Cluster.
                            The SystemAccount should be defined in `componentDefinition.spec.systemAccounts`
                            of the Component providing the service in the referenced
                            Cluster.
                          properties:
                            component:
                              description: The name of the Component where the credential
                                resides in.
                              type: string
                            name:
                              description: The name of the credential (SystemAccount)
                                to reference.
                              type: string
                          required:
                          - component
                          - name
                          type: object
                        service:
                          description: Identifies a ClusterService from the list of
                            Services defined in `cluster.spec.services` of the referenced
                            Cluster.
                          properties:
                            component:
                              description: "The name of the Component where the Service
                                resides in. \n It is required when referencing a Component's
                                Service."
                              type: string
                            port:
                              description: "The port name of the Service to be referenced.
                                \n If there is a non-zero node-port exist for the
                                matched Service port, the node-port will be selected
                                first. \n If the referenced Service is of pod-service
                                type (a Service per Pod), there will be multiple Service
                                objects matched, and the resolved value will be presented
                                in the following format: service1.name:port1,service2.name:port2..."
                              type: string
                            service:
                              description: "The name of the Service to be referenced.
                                \n Leave it empty to reference the default Service.
                                Set it to \"headless\" to reference the default headless
                                Service. \n If the referenced Service is of pod-service
                                type (a Service per Pod), there will be multiple Service
                                objects matched, and the resolved value will be presented
                                in the following format: service1.name,service2.name..."
                              type: string
                          required:
                          - service
                          type: object
                      required:
                      - cluster
                      type: object
                    name:
                      description: "Specifies the identifier of the service reference
                        declaration. It corresponds to the serviceRefDeclaration name
                        defined in either: \n - `componentDefinition.spec.serviceRefDeclarations[*].name`
                        - `clusterDefinition.spec.componentDefs[*].serviceRefDeclarations[*].name`
                        (deprecated)"
                      type: string
                    namespace:
                      description: Specifies the namespace of the referenced Cluster
                        or the namespace of the referenced ServiceDescriptor object.
                        If not provided, the referenced Cluster and ServiceDescriptor
                        will be searched in the namespace of the current Cluster by
                        default.
                      type: string
                    serviceDescriptor:
                      description: "Specifies the name of the ServiceDescriptor object
                        that describes a service provided by external sources. \n
                        When referencing a service provided by external sources, a
                        ServiceDescriptor object is required to establish the service
                        binding. The `serviceDescriptor.spec.serviceKind` and `serviceDescriptor.spec.serviceVersion`
                        should match the serviceKind and serviceVersion declared in
                        the definition. \n If both `cluster` and `serviceDescriptor`
                        are specified, the `cluster` takes precedence."
                      type: string
                  required:
                  - name
                  type: object
                type: array
              serviceVersion:
                description: ServiceVersion specifies the version of the Service expected
                  to be provisioned by this Component. The version should follow the
                  syntax and semantics of the "Semantic Versioning" specification
                  (http://semver.org/).
                maxLength: 32
                type: string
              services:
                description: Overrides Services defined in referenced ComponentDefinition
                  and exposes endpoints that can be accessed by clients.
                items:
                  description: "ComponentService defines a service that would be exposed
                    as an inter-component service within a Cluster. A Service defined
                    in the ComponentService is expected to be accessed by other Components
                    within the same Cluster. \n When a Component needs to use a ComponentService
                    provided by another Component within the same Cluster, it can
                    declare a variable in the `componentDefinition.spec.vars` section
                    and bind it to the specific exposed address of the ComponentService
                    using the `serviceVarRef` field."
                  properties:
                    annotations:
                      additionalProperties:
                        type: string
                      description: 'If ServiceType is LoadBalancer, cloud provider
                        related parameters can be put here More info: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer.'
                      type: object
                    disableAutoProvision:
                      description: "Indicates whether the automatic provisioning of
                        the service should be disabled. \n If set to true, the service
                        will not be automatically created at the component provisioning.
                        Instead, you can enable the creation of this service by specifying
                        it explicitly in the cluster API."
                      type: boolean
                    name:
                      description: Name defines the name of the service. otherwise,
                        it indicates the name of the service. Others can refer to
                        this service by its name. (e.g., connection credential) Cannot
                        be updated.
                      maxLength: 25
                      type: string
                    podService:
                      default: false
                      description: "Indicates whether to create a corresponding Service
                        for each Pod of the selected Component. When set to true,
                        a set of Services will be automatically generated for each
                        Pod, and the `roleSelector` field will be ignored. \n The
                        names of the generated Services will follow the same suffix
                        naming pattern: `$(serviceName)-$(podOrdinal)`. The total
                        number of generated Services will be equal to the number of
                        replicas specified for the Component. \n Example usage: \n
                        ```yaml name: my-service serviceName: my-service podService:
                        true disableAutoProvision: true spec: type: NodePort ports:
                        - name: http port: 80 targetPort: 8080 ``` \n In this example,
                        if the Component has 3 replicas, three Services will be generated:
                        - my-service-0: Points to the first Pod (podOrdinal: 0) -
                        my-service-1: Points to the second Pod (podOrdinal: 1) - my-service-2:
                        Points to the third Pod (podOrdinal: 2) \n Each generated
                        Service will have the specified spec configuration and will
                        target its respective Pod. \n This feature is useful when
                        you need to expose each Pod of a Component individually, allowing
                        external access to specific instances of the Component."
                      type: boolean
                    roleSelector:
                      description: "Extends the above `serviceSpec.selector` by allowing
                        you to specify defined role as selector for the service. When
                        `roleSelector` is set, it adds a label selector \"kubeblocks.io/role:
                        {roleSelector}\" to the `serviceSpec.selector`. Example usage:
                        \n roleSelector: \"leader\" \n In this example, setting `roleSelector`
                        to \"leader\" will add a label selector \"kubeblocks.io/role:
                        leader\" to the `serviceSpec.selector`. This means that the
                        service will select and route traffic to Pods with the label
                        \"kubeblocks.io/role\" set to \"leader\". \n Note that if
                        `podService` sets to true, RoleSelector will be ignored. The
                        `podService` flag takes precedence over `roleSelector` and
                        generates a service for each Pod."
                      type: string
                    serviceName:
                      description: "ServiceName defines the name of the underlying
                        service object. If not specified, the default service name
                        with different patterns will be used: \n - CLUSTER_NAME: for
                        cluster-level services - CLUSTER_NAME-COMPONENT_NAME: for
                        component-level services \n Only one default service name
                        is allowed. Cannot be updated."
                      maxLength: 25
                      pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                      type: string
                    spec:
                      description: Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
                      properties:
                        allocateLoadBalancerNodePorts:
                          description: allocateLoadBalancerNodePorts defines if NodePorts
                            will be automatically allocated for services with type
                            LoadBalancer.  Default is "true". It may be set to "false"
                            if the cluster load-balancer does not rely on NodePorts.  If
                            the caller requests specific NodePorts (by specifying
                            a value), those requests will be respected, regardless
                            of this field. This field may only be set for services
                            with type LoadBalancer and will be cleared if the type
                            is changed to any other type.
                          type: boolean
                        clusterIP:
                          description: 'clusterIP is the IP address of the service
                            and is usually assigned randomly. If an address is specified
                            manually, is in-range (as per system configuration), and
                            is not in use, it will be allocated to the service; otherwise
                            creation of the service will fail. This field may not
                            be changed through updates unless the type field is also
                            being changed to ExternalName (which requires this field
                            to be blank) or the type field is being changed from ExternalName
                            (in which case this field may optionally be specified,
                            as describe above).  Valid values are "None", empty string
                            (""), or a valid IP address. Setting this to "None" makes
                            a "headless service" (no virtual IP), which is useful
                            when direct endpoint connections are preferred and proxying
                            is not required.  Only applies to types ClusterIP, NodePort,
                            and LoadBalancer. If this field is specified when creating
                            a Service of type ExternalName, creation will fail. This
                            field will be wiped when updating a Service to type ExternalName.
                            More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          type: string
                        clusterIPs:
                          description: "ClusterIPs is a list of IP addresses assigned
                            to this service, and are usually assigned randomly.  If
                            an address is specified manually, is in-range (as per
                            system configuration), and is not in use, it will be allocated
                            to the service; otherwise creation of the service will
                            fail. This field may not be changed through updates unless
                            the type field is also being changed to ExternalName (which
                            requires this field to be empty) or the type field is
                            being changed from ExternalName (in which case this field
                            may optionally be specified, as describe above).  Valid
                            values are \"None\", empty string (\"\"), or a valid IP
                            address.  Setting this to \"None\" makes a \"headless
                            service\" (no virtual IP), which is useful when direct
                            endpoint connections are preferred and proxying is not
                            required.  Only applies to types ClusterIP, NodePort,
                            and LoadBalancer. If this field is specified when creating
                            a Service of type ExternalName, creation will fail. This
                            field will be wiped when updating a Service to type ExternalName.
                            \ If this field is not specified, it will be initialized
                            from the clusterIP field.  If this field is specified,
                            clients must ensure that clusterIPs[0] and clusterIP have
                            the same value. \n This field may hold a maximum of two
                            entries (dual-stack IPs, in either order). These IPs must
                            correspond to the values of the ipFamilies field. Both
                            clusterIPs and ipFamilies are governed by the ipFamilyPolicy
                            field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        externalIPs:
                          description: externalIPs is a list of IP addresses for which
                            nodes in the cluster will also accept traffic for this
                            service.  These IPs are not managed by Kubernetes.  The
                            user is responsible for ensuring that traffic arrives
                            at a node with this IP.  A common example is external
                            load-balancers that are not part of the Kubernetes system.
                          items:
                            type: string
                          type: array
                        externalName:
                          description: externalName is the external reference that
                            discovery mechanisms will return as an alias for this
                            service (e.g. a DNS CNAME record). No proxying will be
                            involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
                            and requires `type` to be "ExternalName".
                          type: string
                        externalTrafficPolicy:
                          description: externalTrafficPolicy describes how nodes distribute
                            service traffic they receive on one of the Service's "externally-facing"
                            addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
                            If set to "Local", the proxy will configure the service
                            in a way that assumes that external load balancers will
                            take care of balancing the service traffic between nodes,
                            and so each node will deliver traffic only to the node-local
                            endpoints of the service, without masquerading the client
                            source IP. (Traffic mistakenly sent to a node with no
                            endpoints will be dropped.) The default value, "Cluster",
                            uses the standard behavior of routing to all endpoints
                            evenly (possibly modified by topology and other features).
                            Note that traffic sent to an External IP or LoadBalancer
                            IP from within the cluster will always get "Cluster" semantics,
                            but clients sending to a NodePort from within the cluster
                            may need to take traffic policy into account when picking
                            a node.
                          type: string
                        healthCheckNodePort:
                          description: healthCheckNodePort specifies the healthcheck
                            nodePort for the service. This only applies when type
                            is set to LoadBalancer and externalTrafficPolicy is set
                            to Local. If a value is specified, is in-range, and is
                            not in use, it will be used.  If not specified, a value
                            will be automatically allocated.  External systems (e.g.
                            load-balancers) can use this port to determine if a given
                            node holds endpoints for this service or not.  If this
                            field is specified when creating a Service which does
                            not need it, creation will fail. This field will be wiped
                            when updating a Service to no longer need it (e.g. changing
                            type). This field cannot be updated once set.
                          format: int32
                          type: integer
                        internalTrafficPolicy:
                          description: InternalTrafficPolicy describes how nodes distribute
                            service traffic they receive on the ClusterIP. If set
                            to "Local", the proxy will assume that pods only want
                            to talk to endpoints of the service on the same node as
                            the pod, dropping the traffic if there are no local endpoints.
                            The default value, "Cluster", uses the standard behavior
                            of routing to all endpoints evenly (possibly modified
                            by topology and other features).
                          type: string
                        ipFamilies:
                          description: "IPFamilies is a list of IP families (e.g.
                            IPv4, IPv6) assigned to this service. This field is usually
                            assigned automatically based on cluster configuration
                            and the ipFamilyPolicy field. If this field is specified
                            manually, the requested family is available in the cluster,
                            and ipFamilyPolicy allows it, it will be used; otherwise
                            creation of the service will fail. This field is conditionally
                            mutable: it allows for adding or removing a secondary
                            IP family, but it does not allow changing the primary
                            IP family of the Service. Valid values are \"IPv4\" and
                            \"IPv6\".  This field only applies to Services of types
                            ClusterIP, NodePort, and LoadBalancer, and does apply
                            to \"headless\" services. This field will be wiped when
                            updating a Service to type ExternalName. \n This field
                            may hold a maximum of two entries (dual-stack families,
                            in either order).  These families must correspond to the
                            values of the clusterIPs field, if specified. Both clusterIPs
                            and ipFamilies are governed by the ipFamilyPolicy field."
                          items:
                            description: IPFamily represents the IP Family (IPv4 or
                              IPv6). This type is used to express the family of an
                              IP expressed by a type (e.g. service.spec.ipFamilies).
                            type: string
                          type: array
                          x-kubernetes-list-type: atomic
                        ipFamilyPolicy:
                          description: IPFamilyPolicy represents the dual-stack-ness
                            requested or required by this Service. If there is no
                            value provided, then this field will be set to SingleStack.
                            Services can be "SingleStack" (a single IP family), "PreferDualStack"
                            (two IP families on dual-stack configured clusters or
                            a single IP family on single-stack clusters), or "RequireDualStack"
                            (two IP families on dual-stack configured clusters, otherwise
                            fail). The ipFamilies and clusterIPs fields depend on
                            the value of this field. This field will be wiped when
                            updating a service to type ExternalName.
                          type: string
                        loadBalancerClass:
                          description: loadBalancerClass is the class of the load
                            balancer implementation this Service belongs to. If specified,
                            the value of this field must be a label-style identifier,
                            with an optional prefix, e.g. "internal-vip" or "example.com/internal-vip".
                            Unprefixed names are reserved for end-users. This field
                            can only be set when the Service type is 'LoadBalancer'.
                            If not set, the default load balancer implementation is
                            used, today this is typically done through the cloud provider
                            integration, but should apply for any default implementation.
                            If set, it is assumed that a load balancer implementation
                            is watching for Services with a matching class. Any default
                            load balancer implementation (e.g. cloud providers) should
                            ignore Services that set this field. This field can only
                            be set when creating or updating a Service to type 'LoadBalancer'.
                            Once set, it can not be changed. This field will be wiped
                            when a service is updated to a non 'LoadBalancer' type.
                          type: string
                        loadBalancerIP:
                          description: 'Only applies to Service Type: LoadBalancer.
                            This feature depends on whether the underlying cloud-provider
                            supports specifying the loadBalancerIP when a load balancer
                            is created. This field will be ignored if the cloud-provider
                            does not support the feature. Deprecated: This field was
                            under-specified and its meaning varies across implementations.
                            Using it is non-portable and it may not support dual-stack.
                            Users are encouraged to use implementation-specific annotations
                            when available.'
                          type: string
                        loadBalancerSourceRanges:
                          description: 'If specified and supported by the platform,
                            this will restrict traffic through the cloud-provider
                            load-balancer will be restricted to the specified client
                            IPs. This field will be ignored if the cloud-provider
                            does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/'
                          items:
                            type: string
                          type: array
                        ports:
                          description: 'The list of ports that are exposed by this
                            service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          items:
                            description: ServicePort contains information on service's
                              port.
                            properties:
                              appProtocol:
                                description: "The application protocol for this port.
                                  This is used as a hint for implementations to offer
                                  richer behavior for protocols that they understand.
                                  This field follows standard Kubernetes label syntax.
                                  Valid values are either: \n * Un-prefixed protocol
                                  names - reserved for IANA standard service names
                                  (as per RFC-6335 and https://www.iana.org/assignments/service-names).
                                  \n * Kubernetes-defined prefixed names: * 'kubernetes.io/h2c'
                                  - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
                                  * 'kubernetes.io/ws'  - WebSocket over cleartext
                                  as described in https://www.rfc-editor.org/rfc/rfc6455
                                  * 'kubernetes.io/wss' - WebSocket over TLS as described
                                  in https://www.rfc-editor.org/rfc/rfc6455 \n * Other
                                  protocols should use implementation-defined prefixed
                                  names such as mycompany.com/my-custom-protocol."
                                type: string
                              name:
                                description: The name of this port within the service.
                                  This must be a DNS_LABEL. All ports within a ServiceSpec
                                  must have unique names. When considering the endpoints
                                  for a Service, this must match the 'name' field
                                  in the EndpointPort. Optional if only one ServicePort
                                  is defined on this service.
                                type: string
                              nodePort:
                                description: 'The port on each node on which this
                                  service is exposed when type is NodePort or LoadBalancer.  Usually
                                  assigned by the system. If a value is specified,
                                  in-range, and not in use it will be used, otherwise
                                  the operation will fail.  If not specified, a port
                                  will be allocated if this Service requires one.  If
                                  this field is specified when creating a Service
                                  which does not need it, creation will fail. This
                                  field will be wiped when updating a Service to no
                                  longer need it (e.g. changing type from NodePort
                                  to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                format: int32
                                type: integer
                              port:
                                description: The port that will be exposed by this
                                  service.
                                format: int32
                                type: integer
                              protocol:
                                default: TCP
                                description: The IP protocol for this port. Supports
                                  "TCP", "UDP", and "SCTP". Default is TCP.
                                type: string
                              targetPort:
                                anyOf:
                                - type: integer
                                - type: string
                                description: 'Number or name of the port to access
                                  on the pods targeted by the service. Number must
                                  be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                  If this is a string, it will be looked up as a named
                                  port in the target Pod''s container ports. If this
                                  is not specified, the value of the ''port'' field
                                  is used (an identity map). This field is ignored
                                  for services with clusterIP=None, and should be
                                  omitted or set equal to the ''port'' field. More
                                  info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                x-kubernetes-int-or-string: true
                            required:
                            - port
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - port
                          - protocol
                          x-kubernetes-list-type: map
                        publishNotReadyAddresses:
                          description: publishNotReadyAddresses indicates that any
                            agent which deals with endpoints for this Service should
                            disregard any indications of ready/not-ready. The primary
                            use case for setting this field is for a StatefulSet's
                            Headless Service to propagate SRV DNS records for its
                            Pods for the purpose of peer discovery. The Kubernetes
                            controllers that generate Endpoints and EndpointSlice
                            resources for Services interpret this to mean that all
                            endpoints are considered "ready" even if the Pods themselves
                            are not. Agents which consume only Kubernetes generated
                            endpoints through the Endpoints or EndpointSlice resources
                            can safely assume this behavior.
                          type: boolean
                        selector:
                          additionalProperties:
                            type: string
                          description: 'Route service traffic to pods with label keys
                            and values matching this selector. If empty or not present,
                            the service is assumed to have an external process managing
                            its endpoints, which Kubernetes will not modify. Only
                            applies to types ClusterIP, NodePort, and LoadBalancer.
                            Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/'
                          type: object
                          x-kubernetes-map-type: atomic
                        sessionAffinity:
                          description: 'Supports "ClientIP" and "None". Used to maintain
                            session affinity. Enable client IP based session affinity.
                            Must be ClientIP or None. Defaults to None. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                          type: string
                        sessionAffinityConfig:
                          description: sessionAffinityConfig contains the configurations
                            of session affinity.
                          properties:
                            clientIP:
                              description: clientIP contains the configurations of
                                Client IP based session affinity.
                              properties:
                                timeoutSeconds:
                                  description: timeoutSeconds specifies the seconds
                                    of ClientIP type session sticky time. The value
                                    must be >0 && <=86400(for 1 day) if ServiceAffinity
                                    == "ClientIP". Default value is 10800(for 3 hours).
                                  format: int32
                                  type: integer
                              type: object
                          type: object
                        type:
                          description: 'type determines how the Service is exposed.
                            Defaults to ClusterIP. Valid options are ExternalName,
                            ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates
                            a cluster-internal IP address for load-balancing to endpoints.
                            Endpoints are determined by the selector or if that is
                            not specified, by manual construction of an Endpoints
                            object or EndpointSlice objects. If clusterIP is "None",
                            no virtual IP is allocated and the endpoints are published
                            as a set of endpoints rather than a virtual IP. "NodePort"
                            builds on ClusterIP and allocates a port on every node
                            which routes to the same endpoints as the clusterIP. "LoadBalancer"
                            builds on NodePort and creates an external load-balancer
                            (if supported in the current cloud) which routes to the
                            same endpoints as the clusterIP. "ExternalName" aliases
                            this service to the specified externalName. Several other
                            fields do not apply to ExternalName services. More info:
                            https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                          type: string
                      type: object
                  required:
                  - name
                  type: object
                type: array
              systemAccounts:
                description: Overrides system accounts defined in referenced ComponentDefinition.
                items:
                  properties:
                    name:
                      description: The name of the system account.
                      type: string
                    passwordConfig:
                      description: "Specifies the policy for generating the account's
                        password. \n This field is immutable once set."
                      properties:
                        length:
                          default: 16
                          description: The length of the password.
                          format: int32
                          maximum: 32
                          minimum: 8
                          type: integer
                        letterCase:
                          default: MixedCases
                          description: The case of the letters in the password.
                          enum:
                          - LowerCases
                          - UpperCases
                          - MixedCases
                          type: string
                        numDigits:
                          default: 4
                          description: The number of digits in the password.
                          format: int32
                          maximum: 8
                          minimum: 0
                          type: integer
                        numSymbols:
                          default: 0
                          description: The number of symbols in the password.
                          format: int32
                          maximum: 8
                          minimum: 0
                          type: integer
                        seed:
                          description: Seed to generate the account's password. Cannot
                            be updated.
                          type: string
                      type: object
                    secretRef:
                      description: "Refers to the secret from which data will be copied
                        to create the new account. \n This field is immutable once
                        set."
                      properties:
                        name:
                          description: The unique identifier of the secret.
                          type: string
                        namespace:
                          description: The namespace where the secret is located.
                          type: string
                      required:
                      - name
                      - namespace
                      type: object
                  required:
                  - name
                  type: object
                type: array
              tlsConfig:
                description: "Specifies the TLS configuration for the Component, including:
                  \n - A boolean flag that indicates whether the Component should
                  use Transport Layer Security (TLS) for secure communication. - An
                  optional field that specifies the configuration for the TLS certificates
                  issuer when TLS is enabled. It allows defining the issuer name and
                  the reference to the secret containing the TLS certificates and
                  key. The secret should contain the CA certificate, TLS certificate,
                  and private key in the specified keys."
                properties:
                  enable:
                    default: false
                    description: A boolean flag that indicates whether the Component
                      should use Transport Layer Security (TLS) for secure communication.
                      When set to true, the Component will be configured to use TLS
                      encryption for its network connections. This ensures that the
                      data transmitted between the Component and its clients or other
                      Components is encrypted and protected from unauthorized access.
                      If TLS is enabled, the Component may require additional configuration,
                      such as specifying TLS certificates and keys, to properly set
                      up the secure communication channel.
                    type: boolean
                  issuer:
                    description: Specifies the configuration for the TLS certificates
                      issuer. It allows defining the issuer name and the reference
                      to the secret containing the TLS certificates and key. The secret
                      should contain the CA certificate, TLS certificate, and private
                      key in the specified keys. Required when TLS is enabled.
                    properties:
                      name:
                        allOf:
                        - enum:
                          - KubeBlocks
                          - UserProvided
                        - enum:
                          - KubeBlocks
                          - UserProvided
                        default: KubeBlocks
                        description: "The issuer for TLS certificates. It only allows
                          two enum values: `KubeBlocks` and `UserProvided`. \n - `KubeBlocks`
                          indicates that the self-signed TLS certificates generated
                          by the KubeBlocks Operator will be used. - `UserProvided`
                          means that the user is responsible for providing their own
                          CA, Cert, and Key. In this case, the user-provided CA certificate,
                          server certificate, and private key will be used for TLS
                          communication."
                        type: string
                      secretRef:
                        description: SecretRef is the reference to the secret that
                          contains user-provided certificates. It is required when
                          the issuer is set to `UserProvided`.
                        properties:
                          ca:
                            description: Key of CA cert in Secret
                            type: string
                          cert:
                            description: Key of Cert in Secret
                            type: string
                          key:
                            description: Key of TLS private key in Secret
                            type: string
                          name:
                            description: Name of the Secret that contains user-provided
                              certificates.
                            type: string
                        required:
                        - ca
                        - cert
                        - key
                        - name
                        type: object
                    required:
                    - name
                    type: object
                type: object
              tolerations:
                description: "Allows Pods to be scheduled onto nodes with matching
                  taints. Each toleration in the array allows the Pod to tolerate
                  node taints based on specified `key`, `value`, `effect`, and `operator`.
                  \n - The `key`, `value`, and `effect` identify the taint that the
                  toleration matches. - The `operator` determines how the toleration
                  matches the taint. \n Pods with matching tolerations are allowed
                  to be scheduled on tainted nodes, typically reserved for specific
                  purposes."
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
              volumeClaimTemplates:
                description: Specifies a list of PersistentVolumeClaim templates that
                  define the storage requirements for the Component. Each template
                  specifies the desired characteristics of a persistent volume, such
                  as storage class, size, and access modes. These templates are used
                  to dynamically provision persistent volumes for the Component.
                items:
                  properties:
                    name:
                      description: "Refers to the name of a volumeMount defined in
                        either: \n - `componentDefinition.spec.runtime.containers[*].volumeMounts`
                        - `clusterDefinition.spec.componentDefs[*].podSpec.containers[*].volumeMounts`
                        (deprecated) \n The value of `name` must match the `name`
                        field of a volumeMount specified in the corresponding `volumeMounts`
                        array."
                      type: string
                    spec:
                      description: "Defines the desired characteristics of a PersistentVolumeClaim
                        that will be created for the volume with the mount name specified
                        in the `name` field. \n When a Pod is created for this ClusterComponent,
                        a new PVC will be created based on the specification defined
                        in the `spec` field. The PVC will be associated with the volume
                        mount specified by the `name` field."
                      properties:
                        accessModes:
                          description: 'Contains the desired access modes the volume
                            should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.'
                          items:
                            type: string
                          type: array
                          x-kubernetes-preserve-unknown-fields: true
                        resources:
                          description: 'Represents the minimum resources the volume
                            should have. If the RecoverVolumeExpansionFailure feature
                            is enabled, users are allowed to specify resource requirements
                            that are lower than the previous value but must still
                            be higher than the capacity recorded in the status field
                            of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources.'
                          properties:
                            claims:
                              description: "Claims lists the names of resources, defined
                                in spec.resourceClaims, that are used by this container.
                                \n This is an alpha field and requires enabling the
                                DynamicResourceAllocation feature gate. \n This field
                                is immutable. It can only be set for containers."
                              items:
                                description: ResourceClaim references one entry in
                                  PodSpec.ResourceClaims.
                                properties:
                                  name:
                                    description: Name must match the name of one entry
                                      in pod.spec.resourceClaims of the Pod where
                                      this field is used. It makes that resource available
                                      inside a container.
                                    type: string
                                required:
                                - name
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                              - name
                              x-kubernetes-list-type: map
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        storageClassName:
                          description: 'The name of the StorageClass required by the
                            claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.'
                          type: string
                        volumeMode:
                          description: Defines what type of volume is required by
                            the claim, either Block or Filesystem.
                          type: string
                      type: object
                  required:
                  - name
                  type: object
                type: array
              volumes:
                description: List of volumes to override.
                items:
                  description: Volume represents a named volume in a pod that may
                    be accessed by any container in the pod.
                  properties:
                    awsElasticBlockStore:
                      description: 'awsElasticBlockStore represents an AWS Disk resource
                        that is attached to a kubelet''s host machine and then exposed
                        to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        partition:
                          description: 'partition is the partition in the volume that
                            you want to mount. If omitted, the default is to mount
                            by volume name. Examples: For volume /dev/sda1, you specify
                            the partition as "1". Similarly, the volume partition
                            for /dev/sda is "0" (or you can leave the property empty).'
                          format: int32
                          type: integer
                        readOnly:
                          description: 'readOnly value true will force the readOnly
                            setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                          type: boolean
                        volumeID:
                          description: 'volumeID is unique ID of the persistent disk
                            resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
                          type: string
                      required:
                      - volumeID
                      type: object
                    azureDisk:
                      description: azureDisk represents an Azure Data Disk mount on
                        the host and bind mount to the pod.
                      properties:
                        cachingMode:
                          description: 'cachingMode is the Host Caching mode: None,
                            Read Only, Read Write.'
                          type: string
                        diskName:
                          description: diskName is the Name of the data disk in the
                            blob storage
                          type: string
                        diskURI:
                          description: diskURI is the URI of data disk in the blob
                            storage
                          type: string
                        fsType:
                          description: fsType is Filesystem type to mount. Must be
                            a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        kind:
                          description: 'kind expected values are Shared: multiple
                            blob disks per storage account  Dedicated: single blob
                            disk per storage account  Managed: azure managed data
                            disk (only in managed availability set). defaults to shared'
                          type: string
                        readOnly:
                          description: readOnly Defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                      required:
                      - diskName
                      - diskURI
                      type: object
                    azureFile:
                      description: azureFile represents an Azure File Service mount
                        on the host and bind mount to the pod.
                      properties:
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretName:
                          description: secretName is the  name of secret that contains
                            Azure Storage Account Name and Key
                          type: string
                        shareName:
                          description: shareName is the azure share Name
                          type: string
                      required:
                      - secretName
                      - shareName
                      type: object
                    cephfs:
                      description: cephFS represents a Ceph FS mount on the host that
                        shares a pod's lifetime
                      properties:
                        monitors:
                          description: 'monitors is Required: Monitors is a collection
                            of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          items:
                            type: string
                          type: array
                        path:
                          description: 'path is Optional: Used as the mounted root,
                            rather than the full Ceph tree, default is /'
                          type: string
                        readOnly:
                          description: 'readOnly is Optional: Defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: boolean
                        secretFile:
                          description: 'secretFile is Optional: SecretFile is the
                            path to key ring for User, default is /etc/ceph/user.secret
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: string
                        secretRef:
                          description: 'secretRef is Optional: SecretRef is reference
                            to the authentication secret for User, default is empty.
                            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        user:
                          description: 'user is optional: User is the rados user name,
                            default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
                          type: string
                      required:
                      - monitors
                      type: object
                    cinder:
                      description: 'cinder represents a cinder volume attached and
                        mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to
                            be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: string
                        readOnly:
                          description: 'readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                            More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: boolean
                        secretRef:
                          description: 'secretRef is optional: points to a secret
                            object containing parameters used to connect to OpenStack.'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        volumeID:
                          description: 'volumeID used to identify the volume in cinder.
                            More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
                          type: string
                      required:
                      - volumeID
                      type: object
                    configMap:
                      description: configMap represents a configMap that should populate
                        this volume
                      properties:
                        defaultMode:
                          description: 'defaultMode is optional: mode bits used to
                            set permissions on created files by default. Must be an
                            octal value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items if unspecified, each key-value pair in
                            the Data field of the referenced ConfigMap will be projected
                            into the volume as a file whose name is the key and content
                            is the value. If specified, the listed keys will be projected
                            into the specified paths, and unlisted keys will not be
                            present. If a key is specified which is not present in
                            the ConfigMap, the volume setup will error unless it is
                            marked optional. Paths must be relative and may not contain
                            the '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to
                                  set permissions on this file. Must be an octal value
                                  between 0000 and 0777 or a decimal value between
                                  0 and 511. YAML accepts both octal and decimal values,
                                  JSON requires decimal values for mode bits. If not
                                  specified, the volume defaultMode will be used.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file
                                  to map the key to. May not be an absolute path.
                                  May not contain the path element '..'. May not start
                                  with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                        optional:
                          description: optional specify whether the ConfigMap or its
                            keys must be defined
                          type: boolean
                      type: object
                      x-kubernetes-map-type: atomic
                    csi:
                      description: csi (Container Storage Interface) represents ephemeral
                        storage that is handled by certain external CSI drivers (Beta
                        feature).
                      properties:
                        driver:
                          description: driver is the name of the CSI driver that handles
                            this volume. Consult with your admin for the correct name
                            as registered in the cluster.
                          type: string
                        fsType:
                          description: fsType to mount. Ex. "ext4", "xfs", "ntfs".
                            If not provided, the empty value is passed to the associated
                            CSI driver which will determine the default filesystem
                            to apply.
                          type: string
                        nodePublishSecretRef:
                          description: nodePublishSecretRef is a reference to the
                            secret object containing sensitive information to pass
                            to the CSI driver to complete the CSI NodePublishVolume
                            and NodeUnpublishVolume calls. This field is optional,
                            and  may be empty if no secret is required. If the secret
                            object contains more than one secret, all secret references
                            are passed.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        readOnly:
                          description: readOnly specifies a read-only configuration
                            for the volume. Defaults to false (read/write).
                          type: boolean
                        volumeAttributes:
                          additionalProperties:
                            type: string
                          description: volumeAttributes stores driver-specific properties
                            that are passed to the CSI driver. Consult your driver's
                            documentation for supported values.
                          type: object
                      required:
                      - driver
                      type: object
                    downwardAPI:
                      description: downwardAPI represents downward API about the pod
                        that should populate this volume
                      properties:
                        defaultMode:
                          description: 'Optional: mode bits to use on created files
                            by default. Must be a Optional: mode bits used to set
                            permissions on created files by default. Must be an octal
                            value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: Items is a list of downward API volume file
                          items:
                            description: DownwardAPIVolumeFile represents information
                              to create the file containing the pod field
                            properties:
                              fieldRef:
                                description: 'Required: Selects a field of the pod:
                                  only annotations, labels, name and namespace are
                                  supported.'
                                properties:
                                  apiVersion:
                                    description: Version of the schema the FieldPath
                                      is written in terms of, defaults to "v1".
                                    type: string
                                  fieldPath:
                                    description: Path of the field to select in the
                                      specified API version.
                                    type: string
                                required:
                                - fieldPath
                                type: object
                                x-kubernetes-map-type: atomic
                              mode:
                                description: 'Optional: mode bits used to set permissions
                                  on this file, must be an octal value between 0000
                                  and 0777 or a decimal value between 0 and 511. YAML
                                  accepts both octal and decimal values, JSON requires
                                  decimal values for mode bits. If not specified,
                                  the volume defaultMode will be used. This might
                                  be in conflict with other options that affect the
                                  file mode, like fsGroup, and the result can be other
                                  mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: 'Required: Path is  the relative path
                                  name of the file to be created. Must not be absolute
                                  or contain the ''..'' path. Must be utf-8 encoded.
                                  The first item of the relative path must not start
                                  with ''..'''
                                type: string
                              resourceFieldRef:
                                description: 'Selects a resource of the container:
                                  only resources limits and requests (limits.cpu,
                                  limits.memory, requests.cpu and requests.memory)
                                  are currently supported.'
                                properties:
                                  containerName:
                                    description: 'Container name: required for volumes,
                                      optional for env vars'
                                    type: string
                                  divisor:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    description: Specifies the output format of the
                                      exposed resources, defaults to "1"
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  resource:
                                    description: 'Required: resource to select'
                                    type: string
                                required:
                                - resource
                                type: object
                                x-kubernetes-map-type: atomic
                            required:
                            - path
                            type: object
                          type: array
                      type: object
                    emptyDir:
                      description: 'emptyDir represents a temporary directory that
                        shares a pod''s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                      properties:
                        medium:
                          description: 'medium represents what type of storage medium
                            should back this directory. The default is "" which means
                            to use the node''s default medium. Must be an empty string
                            (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                          type: string
                        sizeLimit:
                          anyOf:
                          - type: integer
                          - type: string
                          description: 'sizeLimit is the total amount of local storage
                            required for this EmptyDir volume. The size limit is also
                            applicable for memory medium. The maximum usage on memory
                            medium EmptyDir would be the minimum value between the
                            SizeLimit specified here and the sum of memory limits
                            of all containers in a pod. The default is nil which means
                            that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                      type: object
                    ephemeral:
                      description: "ephemeral represents a volume that is handled
                        by a cluster storage driver. The volume's lifecycle is tied
                        to the pod that defines it - it will be created before the
                        pod starts, and deleted when the pod is removed. \n Use this
                        if: a) the volume is only needed while the pod runs, b) features
                        of normal volumes like restoring from snapshot or capacity
                        tracking are needed, c) the storage driver is specified through
                        a storage class, and d) the storage driver supports dynamic
                        volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource
                        for more information on the connection between this volume
                        type and PersistentVolumeClaim). \n Use PersistentVolumeClaim
                        or one of the vendor-specific APIs for volumes that persist
                        for longer than the lifecycle of an individual pod. \n Use
                        CSI for light-weight local ephemeral volumes if the CSI driver
                        is meant to be used that way - see the documentation of the
                        driver for more information. \n A pod can use both types of
                        ephemeral volumes and persistent volumes at the same time."
                      properties:
                        volumeClaimTemplate:
                          description: "Will be used to create a stand-alone PVC to
                            provision the volume. The pod in which this EphemeralVolumeSource
                            is embedded will be the owner of the PVC, i.e. the PVC
                            will be deleted together with the pod.  The name of the
                            PVC will be `<pod name>-<volume name>` where `<volume
                            name>` is the name from the `PodSpec.Volumes` array entry.
                            Pod validation will reject the pod if the concatenated
                            name is not valid for a PVC (for example, too long). \n
                            An existing PVC with that name that is not owned by the
                            pod will *not* be used for the pod to avoid using an unrelated
                            volume by mistake. Starting the pod is then blocked until
                            the unrelated PVC is removed. If such a pre-created PVC
                            is meant to be used by the pod, the PVC has to updated
                            with an owner reference to the pod once the pod exists.
                            Normally this should not be necessary, but it may be useful
                            when manually reconstructing a broken cluster. \n This
                            field is read-only and no changes will be made by Kubernetes
                            to the PVC after it has been created. \n Required, must
                            not be nil."
                          properties:
                            metadata:
                              description: May contain labels and annotations that
                                will be copied into the PVC when creating it. No other
                                fields are allowed and will be rejected during validation.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  type: object
                                finalizers:
                                  items:
                                    type: string
                                  type: array
                                labels:
                                  additionalProperties:
                                    type: string
                                  type: object
                                name:
                                  type: string
                                namespace:
                                  type: string
                              type: object
                            spec:
                              description: The specification for the PersistentVolumeClaim.
                                The entire content is copied unchanged into the PVC
                                that gets created from this template. The same fields
                                as in a PersistentVolumeClaim are also valid here.
                              properties:
                                accessModes:
                                  description: 'accessModes contains the desired access
                                    modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                  items:
                                    type: string
                                  type: array
                                dataSource:
                                  description: 'dataSource field can be used to specify
                                    either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                    * An existing PVC (PersistentVolumeClaim) If the
                                    provisioner or an external controller can support
                                    the specified data source, it will create a new
                                    volume based on the contents of the specified
                                    data source. When the AnyVolumeDataSource feature
                                    gate is enabled, dataSource contents will be copied
                                    to dataSourceRef, and dataSourceRef contents will
                                    be copied to dataSource when dataSourceRef.namespace
                                    is not specified. If the namespace is specified,
                                    then dataSourceRef will not be copied to dataSource.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                  x-kubernetes-map-type: atomic
                                dataSourceRef:
                                  description: 'dataSourceRef specifies the object
                                    from which to populate the volume with data, if
                                    a non-empty volume is desired. This may be any
                                    object from a non-empty API group (non core object)
                                    or a PersistentVolumeClaim object. When this field
                                    is specified, volume binding will only succeed
                                    if the type of the specified object matches some
                                    installed volume populator or dynamic provisioner.
                                    This field will replace the functionality of the
                                    dataSource field and as such if both fields are
                                    non-empty, they must have the same value. For
                                    backwards compatibility, when namespace isn''t
                                    specified in dataSourceRef, both fields (dataSource
                                    and dataSourceRef) will be set to the same value
                                    automatically if one of them is empty and the
                                    other is non-empty. When namespace is specified
                                    in dataSourceRef, dataSource isn''t set to the
                                    same value and must be empty. There are three
                                    important differences between dataSource and dataSourceRef:
                                    * While dataSource only allows two specific types
                                    of objects, dataSourceRef allows any non-core
                                    object, as well as PersistentVolumeClaim objects.
                                    * While dataSource ignores disallowed values (dropping
                                    them), dataSourceRef preserves all values, and
                                    generates an error if a disallowed value is specified.
                                    * While dataSource only allows local objects,
                                    dataSourceRef allows objects in any namespaces.
                                    (Beta) Using this field requires the AnyVolumeDataSource
                                    feature gate to be enabled. (Alpha) Using the
                                    namespace field of dataSourceRef requires the
                                    CrossNamespaceVolumeDataSource feature gate to
                                    be enabled.'
                                  properties:
                                    apiGroup:
                                      description: APIGroup is the group for the resource
                                        being referenced. If APIGroup is not specified,
                                        the specified Kind must be in the core API
                                        group. For any other third-party types, APIGroup
                                        is required.
                                      type: string
                                    kind:
                                      description: Kind is the type of resource being
                                        referenced
                                      type: string
                                    name:
                                      description: Name is the name of resource being
                                        referenced
                                      type: string
                                    namespace:
                                      description: Namespace is the namespace of resource
                                        being referenced Note that when a namespace
                                        is specified, a gateway.networking.k8s.io/ReferenceGrant
                                        object is required in the referent namespace
                                        to allow that namespace's owner to accept
                                        the reference. See the ReferenceGrant documentation
                                        for details. (Alpha) This field requires the
                                        CrossNamespaceVolumeDataSource feature gate
                                        to be enabled.
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                resources:
                                  description: 'resources represents the minimum resources
                                    the volume should have. If RecoverVolumeExpansionFailure
                                    feature is enabled users are allowed to specify
                                    resource requirements that are lower than previous
                                    value but must still be higher than capacity recorded
                                    in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                  properties:
                                    claims:
                                      description: "Claims lists the names of resources,
                                        defined in spec.resourceClaims, that are used
                                        by this container. \n This is an alpha field
                                        and requires enabling the DynamicResourceAllocation
                                        feature gate. \n This field is immutable.
                                        It can only be set for containers."
                                      items:
                                        description: ResourceClaim references one
                                          entry in PodSpec.ResourceClaims.
                                        properties:
                                          name:
                                            description: Name must match the name
                                              of one entry in pod.spec.resourceClaims
                                              of the Pod where this field is used.
                                              It makes that resource available inside
                                              a container.
                                            type: string
                                        required:
                                        - name
                                        type: object
                                      type: array
                                      x-kubernetes-list-map-keys:
                                      - name
                                      x-kubernetes-list-type: map
                                    limits:
                                      additionalProperties:
                                        anyOf:
                                        - type: integer
                                        - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Limits describes the maximum amount
                                        of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                    requests:
                                      additionalProperties:
                                        anyOf:
                                        - type: integer
                                        - type: string
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      description: 'Requests describes the minimum
                                        amount of compute resources required. If Requests
                                        is omitted for a container, it defaults to
                                        Limits if that is explicitly specified, otherwise
                                        to an implementation-defined value. Requests
                                        cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                      type: object
                                  type: object
                                selector:
                                  description: selector is a label query over volumes
                                    to consider for binding.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                storageClassName:
                                  description: 'storageClassName is the name of the
                                    StorageClass required by the claim. More info:
                                    https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                  type: string
                                volumeMode:
                                  description: volumeMode defines what type of volume
                                    is required by the claim. Value of Filesystem
                                    is implied when not included in claim spec.
                                  type: string
                                volumeName:
                                  description: volumeName is the binding reference
                                    to the PersistentVolume backing this claim.
                                  type: string
                              type: object
                          required:
                          - spec
                          type: object
                      type: object
                    fc:
                      description: fc represents a Fibre Channel resource that is
                        attached to a kubelet's host machine and then exposed to the
                        pod.
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. TODO: how do we prevent errors in the
                            filesystem from compromising the machine'
                          type: string
                        lun:
                          description: 'lun is Optional: FC target lun number'
                          format: int32
                          type: integer
                        readOnly:
                          description: 'readOnly is Optional: Defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                          type: boolean
                        targetWWNs:
                          description: 'targetWWNs is Optional: FC target worldwide
                            names (WWNs)'
                          items:
                            type: string
                          type: array
                        wwids:
                          description: 'wwids Optional: FC volume world wide identifiers
                            (wwids) Either wwids or combination of targetWWNs and
                            lun must be set, but not both simultaneously.'
                          items:
                            type: string
                          type: array
                      type: object
                    flexVolume:
                      description: flexVolume represents a generic volume resource
                        that is provisioned/attached using an exec based plugin.
                      properties:
                        driver:
                          description: driver is the name of the driver to use for
                            this volume.
                          type: string
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". The default filesystem depends
                            on FlexVolume script.
                          type: string
                        options:
                          additionalProperties:
                            type: string
                          description: 'options is Optional: this field holds extra
                            command options if any.'
                          type: object
                        readOnly:
                          description: 'readOnly is Optional: defaults to false (read/write).
                            ReadOnly here will force the ReadOnly setting in VolumeMounts.'
                          type: boolean
                        secretRef:
                          description: 'secretRef is Optional: secretRef is reference
                            to the secret object containing sensitive information
                            to pass to the plugin scripts. This may be empty if no
                            secret object is specified. If the secret object contains
                            more than one secret, all secrets are passed to the plugin
                            scripts.'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                      - driver
                      type: object
                    flocker:
                      description: flocker represents a Flocker volume attached to
                        a kubelet's host machine. This depends on the Flocker control
                        service being running
                      properties:
                        datasetName:
                          description: datasetName is Name of the dataset stored as
                            metadata -> name on the dataset for Flocker should be
                            considered as deprecated
                          type: string
                        datasetUUID:
                          description: datasetUUID is the UUID of the dataset. This
                            is unique identifier of a Flocker dataset
                          type: string
                      type: object
                    gcePersistentDisk:
                      description: 'gcePersistentDisk represents a GCE Disk resource
                        that is attached to a kubelet''s host machine and then exposed
                        to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                      properties:
                        fsType:
                          description: 'fsType is filesystem type of the volume that
                            you want to mount. Tip: Ensure that the filesystem type
                            is supported by the host operating system. Examples: "ext4",
                            "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        partition:
                          description: 'partition is the partition in the volume that
                            you want to mount. If omitted, the default is to mount
                            by volume name. Examples: For volume /dev/sda1, you specify
                            the partition as "1". Similarly, the volume partition
                            for /dev/sda is "0" (or you can leave the property empty).
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          format: int32
                          type: integer
                        pdName:
                          description: 'pdName is unique name of the PD resource in
                            GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
                          type: boolean
                      required:
                      - pdName
                      type: object
                    gitRepo:
                      description: 'gitRepo represents a git repository at a particular
                        revision. DEPRECATED: GitRepo is deprecated. To provision
                        a container with a git repo, mount an EmptyDir into an InitContainer
                        that clones the repo using git, then mount the EmptyDir into
                        the Pod''s container.'
                      properties:
                        directory:
                          description: directory is the target directory name. Must
                            not contain or start with '..'.  If '.' is supplied, the
                            volume directory will be the git repository.  Otherwise,
                            if specified, the volume will contain the git repository
                            in the subdirectory with the given name.
                          type: string
                        repository:
                          description: repository is the URL
                          type: string
                        revision:
                          description: revision is the commit hash for the specified
                            revision.
                          type: string
                      required:
                      - repository
                      type: object
                    glusterfs:
                      description: 'glusterfs represents a Glusterfs mount on the
                        host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
                      properties:
                        endpoints:
                          description: 'endpoints is the endpoint name that details
                            Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: string
                        path:
                          description: 'path is the Glusterfs volume path. More info:
                            https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the Glusterfs volume
                            to be mounted with read-only permissions. Defaults to
                            false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
                          type: boolean
                      required:
                      - endpoints
                      - path
                      type: object
                    hostPath:
                      description: 'hostPath represents a pre-existing file or directory
                        on the host machine that is directly exposed to the container.
                        This is generally used for system agents or other privileged
                        things that are allowed to see the host machine. Most containers
                        will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                        --- TODO(jonesdl) We need to restrict who can use host directory
                        mounts and who can/can not mount host directories as read/write.'
                      properties:
                        path:
                          description: 'path of the directory on the host. If the
                            path is a symlink, it will follow the link to the real
                            path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                          type: string
                        type:
                          description: 'type for HostPath Volume Defaults to "" More
                            info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
                          type: string
                      required:
                      - path
                      type: object
                    iscsi:
                      description: 'iscsi represents an ISCSI Disk resource that is
                        attached to a kubelet''s host machine and then exposed to
                        the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
                      properties:
                        chapAuthDiscovery:
                          description: chapAuthDiscovery defines whether support iSCSI
                            Discovery CHAP authentication
                          type: boolean
                        chapAuthSession:
                          description: chapAuthSession defines whether support iSCSI
                            Session CHAP authentication
                          type: boolean
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        initiatorName:
                          description: initiatorName is the custom iSCSI Initiator
                            Name. If initiatorName is specified with iscsiInterface
                            simultaneously, new iSCSI interface <target portal>:<volume
                            name> will be created for the connection.
                          type: string
                        iqn:
                          description: iqn is the target iSCSI Qualified Name.
                          type: string
                        iscsiInterface:
                          description: iscsiInterface is the interface Name that uses
                            an iSCSI transport. Defaults to 'default' (tcp).
                          type: string
                        lun:
                          description: lun represents iSCSI Target Lun number.
                          format: int32
                          type: integer
                        portals:
                          description: portals is the iSCSI Target Portal List. The
                            portal is either an IP or ip_addr:port if the port is
                            other than default (typically TCP ports 860 and 3260).
                          items:
                            type: string
                          type: array
                        readOnly:
                          description: readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false.
                          type: boolean
                        secretRef:
                          description: secretRef is the CHAP Secret for iSCSI target
                            and initiator authentication
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        targetPortal:
                          description: targetPortal is iSCSI Target Portal. The Portal
                            is either an IP or ip_addr:port if the port is other than
                            default (typically TCP ports 860 and 3260).
                          type: string
                      required:
                      - iqn
                      - lun
                      - targetPortal
                      type: object
                    name:
                      description: 'name of the volume. Must be a DNS_LABEL and unique
                        within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    nfs:
                      description: 'nfs represents an NFS mount on the host that shares
                        a pod''s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                      properties:
                        path:
                          description: 'path that is exported by the NFS server. More
                            info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the NFS export to
                            be mounted with read-only permissions. Defaults to false.
                            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: boolean
                        server:
                          description: 'server is the hostname or IP address of the
                            NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
                          type: string
                      required:
                      - path
                      - server
                      type: object
                    persistentVolumeClaim:
                      description: 'persistentVolumeClaimVolumeSource represents a
                        reference to a PersistentVolumeClaim in the same namespace.
                        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                      properties:
                        claimName:
                          description: 'claimName is the name of a PersistentVolumeClaim
                            in the same namespace as the pod using this volume. More
                            info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                          type: string
                        readOnly:
                          description: readOnly Will force the ReadOnly setting in
                            VolumeMounts. Default false.
                          type: boolean
                      required:
                      - claimName
                      type: object
                    photonPersistentDisk:
                      description: photonPersistentDisk represents a PhotonController
                        persistent disk attached and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        pdID:
                          description: pdID is the ID that identifies Photon Controller
                            persistent disk
                          type: string
                      required:
                      - pdID
                      type: object
                    portworxVolume:
                      description: portworxVolume represents a portworx volume attached
                        and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fSType represents the filesystem type to mount
                            Must be a filesystem type supported by the host operating
                            system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        volumeID:
                          description: volumeID uniquely identifies a Portworx volume
                          type: string
                      required:
                      - volumeID
                      type: object
                    projected:
                      description: projected items for all in one resources secrets,
                        configmaps, and downward API
                      properties:
                        defaultMode:
                          description: defaultMode are the mode bits used to set permissions
                            on created files by default. Must be an octal value between
                            0000 and 0777 or a decimal value between 0 and 511. YAML
                            accepts both octal and decimal values, JSON requires decimal
                            values for mode bits. Directories within the path are
                            not affected by this setting. This might be in conflict
                            with other options that affect the file mode, like fsGroup,
                            and the result can be other mode bits set.
                          format: int32
                          type: integer
                        sources:
                          description: sources is the list of volume projections
                          items:
                            description: Projection that may be projected along with
                              other supported volume types
                            properties:
                              configMap:
                                description: configMap information about the configMap
                                  data to project
                                properties:
                                  items:
                                    description: items if unspecified, each key-value
                                      pair in the Data field of the referenced ConfigMap
                                      will be projected into the volume as a file
                                      whose name is the key and content is the value.
                                      If specified, the listed keys will be projected
                                      into the specified paths, and unlisted keys
                                      will not be present. If a key is specified which
                                      is not present in the ConfigMap, the volume
                                      setup will error unless it is marked optional.
                                      Paths must be relative and may not contain the
                                      '..' path or start with '..'.
                                    items:
                                      description: Maps a string key to a path within
                                        a volume.
                                      properties:
                                        key:
                                          description: key is the key to project.
                                          type: string
                                        mode:
                                          description: 'mode is Optional: mode bits
                                            used to set permissions on this file.
                                            Must be an octal value between 0000 and
                                            0777 or a decimal value between 0 and
                                            511. YAML accepts both octal and decimal
                                            values, JSON requires decimal values for
                                            mode bits. If not specified, the volume
                                            defaultMode will be used. This might be
                                            in conflict with other options that affect
                                            the file mode, like fsGroup, and the result
                                            can be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: path is the relative path of
                                            the file to map the key to. May not be
                                            an absolute path. May not contain the
                                            path element '..'. May not start with
                                            the string '..'.
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: optional specify whether the ConfigMap
                                      or its keys must be defined
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              downwardAPI:
                                description: downwardAPI information about the downwardAPI
                                  data to project
                                properties:
                                  items:
                                    description: Items is a list of DownwardAPIVolume
                                      file
                                    items:
                                      description: DownwardAPIVolumeFile represents
                                        information to create the file containing
                                        the pod field
                                      properties:
                                        fieldRef:
                                          description: 'Required: Selects a field
                                            of the pod: only annotations, labels,
                                            name and namespace are supported.'
                                          properties:
                                            apiVersion:
                                              description: Version of the schema the
                                                FieldPath is written in terms of,
                                                defaults to "v1".
                                              type: string
                                            fieldPath:
                                              description: Path of the field to select
                                                in the specified API version.
                                              type: string
                                          required:
                                          - fieldPath
                                          type: object
                                          x-kubernetes-map-type: atomic
                                        mode:
                                          description: 'Optional: mode bits used to
                                            set permissions on this file, must be
                                            an octal value between 0000 and 0777 or
                                            a decimal value between 0 and 511. YAML
                                            accepts both octal and decimal values,
                                            JSON requires decimal values for mode
                                            bits. If not specified, the volume defaultMode
                                            will be used. This might be in conflict
                                            with other options that affect the file
                                            mode, like fsGroup, and the result can
                                            be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: 'Required: Path is  the relative
                                            path name of the file to be created. Must
                                            not be absolute or contain the ''..''
                                            path. Must be utf-8 encoded. The first
                                            item of the relative path must not start
                                            with ''..'''
                                          type: string
                                        resourceFieldRef:
                                          description: 'Selects a resource of the
                                            container: only resources limits and requests
                                            (limits.cpu, limits.memory, requests.cpu
                                            and requests.memory) are currently supported.'
                                          properties:
                                            containerName:
                                              description: 'Container name: required
                                                for volumes, optional for env vars'
                                              type: string
                                            divisor:
                                              anyOf:
                                              - type: integer
                                              - type: string
                                              description: Specifies the output format
                                                of the exposed resources, defaults
                                                to "1"
                                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                              x-kubernetes-int-or-string: true
                                            resource:
                                              description: 'Required: resource to
                                                select'
                                              type: string
                                          required:
                                          - resource
                                          type: object
                                          x-kubernetes-map-type: atomic
                                      required:
                                      - path
                                      type: object
                                    type: array
                                type: object
                              secret:
                                description: secret information about the secret data
                                  to project
                                properties:
                                  items:
                                    description: items if unspecified, each key-value
                                      pair in the Data field of the referenced Secret
                                      will be projected into the volume as a file
                                      whose name is the key and content is the value.
                                      If specified, the listed keys will be projected
                                      into the specified paths, and unlisted keys
                                      will not be present. If a key is specified which
                                      is not present in the Secret, the volume setup
                                      will error unless it is marked optional. Paths
                                      must be relative and may not contain the '..'
                                      path or start with '..'.
                                    items:
                                      description: Maps a string key to a path within
                                        a volume.
                                      properties:
                                        key:
                                          description: key is the key to project.
                                          type: string
                                        mode:
                                          description: 'mode is Optional: mode bits
                                            used to set permissions on this file.
                                            Must be an octal value between 0000 and
                                            0777 or a decimal value between 0 and
                                            511. YAML accepts both octal and decimal
                                            values, JSON requires decimal values for
                                            mode bits. If not specified, the volume
                                            defaultMode will be used. This might be
                                            in conflict with other options that affect
                                            the file mode, like fsGroup, and the result
                                            can be other mode bits set.'
                                          format: int32
                                          type: integer
                                        path:
                                          description: path is the relative path of
                                            the file to map the key to. May not be
                                            an absolute path. May not contain the
                                            path element '..'. May not start with
                                            the string '..'.
                                          type: string
                                      required:
                                      - key
                                      - path
                                      type: object
                                    type: array
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: optional field specify whether the
                                      Secret or its key must be defined
                                    type: boolean
                                type: object
                                x-kubernetes-map-type: atomic
                              serviceAccountToken:
                                description: serviceAccountToken is information about
                                  the serviceAccountToken data to project
                                properties:
                                  audience:
                                    description: audience is the intended audience
                                      of the token. A recipient of a token must identify
                                      itself with an identifier specified in the audience
                                      of the token, and otherwise should reject the
                                      token. The audience defaults to the identifier
                                      of the apiserver.
                                    type: string
                                  expirationSeconds:
                                    description: expirationSeconds is the requested
                                      duration of validity of the service account
                                      token. As the token approaches expiration, the
                                      kubelet volume plugin will proactively rotate
                                      the service account token. The kubelet will
                                      start trying to rotate the token if the token
                                      is older than 80 percent of its time to live
                                      or if the token is older than 24 hours.Defaults
                                      to 1 hour and must be at least 10 minutes.
                                    format: int64
                                    type: integer
                                  path:
                                    description: path is the path relative to the
                                      mount point of the file to project the token
                                      into.
                                    type: string
                                required:
                                - path
                                type: object
                            type: object
                          type: array
                      type: object
                    quobyte:
                      description: quobyte represents a Quobyte mount on the host
                        that shares a pod's lifetime
                      properties:
                        group:
                          description: group to map volume access to Default is no
                            group
                          type: string
                        readOnly:
                          description: readOnly here will force the Quobyte volume
                            to be mounted with read-only permissions. Defaults to
                            false.
                          type: boolean
                        registry:
                          description: registry represents a single or multiple Quobyte
                            Registry services specified as a string as host:port pair
                            (multiple entries are separated with commas) which acts
                            as the central registry for volumes
                          type: string
                        tenant:
                          description: tenant owning the given Quobyte volume in the
                            Backend Used with dynamically provisioned Quobyte volumes,
                            value is set by the plugin
                          type: string
                        user:
                          description: user to map volume access to Defaults to serivceaccount
                            user
                          type: string
                        volume:
                          description: volume is a string that references an already
                            created Quobyte volume by name.
                          type: string
                      required:
                      - registry
                      - volume
                      type: object
                    rbd:
                      description: 'rbd represents a Rados Block Device mount on the
                        host that shares a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
                      properties:
                        fsType:
                          description: 'fsType is the filesystem type of the volume
                            that you want to mount. Tip: Ensure that the filesystem
                            type is supported by the host operating system. Examples:
                            "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                            TODO: how do we prevent errors in the filesystem from
                            compromising the machine'
                          type: string
                        image:
                          description: 'image is the rados image name. More info:
                            https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        keyring:
                          description: 'keyring is the path to key ring for RBDUser.
                            Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        monitors:
                          description: 'monitors is a collection of Ceph monitors.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          items:
                            type: string
                          type: array
                        pool:
                          description: 'pool is the rados pool name. Default is rbd.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                        readOnly:
                          description: 'readOnly here will force the ReadOnly setting
                            in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: boolean
                        secretRef:
                          description: 'secretRef is name of the authentication secret
                            for RBDUser. If provided overrides keyring. Default is
                            nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        user:
                          description: 'user is the rados user name. Default is admin.
                            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
                          type: string
                      required:
                      - image
                      - monitors
                      type: object
                    scaleIO:
                      description: scaleIO represents a ScaleIO persistent volume
                        attached and mounted on Kubernetes nodes.
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                          type: string
                        gateway:
                          description: gateway is the host address of the ScaleIO
                            API Gateway.
                          type: string
                        protectionDomain:
                          description: protectionDomain is the name of the ScaleIO
                            Protection Domain for the configured storage.
                          type: string
                        readOnly:
                          description: readOnly Defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretRef:
                          description: secretRef references to the secret for ScaleIO
                            user and other sensitive information. If this is not provided,
                            Login operation will fail.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        sslEnabled:
                          description: sslEnabled Flag enable/disable SSL communication
                            with Gateway, default false
                          type: boolean
                        storageMode:
                          description: storageMode indicates whether the storage for
                            a volume should be ThickProvisioned or ThinProvisioned.
                            Default is ThinProvisioned.
                          type: string
                        storagePool:
                          description: storagePool is the ScaleIO Storage Pool associated
                            with the protection domain.
                          type: string
                        system:
                          description: system is the name of the storage system as
                            configured in ScaleIO.
                          type: string
                        volumeName:
                          description: volumeName is the name of a volume already
                            created in the ScaleIO system that is associated with
                            this volume source.
                          type: string
                      required:
                      - gateway
                      - secretRef
                      - system
                      type: object
                    secret:
                      description: 'secret represents a secret that should populate
                        this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                      properties:
                        defaultMode:
                          description: 'defaultMode is Optional: mode bits used to
                            set permissions on created files by default. Must be an
                            octal value between 0000 and 0777 or a decimal value between
                            0 and 511. YAML accepts both octal and decimal values,
                            JSON requires decimal values for mode bits. Defaults to
                            0644. Directories within the path are not affected by
                            this setting. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        items:
                          description: items If unspecified, each key-value pair in
                            the Data field of the referenced Secret will be projected
                            into the volume as a file whose name is the key and content
                            is the value. If specified, the listed keys will be projected
                            into the specified paths, and unlisted keys will not be
                            present. If a key is specified which is not present in
                            the Secret, the volume setup will error unless it is marked
                            optional. Paths must be relative and may not contain the
                            '..' path or start with '..'.
                          items:
                            description: Maps a string key to a path within a volume.
                            properties:
                              key:
                                description: key is the key to project.
                                type: string
                              mode:
                                description: 'mode is Optional: mode bits used to
                                  set permissions on this file. Must be an octal value
                                  between 0000 and 0777 or a decimal value between
                                  0 and 511. YAML accepts both octal and decimal values,
                                  JSON requires decimal values for mode bits. If not
                                  specified, the volume defaultMode will be used.
                                  This might be in conflict with other options that
                                  affect the file mode, like fsGroup, and the result
                                  can be other mode bits set.'
                                format: int32
                                type: integer
                              path:
                                description: path is the relative path of the file
                                  to map the key to. May not be an absolute path.
                                  May not contain the path element '..'. May not start
                                  with the string '..'.
                                type: string
                            required:
                            - key
                            - path
                            type: object
                          type: array
                        optional:
                          description: optional field specify whether the Secret or
                            its keys must be defined
                          type: boolean
                        secretName:
                          description: 'secretName is the name of the secret in the
                            pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                          type: string
                      type: object
                    storageos:
                      description: storageOS represents a StorageOS volume attached
                        and mounted on Kubernetes nodes.
                      properties:
                        fsType:
                          description: fsType is the filesystem type to mount. Must
                            be a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        readOnly:
                          description: readOnly defaults to false (read/write). ReadOnly
                            here will force the ReadOnly setting in VolumeMounts.
                          type: boolean
                        secretRef:
                          description: secretRef specifies the secret to use for obtaining
                            the StorageOS API credentials.  If not specified, default
                            values will be attempted.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                          x-kubernetes-map-type: atomic
                        volumeName:
                          description: volumeName is the human-readable name of the
                            StorageOS volume.  Volume names are only unique within
                            a namespace.
                          type: string
                        volumeNamespace:
                          description: volumeNamespace specifies the scope of the
                            volume within StorageOS.  If no namespace is specified
                            then the Pod's namespace will be used.  This allows the
                            Kubernetes name scoping to be mirrored within StorageOS
                            for tighter integration. Set VolumeName to any name to
                            override the default behaviour. Set to "default" if you
                            are not using namespaces within StorageOS. Namespaces
                            that do not pre-exist within StorageOS will be created.
                          type: string
                      type: object
                    vsphereVolume:
                      description: vsphereVolume represents a vSphere volume attached
                        and mounted on kubelets host machine
                      properties:
                        fsType:
                          description: fsType is filesystem type to mount. Must be
                            a filesystem type supported by the host operating system.
                            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4"
                            if unspecified.
                          type: string
                        storagePolicyID:
                          description: storagePolicyID is the storage Policy Based
                            Management (SPBM) profile ID associated with the StoragePolicyName.
                          type: string
                        storagePolicyName:
                          description: storagePolicyName is the storage Policy Based
                            Management (SPBM) profile name.
                          type: string
                        volumePath:
                          description: volumePath is the path that identifies vSphere
                            volume vmdk
                          type: string
                      required:
                      - volumePath
                      type: object
                  required:
                  - name
                  type: object
                type: array
            required:
            - compDef
            - replicas
            type: object
          status:
            description: ComponentStatus represents the observed state of a Component
              within the Cluster.
            properties:
              conditions:
                description: "Represents a list of detailed status of the Component
                  object. Each condition in the list provides real-time information
                  about certain aspect of the Component object. \n This field is crucial
                  for administrators and developers to monitor and respond to changes
                  within the Component. It provides a history of state transitions
                  and a snapshot of the current state that can be used for automated
                  logic or direct inspection."
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              message:
                additionalProperties:
                  type: string
                description: "A map that stores detailed message about the Component.
                  Each entry in the map provides insights into specific elements of
                  the Component, such as Pods or workloads. \n Keys in this map are
                  formatted as `ObjectKind/Name`, where `ObjectKind` could be a type
                  like Pod, and `Name` is the specific name of the object."
                type: object
              observedGeneration:
                description: Specifies the most recent generation observed for this
                  Component object.
                format: int64
                type: integer
              phase:
                description: "Indicates the current phase of the Component, with each
                  phase indicating specific conditions: \n - Creating: The initial
                  phase for new Components, transitioning from 'empty'(\"\"). - Running:
                  All Pods in a Running state. - Updating: The Component is currently
                  being updated, with no failed Pods present. - Abnormal: Some Pods
                  have failed, indicating a potentially unstable state. However, the
                  cluster remains available as long as a quorum of members is functioning.
                  - Failed: A significant number of Pods or critical Pods have failed
                  The cluster may be non-functional or may offer only limited services
                  (e.g, read-only). - Stopping: All Pods are being terminated, with
                  current replica count at zero. - Stopped: All associated Pods have
                  been successfully deleted. - Deleting: The Component is being deleted."
                enum:
                - Creating
                - Running
                - Updating
                - Stopping
                - Stopped
                - Deleting
                - Failed
                - Abnormal
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
