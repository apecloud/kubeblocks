apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.1
  labels:
    app.kubernetes.io/name: kubeblocks
  name: configconstraints.apps.kubeblocks.io
spec:
  group: apps.kubeblocks.io
  names:
    categories:
    - kubeblocks
    kind: ConfigConstraint
    listKind: ConfigConstraintList
    plural: configconstraints
    shortNames:
    - cc
    singular: configconstraint
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: status phase
      jsonPath: .status.phase
      name: PHASE
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "ConfigConstraint manages the parameters across multiple configuration
          files contained in a single configure template. These configuration files
          should have the same format (e.g. ini, xml, properties, json). \n It provides
          the following functionalities: \n 1. **Parameter Value Validation**: Validates
          and ensures compliance of parameter values with defined constraints. 2.
          **Dynamic Reload on Modification**: Monitors parameter changes and triggers
          dynamic reloads to apply updates. 3. **Parameter Rendering in Templates**:
          Injects parameters into templates to generate up-to-date configuration files."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConfigConstraintSpec defines the desired state of ConfigConstraint
            properties:
              cfgSchemaTopLevelName:
                description: Specifies the top-level key in the 'configurationSchema.cue'
                  that organizes the validation rules for parameters. This key must
                  exist within the CUE script defined in 'configurationSchema.cue'.
                type: string
              configurationSchema:
                description: Defines a list of parameters including their names, default
                  values, descriptions, types, and constraints (permissible values
                  or the range of valid values).
                properties:
                  cue:
                    description: "Hold a string that contains a script written in
                      CUE language that defines a list of configuration items. Each
                      item is detailed with its name, default value, description,
                      type (e.g. string, integer, float), and constraints (permissible
                      values or the valid range of values). \n CUE (Configure, Unify,
                      Execute) is a declarative language designed for defining and
                      validating complex data configurations. It is particularly useful
                      in environments like K8s where complex configurations and validation
                      rules are common. \n This script functions as a validator for
                      user-provided configurations, ensuring compliance with the established
                      specifications and constraints."
                    type: string
                  schema:
                    description: Generated from the 'cue' field and transformed into
                      a JSON format.
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              downwardAPIOptions:
                description: "Specifies a list of actions to execute specified commands
                  based on Pod labels. \n It utilizes the K8s Downward API to mount
                  label information as a volume into the pod. The 'config-manager'
                  sidecar container watches for changes in the role label and dynamically
                  invoke registered commands (usually execute some SQL statements)
                  when a change is detected. \n It is designed for scenarios where:
                  \n - Replicas with different roles have different configurations,
                  such as Redis primary & secondary replicas. - After a role switch
                  (e.g., from secondary to primary), some changes in configuration
                  are needed to reflect the new role."
                items:
                  description: DownwardAPIChangeTriggeredAction defines an action
                    that triggers specific commands in response to changes in Pod
                    labels. For example, a command might be executed when the 'role'
                    label of the Pod is updated.
                  properties:
                    command:
                      description: Specifies the command to be triggered when changes
                        are detected in Downward API volume files. It relies on the
                        inotify mechanism in the config-manager sidecar to monitor
                        file changes.
                      items:
                        type: string
                      type: array
                    items:
                      description: Represents a list of files under the Downward API
                        volume.
                      items:
                        description: DownwardAPIVolumeFile represents information
                          to create the file containing the pod field
                        properties:
                          fieldRef:
                            description: 'Required: Selects a field of the pod: only
                              annotations, labels, name and namespace are supported.'
                            properties:
                              apiVersion:
                                description: Version of the schema the FieldPath is
                                  written in terms of, defaults to "v1".
                                type: string
                              fieldPath:
                                description: Path of the field to select in the specified
                                  API version.
                                type: string
                            required:
                            - fieldPath
                            type: object
                            x-kubernetes-map-type: atomic
                          mode:
                            description: 'Optional: mode bits used to set permissions
                              on this file, must be an octal value between 0000 and
                              0777 or a decimal value between 0 and 511. YAML accepts
                              both octal and decimal values, JSON requires decimal
                              values for mode bits. If not specified, the volume defaultMode
                              will be used. This might be in conflict with other options
                              that affect the file mode, like fsGroup, and the result
                              can be other mode bits set.'
                            format: int32
                            type: integer
                          path:
                            description: 'Required: Path is  the relative path name
                              of the file to be created. Must not be absolute or contain
                              the ''..'' path. Must be utf-8 encoded. The first item
                              of the relative path must not start with ''..'''
                            type: string
                          resourceFieldRef:
                            description: 'Selects a resource of the container: only
                              resources limits and requests (limits.cpu, limits.memory,
                              requests.cpu and requests.memory) are currently supported.'
                            properties:
                              containerName:
                                description: 'Container name: required for volumes,
                                  optional for env vars'
                                type: string
                              divisor:
                                anyOf:
                                - type: integer
                                - type: string
                                description: Specifies the output format of the exposed
                                  resources, defaults to "1"
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              resource:
                                description: 'Required: resource to select'
                                type: string
                            required:
                            - resource
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - path
                        type: object
                      type: array
                    mountPoint:
                      description: Specifies the mount point of the Downward API volume.
                      maxLength: 128
                      type: string
                    name:
                      description: Specifies the name of the field. It must be a string
                        of maximum length 63. The name should match the regex pattern
                        `^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$`.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    scriptConfig:
                      description: ScriptConfig object specifies a ConfigMap that
                        contains script files that should be mounted inside the pod.
                        The scripts are mounted as volumes and can be referenced and
                        executed by the DownwardAction to perform specific tasks or
                        configurations.
                      properties:
                        namespace:
                          default: default
                          description: Specifies the namespace for the ConfigMap.
                            If not specified, it defaults to the "default" namespace.
                          maxLength: 63
                          pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                          type: string
                        scriptConfigMapRef:
                          description: Specifies the reference to the ConfigMap containing
                            the scripts.
                          type: string
                      required:
                      - scriptConfigMapRef
                      type: object
                  required:
                  - items
                  - mountPoint
                  - name
                  type: object
                type: array
              dynamicActionCanBeMerged:
                description: "Indicates whether to consolidate dynamic reload and
                  restart actions into a single restart. \n - If true, updates requiring
                  both actions will result in only a restart, merging the actions.
                  - If false, updates will trigger both actions executed sequentially:
                  first dynamic reload, then restart. \n This flag allows for more
                  efficient handling of configuration changes by potentially eliminating
                  an unnecessary reload step."
                type: boolean
              dynamicParameters:
                description: List dynamic parameters. Modifications to these parameters
                  trigger a configuration reload without requiring a process restart.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              formatterConfig:
                description: "Specifies the format of the configuration file and any
                  associated parameters that are specific to the chosen format. Supported
                  formats include `ini`, `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties`,
                  and `toml`. \n Each format may have its own set of parameters that
                  can be configured. For instance, when using the `ini` format, you
                  can specify the section name. \n Example: ``` formatterConfig: format:
                  ini iniConfig: sectionName: mysqld ```"
                properties:
                  format:
                    description: "The config file format. Valid values are `ini`,
                      `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties` and `toml`.
                      Each format has its own characteristics and use cases. \n -
                      ini: is a text-based content with a structure and syntax comprising
                      key–value pairs for properties, reference wiki: https://en.wikipedia.org/wiki/INI_file
                      - xml: refers to wiki: https://en.wikipedia.org/wiki/XML - yaml:
                      supports for complex data types and structures. - json: refers
                      to wiki: https://en.wikipedia.org/wiki/JSON - hcl: The HashiCorp
                      Configuration Language (HCL) is a configuration language authored
                      by HashiCorp, reference url: https://www.linode.com/docs/guides/introduction-to-hcl/
                      - dotenv: is a plain text file with simple key–value pairs,
                      reference wiki: https://en.wikipedia.org/wiki/Configuration_file#MS-DOS
                      - properties: a file extension mainly used in Java, reference
                      wiki: https://en.wikipedia.org/wiki/.properties - toml: refers
                      to wiki: https://en.wikipedia.org/wiki/TOML - props-plus: a
                      file extension mainly used in Java, supports CamelCase(e.g:
                      brokerMaxConnectionsPerIp)"
                    enum:
                    - xml
                    - ini
                    - yaml
                    - json
                    - hcl
                    - dotenv
                    - toml
                    - properties
                    - redis
                    - props-plus
                    type: string
                  iniConfig:
                    description: Holds options specific to the 'ini' file format.
                    properties:
                      sectionName:
                        description: A string that describes the name of the ini section.
                        type: string
                    type: object
                required:
                - format
                type: object
              immutableParameters:
                description: Lists the parameters that cannot be modified once set.
                  Attempting to change any of these parameters will be ignored.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              reloadOptions:
                description: "Specifies the dynamic reload action supported by the
                  engine. When set, the controller executes the method defined here
                  to execute hot parameter updates. \n Dynamic reloading is triggered
                  only if both of the following conditions are met: \n 1. The modified
                  parameters are listed in the `dynamicParameters` field. If `reloadStaticParamsBeforeRestart`
                  is set to true, modifications to `staticParameters` can also trigger
                  a reload. 2. `reloadOptions` is set. \n If `reloadOptions` is not
                  set or the modified parameters are not listed in `dynamicParameters`,
                  dynamic reloading will not be triggered. \n Example: ```yaml reloadOptions:
                  tplScriptTrigger: namespace: kb-system scriptConfigMapRef: mysql-reload-script
                  sync: true ```"
                properties:
                  autoTrigger:
                    description: Automatically perform the reload when specified conditions
                      are met.
                    properties:
                      processName:
                        description: The name of the process.
                        type: string
                    type: object
                  shellTrigger:
                    description: Allows to execute a custom shell script to reload
                      the process.
                    properties:
                      batchParamsFormatterTemplate:
                        description: "Specifies a Go template string for formatting
                          batch input data. It's used when `batchReload` is 'True'
                          to format data passed into STDIN of the script. The template
                          accesses key-value pairs of updated parameters via the '$'
                          variable. This allows for custom formatting of the input
                          data. \n Example template: \n ```yaml batchParamsFormatterTemplate:
                          |- {{- range $pKey, $pValue := $ }} {{ printf \"%s:%s\"
                          $pKey $pValue }} {{- end }} ``` \n This example generates
                          batch input data in a key:value format, sorted by keys.
                          ``` key1:value1 key2:value2 key3:value3 ``` \n If not specified,
                          the default format is key=value, sorted by keys, for each
                          updated parameter. ``` key1=value1 key2=value2 key3=value3
                          ```"
                        type: string
                      batchReload:
                        description: "Controls whether parameter updates are processed
                          individually or collectively in a batch: \n - 'True': Processes
                          all changes in one batch reload. - 'False': Processes each
                          change individually. \n Defaults to 'False' if unspecified."
                        type: boolean
                      command:
                        description: Specifies the command to execute in order to
                          reload the process. It should be a valid shell command.
                        items:
                          type: string
                        type: array
                      scriptConfig:
                        description: ScriptConfig object specifies a ConfigMap that
                          contains script files that should be mounted inside the
                          pod. The scripts are mounted as volumes and can be referenced
                          and executed by the dynamic reload.
                        properties:
                          namespace:
                            default: default
                            description: Specifies the namespace for the ConfigMap.
                              If not specified, it defaults to the "default" namespace.
                            maxLength: 63
                            pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                            type: string
                          scriptConfigMapRef:
                            description: Specifies the reference to the ConfigMap
                              containing the scripts.
                            type: string
                        required:
                        - scriptConfigMapRef
                        type: object
                      sync:
                        description: "Determines the synchronization mode of parameter
                          updates with \"config-manager\". \n - 'True': Executes reload
                          actions synchronously, pausing until completion. - 'False':
                          Executes reload actions asynchronously, without waiting
                          for completion."
                        type: boolean
                      toolsSetup:
                        description: "Specifies the tools container image used by
                          ShellTrigger for dynamic reload. If the dynamic reload action
                          is triggered by a ShellTrigger, this field is required.
                          This image must contain all necessary tools for executing
                          the ShellTrigger scripts. \n Usually the specified image
                          is referenced by the init container, which is then responsible
                          for copy the tools from the image to a bin volume. This
                          ensures that the tools are available to the 'config-manager'
                          sidecar."
                        properties:
                          mountPoint:
                            description: Specifies the directory path in the container
                              where the tools-related files are to be copied. This
                              field is typically used with an emptyDir volume to ensure
                              a temporary, empty directory is provided at pod creation.
                            maxLength: 128
                            type: string
                          toolConfigs:
                            description: Specifies a list of settings of init containers
                              that prepare tools for dynamic reload.
                            items:
                              description: ToolConfig specifies the settings of an
                                init container that prepare tools for dynamic reload.
                              properties:
                                asContainerImage:
                                  description: "Indicates whether the tool image should
                                    be used as the container image for a sidecar.
                                    This is useful for large tool images, such as
                                    those for C++ tools, which may depend on numerous
                                    libraries (e.g., *.so files). \n If enabled, the
                                    tool image is deployed as a sidecar container
                                    image. \n Examples: ```yaml toolsSetup:: mountPoint:
                                    /kb_tools toolConfigs: - name: kb-tools asContainerImage:
                                    true image:  apecloud/oceanbase:4.2.0.0-100010032023083021
                                    ``` \n generated containers: ```yaml initContainers:
                                    - name: install-config-manager-tool image: apecloud/kubeblocks-tools:${version}
                                    command: - cp - /bin/config_render - /opt/tools
                                    volumemounts: - name: kb-tools mountpath: /opt/tools
                                    \n containers: - name: config-manager image: apecloud/oceanbase:4.2.0.0-100010032023083021
                                    imagePullPolicy: IfNotPresent command: - /opt/tools/reloader
                                    - --log-level - info - --operator-update-enable
                                    - --tcp - \"9901\" - --config - /opt/config-manager/config-manager.yaml
                                    volumemounts: - name: kb-tools mountpath: /opt/tools
                                    ```"
                                  type: boolean
                                command:
                                  description: Specifies the command to be executed
                                    by the init container.
                                  items:
                                    type: string
                                  type: array
                                image:
                                  description: Specifies the tool container image.
                                  type: string
                                name:
                                  description: Specifies the name of the init container.
                                  maxLength: 63
                                  pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                                  type: string
                              type: object
                            type: array
                        required:
                        - mountPoint
                        type: object
                    required:
                    - command
                    type: object
                  tplScriptTrigger:
                    description: Enables reloading process using a Go template script.
                    properties:
                      namespace:
                        default: default
                        description: Specifies the namespace for the ConfigMap. If
                          not specified, it defaults to the "default" namespace.
                        maxLength: 63
                        pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                        type: string
                      scriptConfigMapRef:
                        description: Specifies the reference to the ConfigMap containing
                          the scripts.
                        type: string
                      sync:
                        description: "Determines whether parameter updates should
                          be synchronized with the \"config-manager\". Specifies the
                          controller's reload strategy: \n - If set to 'True', the
                          controller executes the reload action in synchronous mode,
                          pausing execution until the reload completes. - If set to
                          'False', the controller executes the reload action in asynchronous
                          mode, updating the ConfigMap without waiting for the reload
                          process to finish."
                        type: boolean
                    required:
                    - scriptConfigMapRef
                    type: object
                  unixSignalTrigger:
                    description: Used to trigger a reload by sending a specific Unix
                      signal to the process.
                    properties:
                      processName:
                        description: Identifies the name of the process to which the
                          Unix signal will be sent.
                        type: string
                      signal:
                        description: 'Specifies a valid Unix signal to be sent. For
                          a comprehensive list of all Unix signals, see: ../../pkg/configuration/configmap/handler.go:allUnixSignals'
                        enum:
                        - SIGHUP
                        - SIGINT
                        - SIGQUIT
                        - SIGILL
                        - SIGTRAP
                        - SIGABRT
                        - SIGBUS
                        - SIGFPE
                        - SIGKILL
                        - SIGUSR1
                        - SIGSEGV
                        - SIGUSR2
                        - SIGPIPE
                        - SIGALRM
                        - SIGTERM
                        - SIGSTKFLT
                        - SIGCHLD
                        - SIGCONT
                        - SIGSTOP
                        - SIGTSTP
                        - SIGTTIN
                        - SIGTTOU
                        - SIGURG
                        - SIGXCPU
                        - SIGXFSZ
                        - SIGVTALRM
                        - SIGPROF
                        - SIGWINCH
                        - SIGIO
                        - SIGPWR
                        - SIGSYS
                        type: string
                    required:
                    - processName
                    - signal
                    type: object
                type: object
              reloadStaticParamsBeforeRestart:
                description: "Configures whether the dynamic reload specified in `reloadOptions`
                  applies only to dynamic parameters or to all parameters (including
                  static parameters). \n - false (default): Only modifications to
                  the dynamic parameters listed in `dynamicParameters` will trigger
                  a dynamic reload. - true: Modifications to both dynamic parameters
                  listed in `dynamicParameters` and static parameters listed in `staticParameters`
                  will trigger a dynamic reload. The \"true\" option is for certain
                  engines that require static parameters to be set via SQL statements
                  before they can take effect on restart."
                type: boolean
              scriptConfigs:
                description: "A list of ScriptConfig Object. \n Each ScriptConfig
                  object specifies a ConfigMap that contains script files that should
                  be mounted inside the pod. The scripts are mounted as volumes and
                  can be referenced and executed by the dynamic reload and DownwardAction
                  to perform specific tasks or configurations."
                items:
                  properties:
                    namespace:
                      default: default
                      description: Specifies the namespace for the ConfigMap. If not
                        specified, it defaults to the "default" namespace.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                      type: string
                    scriptConfigMapRef:
                      description: Specifies the reference to the ConfigMap containing
                        the scripts.
                      type: string
                  required:
                  - scriptConfigMapRef
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - scriptConfigMapRef
                x-kubernetes-list-type: map
              selector:
                description: "Used to match labels on the pod to determine whether
                  a dynamic reload should be performed. \n In some scenarios, only
                  specific pods (e.g., primary replicas) need to undergo a dynamic
                  reload. The `selector` allows you to specify label selectors to
                  target the desired pods for the reload process. \n If the `selector`
                  is not specified or is nil, all pods managed by the workload will
                  be considered for the dynamic reload."
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              staticParameters:
                description: List static parameters. Modifications to any of these
                  parameters require a restart of the process to take effect.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              toolsImageSpec:
                description: "Specifies the tools container image used by ShellTrigger
                  for dynamic reload. If the dynamic reload action is triggered by
                  a ShellTrigger, this field is required. This image must contain
                  all necessary tools for executing the ShellTrigger scripts. \n Usually
                  the specified image is referenced by the init container, which is
                  then responsible for copy the tools from the image to a bin volume.
                  This ensures that the tools are available to the 'config-manager'
                  sidecar."
                properties:
                  mountPoint:
                    description: Specifies the directory path in the container where
                      the tools-related files are to be copied. This field is typically
                      used with an emptyDir volume to ensure a temporary, empty directory
                      is provided at pod creation.
                    maxLength: 128
                    type: string
                  toolConfigs:
                    description: Specifies a list of settings of init containers that
                      prepare tools for dynamic reload.
                    items:
                      description: ToolConfig specifies the settings of an init container
                        that prepare tools for dynamic reload.
                      properties:
                        asContainerImage:
                          description: "Indicates whether the tool image should be
                            used as the container image for a sidecar. This is useful
                            for large tool images, such as those for C++ tools, which
                            may depend on numerous libraries (e.g., *.so files). \n
                            If enabled, the tool image is deployed as a sidecar container
                            image. \n Examples: ```yaml toolsSetup:: mountPoint: /kb_tools
                            toolConfigs: - name: kb-tools asContainerImage: true image:
                            \ apecloud/oceanbase:4.2.0.0-100010032023083021 ``` \n
                            generated containers: ```yaml initContainers: - name:
                            install-config-manager-tool image: apecloud/kubeblocks-tools:${version}
                            command: - cp - /bin/config_render - /opt/tools volumemounts:
                            - name: kb-tools mountpath: /opt/tools \n containers:
                            - name: config-manager image: apecloud/oceanbase:4.2.0.0-100010032023083021
                            imagePullPolicy: IfNotPresent command: - /opt/tools/reloader
                            - --log-level - info - --operator-update-enable - --tcp
                            - \"9901\" - --config - /opt/config-manager/config-manager.yaml
                            volumemounts: - name: kb-tools mountpath: /opt/tools ```"
                          type: boolean
                        command:
                          description: Specifies the command to be executed by the
                            init container.
                          items:
                            type: string
                          type: array
                        image:
                          description: Specifies the tool container image.
                          type: string
                        name:
                          description: Specifies the name of the init container.
                          maxLength: 63
                          pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                          type: string
                      type: object
                    type: array
                required:
                - mountPoint
                type: object
            required:
            - formatterConfig
            type: object
          status:
            description: ConfigConstraintStatus represents the observed state of a
              ConfigConstraint.
            properties:
              message:
                description: Provides descriptions for abnormal states.
                type: string
              observedGeneration:
                description: Refers to the most recent generation observed for this
                  ConfigConstraint. This value is updated by the API Server.
                format: int64
                type: integer
              phase:
                description: Specifies the status of the configuration template. When
                  set to CCAvailablePhase, the ConfigConstraint can be referenced
                  by ClusterDefinition or ClusterVersion.
                enum:
                - Available
                - Unavailable
                - Deleting
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: status phase
      jsonPath: .status.phase
      name: PHASE
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: "ConfigConstraint manages the parameters across multiple configuration
          files contained in a single configure template. These configuration files
          should have the same format (e.g. ini, xml, properties, json). \n It provides
          the following functionalities: \n 1. **Parameter Value Validation**: Validates
          and ensures compliance of parameter values with defined constraints. 2.
          **Dynamic Reload on Modification**: Monitors parameter changes and triggers
          dynamic reloads to apply updates. 3. **Parameter Rendering in Templates**:
          Injects parameters into templates to generate up-to-date configuration files."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConfigConstraintSpec defines the desired state of ConfigConstraint
            properties:
              downwardAPIChangeTriggeredActions:
                description: "TODO: migrate DownwardAPITriggeredActions to ComponentDefinition.spec.lifecycleActions
                  Specifies a list of actions to execute specified commands based
                  on Pod labels. \n It utilizes the K8s Downward API to mount label
                  information as a volume into the pod. The 'config-manager' sidecar
                  container watches for changes in the role label and dynamically
                  invoke registered commands (usually execute some SQL statements)
                  when a change is detected. \n It is designed for scenarios where:
                  \n - Replicas with different roles have different configurations,
                  such as Redis primary & secondary replicas. - After a role switch
                  (e.g., from secondary to primary), some changes in configuration
                  are needed to reflect the new role."
                items:
                  description: DownwardAPIChangeTriggeredAction defines an action
                    that triggers specific commands in response to changes in Pod
                    labels. For example, a command might be executed when the 'role'
                    label of the Pod is updated.
                  properties:
                    command:
                      description: Specifies the command to be triggered when changes
                        are detected in Downward API volume files. It relies on the
                        inotify mechanism in the config-manager sidecar to monitor
                        file changes.
                      items:
                        type: string
                      type: array
                    items:
                      description: Represents a list of files under the Downward API
                        volume.
                      items:
                        description: DownwardAPIVolumeFile represents information
                          to create the file containing the pod field
                        properties:
                          fieldRef:
                            description: 'Required: Selects a field of the pod: only
                              annotations, labels, name and namespace are supported.'
                            properties:
                              apiVersion:
                                description: Version of the schema the FieldPath is
                                  written in terms of, defaults to "v1".
                                type: string
                              fieldPath:
                                description: Path of the field to select in the specified
                                  API version.
                                type: string
                            required:
                            - fieldPath
                            type: object
                            x-kubernetes-map-type: atomic
                          mode:
                            description: 'Optional: mode bits used to set permissions
                              on this file, must be an octal value between 0000 and
                              0777 or a decimal value between 0 and 511. YAML accepts
                              both octal and decimal values, JSON requires decimal
                              values for mode bits. If not specified, the volume defaultMode
                              will be used. This might be in conflict with other options
                              that affect the file mode, like fsGroup, and the result
                              can be other mode bits set.'
                            format: int32
                            type: integer
                          path:
                            description: 'Required: Path is  the relative path name
                              of the file to be created. Must not be absolute or contain
                              the ''..'' path. Must be utf-8 encoded. The first item
                              of the relative path must not start with ''..'''
                            type: string
                          resourceFieldRef:
                            description: 'Selects a resource of the container: only
                              resources limits and requests (limits.cpu, limits.memory,
                              requests.cpu and requests.memory) are currently supported.'
                            properties:
                              containerName:
                                description: 'Container name: required for volumes,
                                  optional for env vars'
                                type: string
                              divisor:
                                anyOf:
                                - type: integer
                                - type: string
                                description: Specifies the output format of the exposed
                                  resources, defaults to "1"
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              resource:
                                description: 'Required: resource to select'
                                type: string
                            required:
                            - resource
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - path
                        type: object
                      type: array
                    mountPoint:
                      description: Specifies the mount point of the Downward API volume.
                      maxLength: 128
                      type: string
                    name:
                      description: Specifies the name of the field. It must be a string
                        of maximum length 63. The name should match the regex pattern
                        `^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$`.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    scriptConfig:
                      description: ScriptConfig object specifies a ConfigMap that
                        contains script files that should be mounted inside the pod.
                        The scripts are mounted as volumes and can be referenced and
                        executed by the DownwardAction to perform specific tasks or
                        configurations.
                      properties:
                        namespace:
                          default: default
                          description: Specifies the namespace for the ConfigMap.
                            If not specified, it defaults to the "default" namespace.
                          maxLength: 63
                          pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                          type: string
                        scriptConfigMapRef:
                          description: Specifies the reference to the ConfigMap containing
                            the scripts.
                          type: string
                      required:
                      - scriptConfigMapRef
                      type: object
                  required:
                  - items
                  - mountPoint
                  - name
                  type: object
                type: array
              dynamicParameters:
                description: List dynamic parameters. Modifications to these parameters
                  trigger a configuration reload without requiring a process restart.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              fileFormatConfig:
                description: "Specifies the format of the configuration file and any
                  associated parameters that are specific to the chosen format. Supported
                  formats include `ini`, `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties`,
                  and `toml`. \n Each format may have its own set of parameters that
                  can be configured. For instance, when using the `ini` format, you
                  can specify the section name. \n Example: ``` fileFormatConfig:
                  format: ini iniConfig: sectionName: mysqld ```"
                properties:
                  format:
                    description: "The config file format. Valid values are `ini`,
                      `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties` and `toml`.
                      Each format has its own characteristics and use cases. \n -
                      ini: is a text-based content with a structure and syntax comprising
                      key–value pairs for properties, reference wiki: https://en.wikipedia.org/wiki/INI_file
                      - xml: refers to wiki: https://en.wikipedia.org/wiki/XML - yaml:
                      supports for complex data types and structures. - json: refers
                      to wiki: https://en.wikipedia.org/wiki/JSON - hcl: The HashiCorp
                      Configuration Language (HCL) is a configuration language authored
                      by HashiCorp, reference url: https://www.linode.com/docs/guides/introduction-to-hcl/
                      - dotenv: is a plain text file with simple key–value pairs,
                      reference wiki: https://en.wikipedia.org/wiki/Configuration_file#MS-DOS
                      - properties: a file extension mainly used in Java, reference
                      wiki: https://en.wikipedia.org/wiki/.properties - toml: refers
                      to wiki: https://en.wikipedia.org/wiki/TOML - props-plus: a
                      file extension mainly used in Java, supports CamelCase(e.g:
                      brokerMaxConnectionsPerIp)"
                    enum:
                    - xml
                    - ini
                    - yaml
                    - json
                    - hcl
                    - dotenv
                    - toml
                    - properties
                    - redis
                    - props-plus
                    type: string
                  iniConfig:
                    description: Holds options specific to the 'ini' file format.
                    properties:
                      sectionName:
                        description: A string that describes the name of the ini section.
                        type: string
                    type: object
                required:
                - format
                type: object
              immutableParameters:
                description: Lists the parameters that cannot be modified once set.
                  Attempting to change any of these parameters will be ignored.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              mergeReloadAndRestart:
                description: "Indicates whether to consolidate dynamic reload and
                  restart actions into a single restart. \n - If true, updates requiring
                  both actions will result in only a restart, merging the actions.
                  - If false, updates will trigger both actions executed sequentially:
                  first dynamic reload, then restart. \n This flag allows for more
                  efficient handling of configuration changes by potentially eliminating
                  an unnecessary reload step."
                type: boolean
              parametersSchema:
                description: Defines a list of parameters including their names, default
                  values, descriptions, types, and constraints (permissible values
                  or the range of valid values).
                properties:
                  cue:
                    description: "Hold a string that contains a script written in
                      CUE language that defines a list of configuration items. Each
                      item is detailed with its name, default value, description,
                      type (e.g. string, integer, float), and constraints (permissible
                      values or the valid range of values). \n CUE (Configure, Unify,
                      Execute) is a declarative language designed for defining and
                      validating complex data configurations. It is particularly useful
                      in environments like K8s where complex configurations and validation
                      rules are common. \n This script functions as a validator for
                      user-provided configurations, ensuring compliance with the established
                      specifications and constraints."
                    type: string
                  schemaInJSON:
                    description: Generated from the 'cue' field and transformed into
                      a JSON format.
                    x-kubernetes-preserve-unknown-fields: true
                  topLevelKey:
                    description: Specifies the top-level key in the 'configSchema.cue'
                      that organizes the validation rules for parameters. This key
                      must exist within the CUE script defined in 'configSchema.cue'.
                    type: string
                type: object
              reloadAction:
                description: "Specifies the dynamic reload (dynamic reconfiguration)
                  actions supported by the engine. When set, the controller executes
                  the scripts defined in these actions to handle dynamic parameter
                  updates. \n Dynamic reloading is triggered only if both of the following
                  conditions are met: \n 1. The modified parameters are listed in
                  the `dynamicParameters` field. If `dynamicParameterSelectedPolicy`
                  is set to \"all\", modifications to `staticParameters` can also
                  trigger a reload. 2. `reloadAction` is set. \n If `reloadAction`
                  is not set or the modified parameters are not listed in `dynamicParameters`,
                  dynamic reloading will not be triggered. \n Example: ```yaml dynamicReloadAction:
                  tplScriptTrigger: namespace: kb-system scriptConfigMapRef: mysql-reload-script
                  sync: true ```"
                properties:
                  autoTrigger:
                    description: Automatically perform the reload when specified conditions
                      are met.
                    properties:
                      processName:
                        description: The name of the process.
                        type: string
                    type: object
                  shellTrigger:
                    description: Allows to execute a custom shell script to reload
                      the process.
                    properties:
                      batchParamsFormatterTemplate:
                        description: "Specifies a Go template string for formatting
                          batch input data. It's used when `batchReload` is 'True'
                          to format data passed into STDIN of the script. The template
                          accesses key-value pairs of updated parameters via the '$'
                          variable. This allows for custom formatting of the input
                          data. \n Example template: \n ```yaml batchParamsFormatterTemplate:
                          |- {{- range $pKey, $pValue := $ }} {{ printf \"%s:%s\"
                          $pKey $pValue }} {{- end }} ``` \n This example generates
                          batch input data in a key:value format, sorted by keys.
                          ``` key1:value1 key2:value2 key3:value3 ``` \n If not specified,
                          the default format is key=value, sorted by keys, for each
                          updated parameter. ``` key1=value1 key2=value2 key3=value3
                          ```"
                        type: string
                      batchReload:
                        description: "Controls whether parameter updates are processed
                          individually or collectively in a batch: \n - 'True': Processes
                          all changes in one batch reload. - 'False': Processes each
                          change individually. \n Defaults to 'False' if unspecified."
                        type: boolean
                      command:
                        description: Specifies the command to execute in order to
                          reload the process. It should be a valid shell command.
                        items:
                          type: string
                        type: array
                      scriptConfig:
                        description: ScriptConfig object specifies a ConfigMap that
                          contains script files that should be mounted inside the
                          pod. The scripts are mounted as volumes and can be referenced
                          and executed by the dynamic reload.
                        properties:
                          namespace:
                            default: default
                            description: Specifies the namespace for the ConfigMap.
                              If not specified, it defaults to the "default" namespace.
                            maxLength: 63
                            pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                            type: string
                          scriptConfigMapRef:
                            description: Specifies the reference to the ConfigMap
                              containing the scripts.
                            type: string
                        required:
                        - scriptConfigMapRef
                        type: object
                      sync:
                        description: "Determines the synchronization mode of parameter
                          updates with \"config-manager\". \n - 'True': Executes reload
                          actions synchronously, pausing until completion. - 'False':
                          Executes reload actions asynchronously, without waiting
                          for completion."
                        type: boolean
                      toolsSetup:
                        description: "Specifies the tools container image used by
                          ShellTrigger for dynamic reload. If the dynamic reload action
                          is triggered by a ShellTrigger, this field is required.
                          This image must contain all necessary tools for executing
                          the ShellTrigger scripts. \n Usually the specified image
                          is referenced by the init container, which is then responsible
                          for copy the tools from the image to a bin volume. This
                          ensures that the tools are available to the 'config-manager'
                          sidecar."
                        properties:
                          mountPoint:
                            description: Specifies the directory path in the container
                              where the tools-related files are to be copied. This
                              field is typically used with an emptyDir volume to ensure
                              a temporary, empty directory is provided at pod creation.
                            maxLength: 128
                            type: string
                          toolConfigs:
                            description: Specifies a list of settings of init containers
                              that prepare tools for dynamic reload.
                            items:
                              description: ToolConfig specifies the settings of an
                                init container that prepare tools for dynamic reload.
                              properties:
                                asContainerImage:
                                  description: "Indicates whether the tool image should
                                    be used as the container image for a sidecar.
                                    This is useful for large tool images, such as
                                    those for C++ tools, which may depend on numerous
                                    libraries (e.g., *.so files). \n If enabled, the
                                    tool image is deployed as a sidecar container
                                    image. \n Examples: ```yaml toolsSetup:: mountPoint:
                                    /kb_tools toolConfigs: - name: kb-tools asContainerImage:
                                    true image:  apecloud/oceanbase:4.2.0.0-100010032023083021
                                    ``` \n generated containers: ```yaml initContainers:
                                    - name: install-config-manager-tool image: apecloud/kubeblocks-tools:${version}
                                    command: - cp - /bin/config_render - /opt/tools
                                    volumemounts: - name: kb-tools mountpath: /opt/tools
                                    \n containers: - name: config-manager image: apecloud/oceanbase:4.2.0.0-100010032023083021
                                    imagePullPolicy: IfNotPresent command: - /opt/tools/reloader
                                    - --log-level - info - --operator-update-enable
                                    - --tcp - \"9901\" - --config - /opt/config-manager/config-manager.yaml
                                    volumemounts: - name: kb-tools mountpath: /opt/tools
                                    ```"
                                  type: boolean
                                command:
                                  description: Specifies the command to be executed
                                    by the init container.
                                  items:
                                    type: string
                                  type: array
                                image:
                                  description: Specifies the tool container image.
                                  type: string
                                name:
                                  description: Specifies the name of the init container.
                                  maxLength: 63
                                  pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                                  type: string
                              type: object
                            type: array
                        required:
                        - mountPoint
                        type: object
                    required:
                    - command
                    type: object
                  targetPodSelector:
                    description: "Used to match labels on the pod to determine whether
                      a dynamic reload should be performed. \n In some scenarios,
                      only specific pods (e.g., primary replicas) need to undergo
                      a dynamic reload. The `reloadedPodSelector` allows you to specify
                      label selectors to target the desired pods for the reload process.
                      \n If the `reloadedPodSelector` is not specified or is nil,
                      all pods managed by the workload will be considered for the
                      dynamic reload."
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                  tplScriptTrigger:
                    description: Enables reloading process using a Go template script.
                    properties:
                      namespace:
                        default: default
                        description: Specifies the namespace for the ConfigMap. If
                          not specified, it defaults to the "default" namespace.
                        maxLength: 63
                        pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                        type: string
                      scriptConfigMapRef:
                        description: Specifies the reference to the ConfigMap containing
                          the scripts.
                        type: string
                      sync:
                        description: "Determines whether parameter updates should
                          be synchronized with the \"config-manager\". Specifies the
                          controller's reload strategy: \n - If set to 'True', the
                          controller executes the reload action in synchronous mode,
                          pausing execution until the reload completes. - If set to
                          'False', the controller executes the reload action in asynchronous
                          mode, updating the ConfigMap without waiting for the reload
                          process to finish."
                        type: boolean
                    required:
                    - scriptConfigMapRef
                    type: object
                  unixSignalTrigger:
                    description: Used to trigger a reload by sending a specific Unix
                      signal to the process.
                    properties:
                      processName:
                        description: Identifies the name of the process to which the
                          Unix signal will be sent.
                        type: string
                      signal:
                        description: 'Specifies a valid Unix signal to be sent. For
                          a comprehensive list of all Unix signals, see: ../../pkg/configuration/configmap/handler.go:allUnixSignals'
                        enum:
                        - SIGHUP
                        - SIGINT
                        - SIGQUIT
                        - SIGILL
                        - SIGTRAP
                        - SIGABRT
                        - SIGBUS
                        - SIGFPE
                        - SIGKILL
                        - SIGUSR1
                        - SIGSEGV
                        - SIGUSR2
                        - SIGPIPE
                        - SIGALRM
                        - SIGTERM
                        - SIGSTKFLT
                        - SIGCHLD
                        - SIGCONT
                        - SIGSTOP
                        - SIGTSTP
                        - SIGTTIN
                        - SIGTTOU
                        - SIGURG
                        - SIGXCPU
                        - SIGXFSZ
                        - SIGVTALRM
                        - SIGPROF
                        - SIGWINCH
                        - SIGIO
                        - SIGPWR
                        - SIGSYS
                        type: string
                    required:
                    - processName
                    - signal
                    type: object
                type: object
              reloadStaticParamsBeforeRestart:
                description: "Configures whether the dynamic reload specified in `reloadAction`
                  applies only to dynamic parameters or to all parameters (including
                  static parameters). \n - false (default): Only modifications to
                  the dynamic parameters listed in `dynamicParameters` will trigger
                  a dynamic reload. - true: Modifications to both dynamic parameters
                  listed in `dynamicParameters` and static parameters listed in `staticParameters`
                  will trigger a dynamic reload. The \"all\" option is for certain
                  engines that require static parameters to be set via SQL statements
                  before they can take effect on restart."
                type: boolean
              staticParameters:
                description: List static parameters. Modifications to any of these
                  parameters require a restart of the process to take effect.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
            required:
            - fileFormatConfig
            type: object
          status:
            description: ConfigConstraintStatus represents the observed state of a
              ConfigConstraint.
            properties:
              message:
                description: Provides descriptions for abnormal states.
                type: string
              observedGeneration:
                description: Refers to the most recent generation observed for this
                  ConfigConstraint. This value is updated by the API Server.
                format: int64
                type: integer
              phase:
                description: Specifies the status of the configuration template. When
                  set to CCAvailablePhase, the ConfigConstraint can be referenced
                  by ClusterDefinition or ClusterVersion.
                enum:
                - Available
                - Unavailable
                - Deleting
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
