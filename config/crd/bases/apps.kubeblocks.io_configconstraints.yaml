apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.1
  labels:
    app.kubernetes.io/name: kubeblocks
  name: configconstraints.apps.kubeblocks.io
spec:
  group: apps.kubeblocks.io
  names:
    categories:
    - kubeblocks
    kind: ConfigConstraint
    listKind: ConfigConstraintList
    plural: configconstraints
    shortNames:
    - cc
    singular: configconstraint
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: status phase
      jsonPath: .status.phase
      name: PHASE
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ConfigConstraint is the Schema for the configconstraint API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConfigConstraintSpec defines the desired state of ConfigConstraint
            properties:
              cfgSchemaTopLevelName:
                description: Top level key used to get the cue rules to validate the
                  config file. It must exist in 'ConfigSchema' TODO (refactored to
                  ConfigSchemaTopLevelKey)
                type: string
              configurationSchema:
                description: List constraints rules for each config parameters. TODO
                  (refactored to ConfigSchema)
                properties:
                  cue:
                    description: Enables providers to verify user configurations using
                      the CUE language.
                    type: string
                  schema:
                    description: Transforms the schema from CUE to json for further
                      OpenAPI validation TODO (refactored to SchemaInJson)
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              downwardAPIOptions:
                description: "A set of actions for regenerating local configs. \n
                  It works when: - different engine roles have different config, such
                  as redis primary & secondary - after a role switch, the local config
                  will be regenerated with the help of DownwardActions TODO (refactored
                  to DownwardActions)"
                items:
                  properties:
                    command:
                      description: The command used to execute for the downward API.
                      items:
                        type: string
                      type: array
                    items:
                      description: Represents a list of downward API volume files.
                      items:
                        description: DownwardAPIVolumeFile represents information
                          to create the file containing the pod field
                        properties:
                          fieldRef:
                            description: 'Required: Selects a field of the pod: only
                              annotations, labels, name and namespace are supported.'
                            properties:
                              apiVersion:
                                description: Version of the schema the FieldPath is
                                  written in terms of, defaults to "v1".
                                type: string
                              fieldPath:
                                description: Path of the field to select in the specified
                                  API version.
                                type: string
                            required:
                            - fieldPath
                            type: object
                            x-kubernetes-map-type: atomic
                          mode:
                            description: 'Optional: mode bits used to set permissions
                              on this file, must be an octal value between 0000 and
                              0777 or a decimal value between 0 and 511. YAML accepts
                              both octal and decimal values, JSON requires decimal
                              values for mode bits. If not specified, the volume defaultMode
                              will be used. This might be in conflict with other options
                              that affect the file mode, like fsGroup, and the result
                              can be other mode bits set.'
                            format: int32
                            type: integer
                          path:
                            description: 'Required: Path is  the relative path name
                              of the file to be created. Must not be absolute or contain
                              the ''..'' path. Must be utf-8 encoded. The first item
                              of the relative path must not start with ''..'''
                            type: string
                          resourceFieldRef:
                            description: 'Selects a resource of the container: only
                              resources limits and requests (limits.cpu, limits.memory,
                              requests.cpu and requests.memory) are currently supported.'
                            properties:
                              containerName:
                                description: 'Container name: required for volumes,
                                  optional for env vars'
                                type: string
                              divisor:
                                anyOf:
                                - type: integer
                                - type: string
                                description: Specifies the output format of the exposed
                                  resources, defaults to "1"
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              resource:
                                description: 'Required: resource to select'
                                type: string
                            required:
                            - resource
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - path
                        type: object
                      type: array
                    mountPoint:
                      description: Specifies the mount point of the scripts file.
                      maxLength: 128
                      type: string
                    name:
                      description: Specifies the name of the field. It must be a string
                        of maximum length 63. The name should match the regex pattern
                        `^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$`.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                  required:
                  - items
                  - mountPoint
                  - name
                  type: object
                type: array
              dynamicParameters:
                description: A list of DynamicParameter. Modifications of dynamic
                  parameters trigger a reload action without process restart.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              forceHotUpdate:
                description: "Indicates the dynamic reload action and restart action
                  can be merged to a restart action. \n When a batch of parameters
                  updates incur both restart & dynamic reload, it works as: - set
                  to true, the two actions merged to only one restart action - set
                  to false, the two actions cannot be merged, the actions executed
                  in order [dynamic reload, restart] TODO (refactored to DynamicActionCanBeMerged)"
                type: boolean
              formatterConfig:
                description: 'Describes the format of the config file. The controller
                  works as follows: 1. Parse the config file 2. Get the modified parameters
                  3. Trigger the corresponding action'
                properties:
                  format:
                    description: "The config file format. Valid values are `ini`,
                      `xml`, `yaml`, `json`, `hcl`, `dotenv`, `properties` and `toml`.
                      Each format has its own characteristics and use cases. \n -
                      ini: is a text-based content with a structure and syntax comprising
                      keyâ€“value pairs for properties, reference wiki: https://en.wikipedia.org/wiki/INI_file
                      - xml: refers to wiki: https://en.wikipedia.org/wiki/XML - yaml:
                      supports for complex data types and structures. - json: refers
                      to wiki: https://en.wikipedia.org/wiki/JSON - hcl: The HashiCorp
                      Configuration Language (HCL) is a configuration language authored
                      by HashiCorp, reference url: https://www.linode.com/docs/guides/introduction-to-hcl/
                      - dotenv: is a plain text file with simple keyâ€“value pairs,
                      reference wiki: https://en.wikipedia.org/wiki/Configuration_file#MS-DOS
                      - properties: a file extension mainly used in Java, reference
                      wiki: https://en.wikipedia.org/wiki/.properties - toml: refers
                      to wiki: https://en.wikipedia.org/wiki/TOML - props-plus: a
                      file extension mainly used in Java, supports CamelCase(e.g:
                      brokerMaxConnectionsPerIp)"
                    enum:
                    - xml
                    - ini
                    - yaml
                    - json
                    - hcl
                    - dotenv
                    - toml
                    - properties
                    - redis
                    - props-plus
                    type: string
                  iniConfig:
                    description: A pointer to an IniConfig struct that holds the ini
                      options.
                    properties:
                      sectionName:
                        description: A string that describes the name of the ini section.
                        type: string
                    type: object
                required:
                - format
                type: object
              immutableParameters:
                description: Describes parameters that are prohibited to do any modifications.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              reloadOptions:
                description: Specifies the dynamic reload actions supported by the
                  engine. If set, the controller call the scripts defined in the actions
                  for a dynamic parameter upgrade. The actions are called only when
                  the modified parameter is defined in dynamicParameters part && DynamicReloadActions
                  != nil TODO (refactored to DynamicReloadActions)
                properties:
                  autoTrigger:
                    description: Used to automatically perform the reload command
                      when conditions are met.
                    properties:
                      processName:
                        description: The name of the process.
                        type: string
                    type: object
                  shellTrigger:
                    description: Used to perform the reload command in shell script.
                    properties:
                      command:
                        description: Specifies the list of commands for reload.
                        items:
                          type: string
                        type: array
                      sync:
                        description: 'Specifies whether to synchronize updates parameters
                          to the config manager. Specifies two ways of controller
                          to reload the parameter: - set to ''True'', execute the
                          reload action in sync mode, wait for the completion of reload
                          - set to ''False'', execute the reload action in async mode,
                          just update the ''Configmap'', no need to wait'
                        type: boolean
                    required:
                    - command
                    type: object
                  tplScriptTrigger:
                    description: Used to perform the reload command by Go template
                      script.
                    properties:
                      namespace:
                        default: default
                        description: Specifies the namespace where the referenced
                          tpl script ConfigMap in. If left empty, by default in the
                          "default" namespace.
                        maxLength: 63
                        pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                        type: string
                      scriptConfigMapRef:
                        description: Specifies the reference to the ConfigMap that
                          contains the script to be executed for reload.
                        type: string
                      sync:
                        description: 'Specifies whether to synchronize updates parameters
                          to the config manager. Specifies two ways of controller
                          to reload the parameter: - set to ''True'', execute the
                          reload action in sync mode, wait for the completion of reload
                          - set to ''False'', execute the reload action in async mode,
                          just update the ''Configmap'', no need to wait'
                        type: boolean
                    required:
                    - scriptConfigMapRef
                    type: object
                  unixSignalTrigger:
                    description: Used to trigger a reload by sending a Unix signal
                      to the process.
                    properties:
                      processName:
                        description: Represents the name of the process that the Unix
                          signal sent to.
                        type: string
                      signal:
                        description: 'Represents a valid Unix signal. Refer to the
                          following URL for a list of all Unix signals: ../../pkg/configuration/configmap/handler.go:allUnixSignals'
                        enum:
                        - SIGHUP
                        - SIGINT
                        - SIGQUIT
                        - SIGILL
                        - SIGTRAP
                        - SIGABRT
                        - SIGBUS
                        - SIGFPE
                        - SIGKILL
                        - SIGUSR1
                        - SIGSEGV
                        - SIGUSR2
                        - SIGPIPE
                        - SIGALRM
                        - SIGTERM
                        - SIGSTKFLT
                        - SIGCHLD
                        - SIGCONT
                        - SIGSTOP
                        - SIGTSTP
                        - SIGTTIN
                        - SIGTTOU
                        - SIGURG
                        - SIGXCPU
                        - SIGXFSZ
                        - SIGVTALRM
                        - SIGPROF
                        - SIGWINCH
                        - SIGIO
                        - SIGPWR
                        - SIGSYS
                        type: string
                    required:
                    - processName
                    - signal
                    type: object
                type: object
              scriptConfigs:
                description: A list of ScriptConfig used by the actions defined in
                  dynamic reload and downward actions.
                items:
                  properties:
                    namespace:
                      default: default
                      description: Specifies the namespace where the referenced tpl
                        script ConfigMap in. If left empty, by default in the "default"
                        namespace.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
                      type: string
                    scriptConfigMapRef:
                      description: Specifies the reference to the ConfigMap that contains
                        the script to be executed for reload.
                      type: string
                  required:
                  - scriptConfigMapRef
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - scriptConfigMapRef
                x-kubernetes-list-type: map
              selector:
                description: Used to match labels on the pod to do a dynamic reload
                  TODO (refactored to DynamicReloadSelector)
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              staticParameters:
                description: A list of StaticParameter. Modifications of static parameters
                  trigger a process restart.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: set
              toolsImageSpec:
                description: Tools used by the dynamic reload actions. Usually it
                  is referenced by the 'init container' for 'cp' it to a binary volume.
                  TODO (refactored to ReloadToolsImage)
                properties:
                  mountPoint:
                    description: Represents the point where the scripts file will
                      be mounted.
                    maxLength: 128
                    type: string
                  toolConfigs:
                    description: Used to configure the initialization container.
                    items:
                      properties:
                        command:
                          description: Commands to be executed when init containers.
                          items:
                            type: string
                          type: array
                        image:
                          description: Represents the url of the tool container image.
                          type: string
                        name:
                          description: Specifies the name of the initContainer.
                          maxLength: 63
                          pattern: ^[a-z]([a-z0-9\-]*[a-z0-9])?$
                          type: string
                      required:
                      - command
                      type: object
                    type: array
                required:
                - mountPoint
                type: object
            required:
            - formatterConfig
            type: object
          status:
            properties:
              message:
                description: Provides descriptions for abnormal states.
                type: string
              observedGeneration:
                description: Refers to the most recent generation observed for this
                  ConfigConstraint. This value is updated by the API Server.
                format: int64
                type: integer
              phase:
                description: Specifies the status of the configuration template. When
                  set to CCAvailablePhase, the ConfigConstraint can be referenced
                  by ClusterDefinition or ClusterVersion.
                enum:
                - Available
                - Unavailable
                - Deleting
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
