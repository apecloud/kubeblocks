apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: apecloud-mysql-scale
  labels:
    {{- include "apecloud-mysql.labels" . | nindent 4 }}
spec:
  connectionCredential:
    username: root
    password: root  #"$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_mysql)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_mysql)"
  componentDefs:
    # TODO: In the future, ApeCloud MySQL-Scale is expected to support
    # independent cluster deployment and will no longer need to be deployed
    # together with ApeCloud MySQL cluster. ApeCloud MySQL-Scale can
    # register vttablets as sidecars to an existing ApeCloud MySQL cluster.
    - name: mysql
      characterType: mysql
      probes:
        roleChangedProbe:
          failureThreshold: {{ .Values.roleChangedProbe.failureThreshold }}
          periodSeconds: {{ .Values.roleChangedProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.roleChangedProbe.timeoutSeconds }}
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: 9104
      logConfigs:
        {{- range $name,$pattern := .Values.logConfigs }}
        - name: {{ $name }}
          filePathPattern: {{ $pattern }}
        {{- end }}
      configSpecs:
        - name: mysql-consensusset-config
          templateRef: mysql8.0-scale-config-template
          constraintRef: mysql8.0-scale-config-constraints
          volumeName: mysql-config
          namespace: {{ .Release.Namespace }}
      scriptSpecs:
        - name: apecloud-mysql-scripts
          templateRef: apecloud-mysql-scale-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      workloadType: Consensus
      consensusSpec:
        leader:
          name: leader
          accessMode: ReadWrite
        followers:
          - name: follower
            accessMode: Readonly
      service:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
          - name: vttabletport
            port: 15100
            targetPort: vttabletport
          - name: vttabletgrpc
            port: 16100
            targetPort: vttabletgrpc
          - name: delvedebug
            port: 40000
            targetPort: delvedebug
      horizontalScalePolicy:
        type: Snapshot
        backupTemplateSelector:
          "clusterdefinition.kubeblocks.io/name": apecloud-mysql-scale
      podSpec:
        containers:
          - name: mysql
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /data/mysql
                name: data
              - mountPath: /opt/mysql
                name: mysql-config
              - name: scripts
                mountPath: /scripts
            ports:
              - containerPort: 3306
                name: mysql
              - containerPort: 13306
                name: paxos
            env:
              - name: MYSQL_ROOT_HOST
                value: {{ .Values.auth.rootHost | default "%" | quote }}
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: MYSQL_DATABASE
                value: {{- if .Values.auth.createDatabase }} {{ .Values.auth.database | quote }}  {{- else }} "" {{- end }}
              - name: MYSQL_USER
                value: {{ .Values.auth.username | default "" | quote }}
              - name: MYSQL_PASSWORD
                value: {{ .Values.auth.password | default "" | quote }}
              - name: CLUSTER_ID
                value: {{ .Values.cluster.clusterId | default "1" | quote }}
              - name: CLUSTER_START_INDEX
                value: {{ .Values.cluster.clusterStartIndex | default "1" | quote }}
              - name: REPLICATION_USER
                value: {{ .Values.auth.replicationUser | default "replicator" | quote }}
              - name: REPLICATION_PASSWORD
                value: {{ .Values.auth.replicationPassword | default "" | quote }}
              - name: MYSQL_TEMPLATE_CONFIG
                value: {{ if .Values.cluster.templateConfig }}{{ .Values.cluster.templateConfig }}{{ end }}
              - name: MYSQL_CUSTOM_CONFIG
                value: {{ if .Values.cluster.customConfig }}{{ .Values.cluster.customConfig }}{{ end }}
              - name: MYSQL_DYNAMIC_CONFIG
                value: {{ if .Values.cluster.dynamicConfig }}{{ .Values.cluster.dynamicConfig }}{{ end }}
            command: ["/scripts/setup.sh"]       
          - name: metrics
            image:  {{ .Values.metrics.image.registry | default "docker.io" }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
            imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
            env:
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: DATA_SOURCE_NAME
                value: "$(MYSQL_USER):$(MYSQL_PASSWORD)@(localhost:3306)/"
            command:
              - "/bin/mysqld_exporter"
              - "--collect.info_schema.wesql_consensus"
            ports:
              - name: http-metrics
                containerPort: 9104
            livenessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              httpGet:
                path: /
                port: http-metrics
            readinessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              httpGet:
                path: /
                port: http-metrics
          - name: vttablet
            image: {{ .Values.wesqlscale.image.registry | default "docker.io" }}/{{ .Values.wesqlscale.image.repository }}:{{ .Values.wesqlscale.image.tag }}
            imagePullPolicy: {{ default .Values.wesqlscale.image.pullPolicy "IfNotPresent" }} 
            ports:
              - containerPort: 15100
                name: vttabletport
              - containerPort: 16100
                name: vttabletgrpc
              - containerPort: 40000
                name: delvedebug
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: KEYSPACE
                value: {{ .Values.wesqlscale.keySpace | default "commerce" | quote }}
              - name: SHARD
                value: {{ .Values.wesqlscale.shard | default "0" | quote }}
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-etcd-headless"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"
              - name: VTTABLET_PORT
                value: "15100"
              - name: VTTABLET_GRPC_PORT
                value: "16100"
              - name: VTCTLD_HOST
                value: "$(KB_CLUSTER_NAME)-vtctld-headless" 
              - name: VTCTLD_WEB_PORT
                value: "15000"
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password   
            command:
              - /bin/bash
              - -c
              - |
                cell=${CELL:-'zone1'}
                keyspace=${KEYSPACE:-'commerce'}
                shard=${SHARD:-'0'}
                uid="${KB_POD_NAME##*-}"
                mysql_root=${MYSQL_ROOT_USER:-'root'}
                mysql_root_passwd=${MYSQL_ROOT_PASSWORD:-'123456'}
                mysql_port=${MYSQL_PORT:-'3306'}
                port=${VTTABLET_PORT:-'15100'}
                grpc_port=${VTTABLET_GRPC_PORT:-'16100'}
                vtctld_host=${VTCTLD_HOST:-'127.0.0.1'}
                vtctld_web_port=${VTCTLD_WEB_PORT:-'15000'}
                printf -v alias '%s-%010d' $cell $uid
                printf -v tablet_dir 'vt_%010d' $uid
                tablet_hostname=$(eval echo \$KB_MYSQL_"$uid"_HOSTNAME)
                printf -v tablet_logfile 'vttablet_%010d_querylog.txt' $uid

                tablet_type=replica
                topology_fags=${TOPOLOGY_FLAGS:-'--topo_implementation etcd2 --topo_global_server_address 127.0.0.1:2379 --topo_global_root /vitess/global'}

                echo "starting vttablet for $alias..."

                su vitess <<EOF
                exec vttablet \
                $topology_fags \
                --alsologtostderr \
                --log_dir $VTDATAROOT \
                --log_queries_to_file $VTDATAROOT/$tablet_logfile \
                --tablet-path $alias \
                --tablet_hostname "$tablet_hostname" \
                --init_keyspace $keyspace \
                --init_shard $shard \
                --init_tablet_type $tablet_type \
                --health_check_interval 1s \
                --shard_sync_retry_delay 1s \
                --remote_operation_timeout 1s \
                --db_connect_timeout_ms 500 \
                --enable_replication_reporter \
                --backup_storage_implementation file \
                --file_backup_storage_root $VTDATAROOT/backups \
                --port $port \
                --db_port $mysql_port \
                --db_host $tablet_hostname \
                --db_allprivs_user $mysql_root \
                --db_allprivs_password $mysql_root_passwd \
                --db_dba_user $mysql_root \
                --db_dba_password $mysql_root_passwd \
                --db_app_user $mysql_root \
                --db_app_password $mysql_root_passwd \
                --db_filtered_user $mysql_root \
                --db_filtered_password $mysql_root_passwd \
                --grpc_port $grpc_port \
                --service_map 'grpc-queryservice,grpc-tabletmanager,grpc-updatestream' \
                --pid_file $VTDATAROOT/vttablet.pid \
                --vtctld_addr http://$vtctld_host:$vtctld_web_port/ \
                --disable_active_reparents 
                EOF
      systemAccounts:
        cmdExecutorConfig:
          image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          command:
          - mysql
          args:
          - -u$(MYSQL_ROOT_USER)
          - -p$(MYSQL_ROOT_PASSWORD)
          - -h$(KB_ACCOUNT_ENDPOINT)
          - -e
          - $(KB_ACCOUNT_STATEMENT)
          env:
          - name: MYSQL_ROOT_USER
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: username
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: password
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
                deletion: DROP USER IF EXISTS $(USERNAME);
          - name: kbdataprotection
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY '$(PASSWD)';GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO $(USERNAME); GRANT LOCK TABLES,RELOAD,PROCESS,REPLICATION CLIENT, SUPER,SELECT,EVENT,TRIGGER,SHOW VIEW ON *.* TO $(USERNAME);
                deletion: DROP USER IF EXISTS $(USERNAME);
          - name: kbprobe
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:        
                creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
                deletion: DROP USER IF EXISTS $(USERNAME);              
          - name: kbmonitoring
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:        
                creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
                deletion: DROP USER IF EXISTS $(USERNAME);            
          - name: kbreplicator
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:        
                creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION SLAVE ON *.* TO $(USERNAME) WITH GRANT OPTION;
                deletion: DROP USER IF EXISTS $(USERNAME);                   
    - name: etcd
      characterType: etcd
      workloadType: Stateful
      service:
        ports:
          - name: client
            port: 2379
            targetPort: client 
      podSpec:
        containers:
          - name: etcd
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 2379
                name: client
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: ETCDCTL_API
                value: "2"
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-etcd-headless"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"  
            command: 
              - /bin/bash
              - -c
              - |   
                echo "staring etcd."
                etcd_port=${ETCD_PORT:-'2379'}
                etcd_server=${ETCD_SERVER:-'127.0.0.1'}

                cell=${CELL:-'zone1'}
                export ETCDCTL_API=2

                etcd --enable-v2=true --data-dir "${VTDATAROOT}/etcd/"  \
                  --listen-client-urls "http://0.0.0.0:${etcd_port}" \
                  --advertise-client-urls "http://0.0.0.0:${etcd_port}"
            lifecycle:
              postStart:
                exec:
                  command:
                    - /bin/bash
                    - -c
                    - |   
                      etcd_port=${ETCD_PORT:-'2379'}
                      etcd_server=${ETCD_SERVER:-'127.0.0.1'}

                      cell=${CELL:-'zone1'}
                      export ETCDCTL_API=2

                      echo "add /vitess/global"
                      etcdctl --endpoints "http://127.0.0.1:${etcd_port}" mkdir /vitess/global

                      echo "add /vitess/$cell"
                      etcdctl --endpoints "http://127.0.0.1:${etcd_port}" mkdir /vitess/$cell

                      # And also add the CellInfo description for the cell.
                      # If the node already exists, it's fine, means we used existing data.
                      echo "add $cell CellInfo"
                      set +e
                      vtctl --topo_implementation etcd2 \
                        --topo_global_server_address "127.0.0.1:${etcd_port}" \
                        --topo_global_root /vitess/global VtctldCommand AddCellInfo \
                        --root /vitess/$cell \
                        --server-address "${etcd_server}:${etcd_port}" \
                        $cell
    - name: vtctld
      characterType: vtctld
      workloadType: Stateful
      service:
        ports:
          - name: webport
            port: 15000
            targetPort: webport
          - name: grpcport
            port: 15999
            targetPort: grpcport
          - name: delvedebug
            port: 40000
            targetPort: delvedebug
      podSpec:
        containers:
          - name: vtctld
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 15000
                name: webport
              - containerPort: 15999
                name: grpcport
              - containerPort: 40000
                name: delvedebug
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: VTCTLD_SERVER
                value: "$(KB_CLUSTER_NAME)-vtctld-headless"
              - name: VTCTLD_WEB_PORT
                value: "15000" 
              - name: VTCTLD_GRPC_PORT
                value: "15999"
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-etcd-headless"
              - name: ETCD_PORT
                value: "2379" 
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"                
            command:
              - /bin/bash
              - -c
              - |
                echo "starting vtctld"
                cell=${CELL:-'zone1'}
                grpc_port=${VTCTLD_GRPC_PORT:-'15999'}
                vtctld_web_port=${VTCTLD_WEB_PORT:-'15000'}
                topology_fags=${TOPOLOGY_FLAGS:-'--topo_implementation etcd2 --topo_global_server_address 127.0.0.1:2379 --topo_global_root /vitess/global'}

                su vitess <<EOF
                exec vtctld \
                $topology_fags \
                --alsologtostderr \
                --cell $cell \
                --service_map 'grpc-vtctl,grpc-vtctld' \
                --backup_storage_implementation file \
                --file_backup_storage_root $VTDATAROOT/backups \
                --log_dir $VTDATAROOT \
                --port $vtctld_web_port \
                --grpc_port $grpc_port \
                --pid_file $VTDATAROOT/vtctld.pid 
                EOF
    - name: vtconsensus
      characterType: vtconsensus
      workloadType: Stateful
      service:
        ports:
          - name: port
            port: 16000
            targetPort: port
          - name: delvedebug
            port: 40000
            targetPort: delvedebug
      podSpec:
        containers:
          - name: vtconsensus
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 16000
                name: port
              - containerPort: 40000
                name: delvedebug
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: VTCONSENSUS_PORT
                value: "16000" 
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-etcd-headless"
              - name: ETCD_PORT
                value: "2379" 
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"                
            command:
              - /bin/bash
              - -c
              - |
                echo "starting vtconsensus"
                cell=${CELL:-'zone1'}
                keyspace=${KEYSPACE:-'commerce'}
                shard=${SHARD:-'0'}

                vtconsensusport=${VTCONSENSUS_PORT:-'16000'}
                topology_fags=${TOPOLOGY_FLAGS:-'--topo_implementation etcd2 --topo_global_server_address 127.0.0.1:2379 --topo_global_root /vitess/global'}

                su vitess <<EOF
                exec vtconsensus \
                  $topology_fags \
                  --alsologtostderr \
                  --clusters_to_watch "$keyspace/$shard" \
                  --refresh_interval 1s \
                  --scan_repair_timeout 1s \
                  --log_dir ${VTDATAROOT} \
                  --db_username "$MYSQL_ROOT_USER" \
                  --db_password "$MYSQL_ROOT_PASSWORD"
                EOF
    - name: vtgate
      characterType: vtgate
      workloadType: Stateful
      service:
        ports:
          - name: webport
            port: 15001
            targetPort: webport
          - name: grpcport
            port: 15991
            targetPort: grpcport
          - name: serverport
            port: 15306
            targetPort: serverport
          - name: delvedebug
            port: 40000
            targetPort: delvedebug
      podSpec:
        containers:
          - name: vtgate
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 15001
                name: webport
              - containerPort: 15991
                name: grpcport
              - containerPort: 15306
                name: serverport
              - containerPort: 40000
                name: delvedebug
            env:
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password            
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: VTGATE_MYSQL_PORT
                value: "15306"
              - name: VTGATE_WEB_PORT
                value: "15001"
              - name: VTGATE_GRPC_PORT
                value: "15991"
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-etcd-headless"
              - name: ETCD_PORT
                value: "2379" 
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"                
            command:
              - /bin/bash
              - -c
              - |
                cell=${CELL:-'zone1'}
                web_port=${VTGATE_WEB_PORT:-'15001'}
                grpc_port=${VTGATE_GRPC_PORT:-'15991'}
                mysql_server_port=${VTGATE_MYSQL_PORT:-'15306'}
                mysql_server_socket_path="/tmp/mysql.sock"

                echo "starting vtgate."
                su vitess <<EOF
                exec vtgate \
                  $TOPOLOGY_FLAGS \
                  --alsologtostderr \
                  --gateway_initial_tablet_timeout 30s \
                  --healthcheck_timeout 1s \
                  --srv_topo_timeout 1s \
                  --grpc_keepalive_time 1s \
                  --grpc_keepalive_timeout 2s \
                  --log_dir $VTDATAROOT \
                  --log_queries_to_file $VTDATAROOT/vtgate_querylog.txt \
                  --port $web_port \
                  --grpc_port $grpc_port \
                  --mysql_server_port $mysql_server_port \
                  --mysql_server_socket_path $mysql_server_socket_path \
                  --cell $cell \
                  --cells_to_watch $cell \
                  --tablet_types_to_wait PRIMARY,REPLICA \
                  --service_map 'grpc-vtgateservice' \
                  --pid_file $VTDATAROOT/vtgate.pid \
                  --mysql_auth_server_impl none 
                EOF