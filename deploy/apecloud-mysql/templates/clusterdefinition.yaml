apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: apecloud-mysql
  labels:
    {{- include "apecloud-mysql.labels" . | nindent 4 }}
spec:
  type: mysql
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_mysql)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_mysql)"
  componentDefs:
    - name: mysql
      characterType: mysql
      probes:
        roleProbe:
          failureThreshold: {{ .Values.roleProbe.failureThreshold }}
          periodSeconds: {{ .Values.roleProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.roleProbe.timeoutSeconds }}
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: {{ .Values.metrics.service.port }}
      logConfigs:
        {{- range $name,$pattern := .Values.logConfigs }}
        - name: {{ $name }}
          filePathPattern: {{ $pattern }}
        {{- end }}
      configSpecs:
        - name: mysql-consensusset-config
          templateRef: mysql8.0-config-template
          constraintRef: mysql8.0-config-constraints
          volumeName: mysql-config
          namespace: {{ .Release.Namespace }}
        - name: agamotto-configuration
          templateRef: apecloud-mysql8-agamotto-configuration
          namespace: {{ .Release.Namespace }}
          volumeName: agamotto-configuration
          defaultMode: 0777
        - name: mysql-scale-config
          templateRef: mysql-scale-config-template
          constraintRef: mysql-scale-vttablet-config-constraints
          volumeName: mysql-scale-config
          namespace: {{ .Release.Namespace }}
      scriptSpecs:
        - name: apecloud-mysql-scripts
          templateRef: apecloud-mysql-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      workloadType: Consensus
      consensusSpec:
        leader:
          name: leader
          accessMode: ReadWrite
        followers:
          - name: follower
            accessMode: Readonly
        learner:
          name: learner
          accessMode: Readonly
      service:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
      horizontalScalePolicy:
        type: CloneVolume
        backupPolicyTemplateName: apecloud-mysql-backup-policy-for-hscale
      switchoverSpec:
        withCandidate:
          cmdExecutorConfig:
            image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ default .Values.image.tag }}
            command:
              - mysql
            args:
              - -h$(KB_CONSENSUS_LEADER_POD_FQDN)
              - -u$(MYSQL_ROOT_USER)
              - -p$(MYSQL_ROOT_PASSWORD)
              - -e
              - "call dbms_consensus.change_leader('$(KB_SWITCHOVER_CANDIDATE_FQDN):13306');"
          scriptSpecSelectors:
            - name: apecloud-mysql-scripts
        withoutCandidate:
          cmdExecutorConfig:
            image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ default .Values.image.tag }}
            command:
              - /scripts/switchover-without-candidate.sh
          scriptSpecSelectors:
            - name: apecloud-mysql-scripts
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: mysql
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /data/mysql
                name: data
              - mountPath: /opt/mysql
                name: mysql-config
              - name: scripts
                mountPath: /scripts
              - name: annotations
                mountPath: /etc/annotations
            ports:
              - containerPort: 3306
                name: mysql
              - containerPort: 13306
                name: paxos
            env:
              - name: MYSQL_ROOT_HOST
                value: {{ .Values.auth.rootHost | default "%" | quote }}
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
              - name: MYSQL_DATABASE
                value: {{- if .Values.auth.createDatabase }} {{ .Values.auth.database | quote }}  {{- else }} "" {{- end }}
              - name: MYSQL_USER
                value: {{ .Values.auth.username | default "" | quote }}
              - name: MYSQL_PASSWORD
                value: {{ .Values.auth.password | default "" | quote }}
              - name: CLUSTER_ID
                value: {{ .Values.cluster.clusterId | default "1" | quote }}
              - name: CLUSTER_START_INDEX
                value: {{ .Values.cluster.clusterStartIndex | default "1" | quote }}
              - name: REPLICATION_USER
                value: {{ .Values.auth.replicationUser | default "replicator" | quote }}
              - name: REPLICATION_PASSWORD
                value: {{ .Values.auth.replicationPassword | default "" | quote }}
              - name: MYSQL_TEMPLATE_CONFIG
                value: {{ if .Values.cluster.templateConfig }}{{ .Values.cluster.templateConfig }}{{ end }}
              - name: MYSQL_CUSTOM_CONFIG
                value: {{ if .Values.cluster.customConfig }}{{ .Values.cluster.customConfig }}{{ end }}
              - name: MYSQL_DYNAMIC_CONFIG
                value: {{ if .Values.cluster.dynamicConfig }}{{ .Values.cluster.dynamicConfig }}{{ end }}
              - name: KB_EMBEDDED_WESQL
                value: {{ .Values.cluster.kbWeSQLImage | default "1" | quote }}
              # - name: KB_MYSQL_LEADER
              #   valueFrom:
              #     configMapKeyRef:
              #       name: $(COMP_ENV_CM_NAME)
              #       key: KB_LEADER
              #       optional: false
              # - name: KB_MYSQL_FOLLOWERS
              #   valueFrom:
              #     configMapKeyRef:
              #       name: $(COMP_ENV_CM_NAME)
              #       key: KB_FOLLOWERS
              #       optional: false
              # - name: KB_MYSQL_N
              #   valueFrom:
              #     configMapKeyRef:
              #       name: $(COMP_ENV_CM_NAME)
              #       key: KB_REPLICA_COUNT
              #       optional: false
              # - name: KB_MYSQL_CLUSTER_UID
              #   valueFrom:
              #     configMapKeyRef:
              #       name: $(COMP_ENV_CM_NAME)
              #       key: KB_CLUSTER_UID
              #       optional: false

            command: ["/scripts/setup.sh"]
            lifecycle:
              preStop:
                exec:
                  command: ["/scripts/pre-stop.sh"]
          - name: metrics
            image:  {{ .Values.metrics.image.registry | default "docker.io" }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
            imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
            env:
              - name: DB_TYPE
                value: MySQL
              - name: ENDPOINT
                value: {{ printf "localhost:3306" }}
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
            command:
              - "/bin/agamotto"
              - "--config=/opt/agamotto/agamotto-config.yaml"
            ports:
              - name: http-metrics
                containerPort: {{ .Values.metrics.service.port }}
            volumeMounts:
              - name: agamotto-configuration
                mountPath: /opt/agamotto
              - name: data
                mountPath: /data/mysql
              - name: log-data
                mountPath: /var/log/kubeblocks
                readOnly: false
          - name: vttablet
            image: {{ .Values.wesqlscale.image.registry | default "docker.io" }}/{{ .Values.wesqlscale.image.repository }}:{{ .Values.wesqlscale.image.tag }}
            imagePullPolicy: {{ default "IfNotPresent" .Values.wesqlscale.image.pullPolicy }}
            ports:
              - containerPort: 15100
                name: vttabletport
              - containerPort: 16100
                name: vttabletgrpc
              - containerPort: 40000
                name: delvedebug
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-vtcontroller-headless"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"
              - name: VTTABLET_PORT
                value: "15100"
              - name: VTTABLET_GRPC_PORT
                value: "16100"
              - name: VTCTLD_HOST
                value: "$(KB_CLUSTER_NAME)-vtcontroller-headless"
              - name: VTCTLD_WEB_PORT
                value: "15000"
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
            command: ["/scripts/vttablet.sh"]
            volumeMounts:
              - name: scripts
                mountPath: /scripts
              - name: mysql-scale-config
                mountPath: /conf
        volumes:
          - name: log-data
            hostPath:
              path: /var/log/kubeblocks
              type: DirectoryOrCreate
          - name: annotations
            downwardAPI:
              items:
                - path: "leader"
                  fieldRef:
                    fieldPath: metadata.annotations['cs.apps.kubeblocks.io/leader']
                - path: "component-replicas"
                  fieldRef:
                    fieldPath: metadata.annotations['apps.kubeblocks.io/component-replicas']
      systemAccounts:
        cmdExecutorConfig:
          image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          command:
          - mysql
          args:
          - -u$(MYSQL_ROOT_USER)
          - -p$(MYSQL_ROOT_PASSWORD)
          - -h$(KB_ACCOUNT_ENDPOINT)
          - -e
          - $(KB_ACCOUNT_STATEMENT)
          env:
          - name: MYSQL_ROOT_USER
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: username
                optional: false
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: password
                optional: false
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbdataprotection
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO $(USERNAME); GRANT LOCK TABLES,RELOAD,PROCESS,REPLICATION CLIENT, SUPER,SELECT,EVENT,TRIGGER,SHOW VIEW ON *.* TO $(USERNAME);
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbprobe
            provisionPolicy: &kbReadonlyAcctRef
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbmonitoring
            provisionPolicy: *kbReadonlyAcctRef
          - name: kbreplicator
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION SLAVE ON *.* TO $(USERNAME) WITH GRANT OPTION;
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
    - name: vtcontroller
      characterType: vtcontroller
      workloadType: Stateful
      volumeTypes:
        - name: data
          type: data
      scriptSpecs:
        - name: apecloud-mysql-scripts
          templateRef: apecloud-mysql-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      configSpecs:
        - name: mysql-scale-config
          templateRef: mysql-scale-config-template
          constraintRef: mysql-scale-vtconsensus-config-constraints
          volumeName: mysql-scale-config
          namespace: {{ .Release.Namespace }}
      service:
        ports:
          - name: etcd-port
            port: 2379
            targetPort: etcd-client
          - name: vtctld-webport
            port: 15000
            targetPort: vtctld-webport
          - name: vtctld-grpcport
            port: 15999
            targetPort: vtctld-grpcport
      podSpec:
        containers:
          - name: etcd
            imagePullPolicy: {{ default "IfNotPresent" .Values.wesqlscale.image.pullPolicy }}
            ports:
              - containerPort: 2379
                name: etcd-client
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: ETCDCTL_API
                value: "2"
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-vtcontroller-headless"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"
            command: ["/scripts/etcd.sh"]
            volumeMounts:
              - name: scripts
                mountPath: /scripts
              - name: data
                mountPath: /vtdataroot/etcd
            lifecycle:
              postStart:
                exec:
                  command: ["/scripts/etcd-post-start.sh"]
          - name: vtctld
            imagePullPolicy: {{ default "IfNotPresent" .Values.wesqlscale.image.pullPolicy }}
            ports:
              - containerPort: 15000
                name: vtctld-webport
              - containerPort: 15999
                name: vtctld-grpcport
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: VTCTLD_SERVER
                value: "$(KB_CLUSTER_NAME)-vtcontroller-headless"
              - name: VTCTLD_WEB_PORT
                value: "15000"
              - name: VTCTLD_GRPC_PORT
                value: "15999"
              - name: ETCD_SERVER
                value: "localhost"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"
            command: ["/scripts/vtctld.sh"]
            volumeMounts:
              - name: scripts
                mountPath: /scripts 
          - name: vtconsensus
            imagePullPolicy: {{ default "IfNotPresent" .Values.wesqlscale.image.pullPolicy }}
            ports:
              - containerPort: 16000
                name: port
            env:
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
              - name: VTCONSENSUS_PORT
                value: "16000"
              - name: ETCD_SERVER
                value: "localhost"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"
            command: ["/scripts/vtconsensus.sh"]
            volumeMounts:
              - name: scripts
                mountPath: /scripts
              - name: mysql-scale-config
                mountPath: /conf
    - name: vtgate
      characterType: vtgate
      workloadType: Stateless
      scriptSpecs:
        - name: apecloud-mysql-scripts
          templateRef: apecloud-mysql-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      configSpecs:
        - name: mysql-scale-config
          templateRef: mysql-scale-config-template
          constraintRef: mysql-scale-vtgate-config-constraints
          volumeName: mysql-scale-config
          namespace: {{ .Release.Namespace }}
      service:
        ports:
          - name: webport
            port: 15001
            targetPort: webport
          - name: grpcport
            port: 15991
            targetPort: grpcport
          - name: serverport
            port: 15306
            targetPort: serverport
          - name: delvedebug
            port: 40000
            targetPort: delvedebug
      podSpec:
        initContainers:
          - name: wait-vtctld-ready
            imagePullPolicy: IfNotPresent
            image: busybox:1.35
            env:
              - name: VTCTLD_HOST
                value: "$(KB_CLUSTER_NAME)-vtcontroller-headless" 
              - name: VTCTLD_GRPC_PORT
                value: "15999"
            command: ["/scripts/wait-for-service.sh", "vtctld", "$(VTCTLD_HOST)", "$(VTCTLD_GRPC_PORT)"]
            volumeMounts:
              - name: scripts
                mountPath: /scripts
        containers:
          - name: vtgate
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 15001
                name: webport
              - containerPort: 15991
                name: grpcport
              - containerPort: 15306
                name: serverport
              - containerPort: 40000
                name: delvedebug
            env:
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
              - name: CELL
                value: {{ .Values.wesqlscale.cell | default "zone1" | quote }}
              - name: VTGATE_MYSQL_PORT
                value: "15306"
              - name: VTGATE_WEB_PORT
                value: "15001"
              - name: VTGATE_GRPC_PORT
                value: "15991"
              - name: ETCD_SERVER
                value: "$(KB_CLUSTER_NAME)-vtcontroller-headless"
              - name: ETCD_PORT
                value: "2379"
              - name: TOPOLOGY_FLAGS
                value: "--topo_implementation etcd2 --topo_global_server_address $(ETCD_SERVER):$(ETCD_PORT) --topo_global_root /vitess/global"
            command: ["/scripts/vtgate.sh"]
            volumeMounts:
              - name: scripts
                mountPath: /scripts
              - name: mysql-scale-config
                mountPath: /conf
