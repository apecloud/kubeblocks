apiVersion: v1
kind: ConfigMap
metadata:
  name: apecloud-mysql-scripts
  labels:
    {{- include "apecloud-mysql.labels" . | nindent 4 }}
data:
  wait-for-service.sh: |
    #!/bin/sh
    echo "wait for $1"
    while ! nc -z $2 $3
    do sleep 1
    printf "-"
    done
    echo -e "  >> $1 has started"
  set_config_variables.sh: |
    #!/bin/bash
    function set_config_variables(){
      echo "set config variables [$1]"
      config_file="/conf/wesql-scale.cnf"
      config_content=$(sed -n '/\['$1'\]/,/\[/ { /\['$1'\]/d; /\[/q; p; }' $config_file)
      while read line
      do
        if [[ $line =~ ^[a-zA-Z_][a-zA-Z0-9_]*=[a-zA-Z0-9_]*$ ]]; then
          echo $line
          eval "export $line"
        elif ! [[ $line =~ ^[[:space:]]*# ]]; then 
          echo "bad format: $line"
        fi
      done <<< "$(echo -e "$config_content")"
    }
  setup.sh: |
    #!/bin/bash
    rmdir /docker-entrypoint-initdb.d && mkdir -p /data/mysql/docker-entrypoint-initdb.d && ln -s /data/mysql/docker-entrypoint-initdb.d /docker-entrypoint-initdb.d;
    exec docker-entrypoint.sh
  pre-stop.sh: |
    #!/bin/bash
    drop_followers() {
    echo "leader=$leader" >> /data/mysql/.kb_pre_stop.log
    echo "KB_POD_NAME=$KB_POD_NAME" >> /data/mysql/.kb_pre_stop.log
    if [ -z "$leader" -o "$KB_POD_NAME" = "$leader" ]; then
      echo "no leader or self is leader, exit" >> /data/mysql/.kb_pre_stop.log
      exit 0
    fi
    host=$(eval echo \$KB_"$idx"_HOSTNAME)
    echo "host=$host" >> /data/mysql/.kb_pre_stop.log
    leader_idx=${leader##*-}
    leader_host=$(eval echo \$KB_"$leader_idx"_HOSTNAME)
    if [ ! -z $leader_host ]; then 
      host_flag="-h$leader_host"
    fi
    if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
      password_flag="-p$MYSQL_ROOT_PASSWORD"
    fi
    echo "mysql $host_flag -uroot $password_flag -e \"call dbms_consensus.downgrade_follower('$host:13306');\" 2>&1 " >> /data/mysql/.kb_pre_stop.log
    mysql $host_flag -uroot $password_flag -e "call dbms_consensus.downgrade_follower('$host:13306');" 2>&1
    echo "mysql $host_flag -uroot $password_flag -e \"call dbms_consensus.drop_learner('$host:13306');\" 2>&1 " >> /data/mysql/.kb_pre_stop.log
    mysql $host_flag -uroot $password_flag -e "call dbms_consensus.drop_learner('$host:13306');" 2>&1
    }

    set_my_weight_to_zero() {
      if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
        password_flag="-p$MYSQL_ROOT_PASSWORD"
      fi

      if [ "$KB_POD_NAME" = "$leader" ]; then
        echo "self is leader, before scale in, need to set my election weight to 0." >> /data/mysql/.kb_pre_stop.log
        host=$(eval echo \$KB_"$idx"_HOSTNAME)
        echo "set weight to 0. mysql -uroot $password_flag -e \"call dbms_consensus.configure_follower('$host:13306',0 ,false);\" 2>&1" >> /data/mysql/.kb_pre_stop.log
        mysql -uroot $password_flag -e "call dbms_consensus.configure_follower('$host:13306',0 ,false);" 2>&1
      fi
    }

    switchover() {
      if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
        password_flag="-p$MYSQL_ROOT_PASSWORD"
      fi
      #new_leader_host=$KB_0_HOSTNAME
      if [ "$KB_POD_NAME" = "$leader" ]; then
        echo "self is leader, need to switchover" >> /data/mysql/.kb_pre_stop.log
        echo "try to get global cluster info" >> /data/mysql/.kb_pre_stop.log
        global_info=`mysql -uroot $password_flag 2>/dev/null -e "select IP_PORT from information_schema.wesql_cluster_global order by MATCH_INDEX desc;"`
        echo "all nodes: $global_info" >> /data/mysql/.kb_pre_stop.log
        global_info_arr=($global_info)
        echo "all nodes array: ${global_info_arr[0]},${global_info_arr[1]},${global_info_arr[2]},${global_info_arr[3]}"  >> /data/mysql/.kb_pre_stop.log
        echo "array size: ${#global_info_arr[@]}, the first one is not real address,just the field name IP_PORT"  >> /data/mysql/.kb_pre_stop.log

        host=$(eval echo \$KB_"$idx"_HOSTNAME)
        host_ip_port=$host:13306
        try_times=10
        for((i=1;i<${#global_info_arr[@]};i++)) do
          if [ "$host_ip_port" == "${global_info_arr[i]}" ];then
            echo "do not transfer to leader, leader:${global_info_arr[i]}"  >> /data/mysql/.kb_pre_stop.log;
          else
            echo "try to transfer to:${global_info_arr[i]}"  >> /data/mysql/.kb_pre_stop.log;
            echo "mysql -uroot $password_flag -e \"call dbms_consensus.change_leader('${global_info_arr[i]}');\" 2>&1" >> /data/mysql/.kb_pre_stop.log
            mysql -uroot $password_flag -e "call dbms_consensus.change_leader('${global_info_arr[i]}');" 2>&1
            sleep 1
            role_info=`mysql -uroot $password_flag 2>/dev/null -e "select ROLE from information_schema.wesql_cluster_local;"`
            role_info_arr=($role_info)
            real_role=${role_info_arr[1]}
            echo "this node's current role info:$real_role"  >> /data/mysql/.kb_pre_stop.log
            if [ "$real_role" == "Follower" ];then
              echo "transfer successfully" >> /data/mysql/.kb_pre_stop.log
              new_leader_host_and_port=${global_info_arr[i]}
              # get rid of port
              new_leader_host=${new_leader_host_and_port%%:*}
              echo "new_leader_host=$new_leader_host" >> /data/mysql/.kb_pre_stop.log
              leader=`echo "$new_leader_host" | cut -d "." -f 1`
              echo "leader_host: $leader"  >> /data/mysql/.kb_pre_stop.log
              idx=${KB_POD_NAME##*-}
              break
            fi
          fi
          ((try_times--))
          if [ $try_times -le 0 ];then
            echo "try too many times" >> /data/mysql/.kb_pre_stop.log
            break
          fi
        done
      fi
    }
    leader=`cat /etc/annotations/leader`
    idx=${KB_POD_NAME##*-}
    current_component_replicas=`cat /etc/annotations/component-replicas`
    echo "current replicas: $current_component_replicas" >> /data/mysql/.kb_pre_stop.log
    if [ ! $idx -lt $current_component_replicas ] && [ $current_component_replicas -ne 0 ]; then 
        # if idx greater than or equal to current_component_replicas means the cluster's scaling in
        # put .restore on pvc for next scaling out, if pvc not deleted
        touch /data/mysql/data/.restore; sync
        # set wegiht to 0 and switch leader before leader scaling in itself
        set_my_weight_to_zero
        switchover
        # only scaling in need to drop followers
        drop_followers
    elif [ $current_component_replicas -eq 0 ]; then
        # stop, do nothing.
        echo "stop, do nothing" >> /data/mysql/.kb_pre_stop.log
    else 
        # restart, switchover first.
        echo "Also try to switchover just before restart" >> /data/mysql/.kb_pre_stop.log
        switchover
        echo "no need to drop followers" >> /data/mysql/.kb_pre_stop.log
    fi
  switchover-without-candidate.sh: |-
    #!/bin/bash
    if [ ! -z $MYSQL_ROOT_PASSWORD ]; then
      password_flag="-p$MYSQL_ROOT_PASSWORD"
    fi
    global_info=`mysql -h$KB_CONSENSUS_LEADER_POD_FQDN -uroot $password_flag 2>/dev/null -e "select IP_PORT from information_schema.wesql_cluster_global order by MATCH_INDEX desc;"`
    global_info_arr=($global_info)
    leader_ip_port=$KB_CONSENSUS_LEADER_POD_FQDN:13306
    try_times=10
    for((i=1;i<${#global_info_arr[@]};i++)) do
      if [ "$leader_ip_port" == "${global_info_arr[i]}" ];then
        echo "do not transfer to leader, leader:${global_info_arr[i]}"
      else
        mysql -h$KB_CONSENSUS_LEADER_POD_FQDN -uroot $password_flag -e "call dbms_consensus.change_leader('${global_info_arr[i]}');" 2>&1
        sleep 1
        role_info=`mysql -h$KB_CONSENSUS_LEADER_POD_FQDN -uroot $password_flag 2>/dev/null -e "select ROLE from information_schema.wesql_cluster_local;"`
        role_info_arr=($role_info)
        real_role=${role_info_arr[1]}
        if [ "$real_role" == "Follower" ];then
          echo "transfer successfully"
          new_leader_host_and_port=${global_info_arr[i]}
          new_leader_host=${new_leader_host_and_port%%:*}
          echo "new_leader_host=$new_leader_host"
          break
        fi
      fi
      ((try_times--))
      if [ $try_times -le 0 ];then
        break
      fi
    done
  vttablet.sh: |-
    #!/bin/bash
    while [ "$KB_PROXY_ENABLED" != "on" ]
    do
      sleep 60
    done

    . /scripts/set_config_variables.sh
    set_config_variables vttablet

    cell=${CELL:-'zone1'}
    uid="${KB_POD_NAME##*-}"
    mysql_root=${MYSQL_ROOT_USER:-'root'}
    mysql_root_passwd=${MYSQL_ROOT_PASSWORD:-'123456'}
    mysql_port=${MYSQL_PORT:-'3306'}
    port=${VTTABLET_PORT:-'15100'}
    grpc_port=${VTTABLET_GRPC_PORT:-'16100'}
    vtctld_host=${VTCTLD_HOST:-'127.0.0.1'}
    vtctld_web_port=${VTCTLD_WEB_PORT:-'15000'}
    printf -v alias '%s-%010d' $cell $uid
    printf -v tablet_dir 'vt_%010d' $uid
    tablet_hostname=$(eval echo \$KB_"$uid"_HOSTNAME)
    printf -v tablet_logfile 'vttablet_%010d_querylog.txt' $uid

    tablet_type=replica
    topology_fags=${TOPOLOGY_FLAGS:-'--topo_implementation etcd2 --topo_global_server_address 127.0.0.1:2379 --topo_global_root /vitess/global'}

    echo "starting vttablet for $alias..."

    su vitess <<EOF
    exec vttablet \
    $topology_fags \
    --alsologtostderr \
    --log_dir $VTDATAROOT \
    --log_queries_to_file $VTDATAROOT/$tablet_logfile \
    --tablet-path $alias \
    --tablet_hostname "$tablet_hostname" \
    --init_tablet_type $tablet_type \
    --health_check_interval $health_check_interval \
    --shard_sync_retry_delay $shard_sync_retry_delay \
    --remote_operation_timeout $remote_operation_timeout \
    --db_connect_timeout_ms $db_connect_timeout_ms \
    --enable_replication_reporter \
    --backup_storage_implementation file \
    --file_backup_storage_root $VTDATAROOT/backups \
    --port $port \
    --db_port $mysql_port \
    --db_host $tablet_hostname \
    --db_allprivs_user $mysql_root \
    --db_allprivs_password $mysql_root_passwd \
    --db_dba_user $mysql_root \
    --db_dba_password $mysql_root_passwd \
    --db_app_user $mysql_root \
    --db_app_password $mysql_root_passwd \
    --db_filtered_user $mysql_root \
    --db_filtered_password $mysql_root_passwd \
    --grpc_port $grpc_port \
    --service_map 'grpc-queryservice,grpc-tabletmanager,grpc-updatestream' \
    --pid_file $VTDATAROOT/vttablet.pid \
    --vtctld_addr http://$vtctld_host:$vtctld_web_port/ \
    --disable_active_reparents
    EOF
  etcd.sh: |-
    #!/bin/bash
    echo "staring etcd."
    etcd_port=${ETCD_PORT:-'2379'}
    etcd_server=${ETCD_SERVER:-'127.0.0.1'}

    cell=${CELL:-'zone1'}
    export ETCDCTL_API=2

    etcd --enable-v2=true --data-dir "${VTDATAROOT}/etcd/"  \
      --listen-client-urls "http://0.0.0.0:${etcd_port}" \
      --advertise-client-urls "http://0.0.0.0:${etcd_port}"
  etcd-post-start.sh: |-
    #!/bin/bash
    etcd_port=${ETCD_PORT:-'2379'}
    etcd_server=${ETCD_SERVER:-'127.0.0.1'}

    cell=${CELL:-'zone1'}
    export ETCDCTL_API=2

    echo "add /vitess/global"
    etcdctl --endpoints "http://127.0.0.1:${etcd_port}" mkdir /vitess/global

    echo "add /vitess/$cell"
    etcdctl --endpoints "http://127.0.0.1:${etcd_port}" mkdir /vitess/$cell

    # And also add the CellInfo description for the cell.
    # If the node already exists, it's fine, means we used existing data.
    echo "add $cell CellInfo"
    set +e
    vtctl --topo_implementation etcd2 \
      --topo_global_server_address "127.0.0.1:${etcd_port}" \
      --topo_global_root /vitess/global VtctldCommand AddCellInfo \
      --root /vitess/$cell \
      --server-address "${etcd_server}:${etcd_port}" \
      $cell
  vtctld.sh: |-
    #!/bin/bash
    echo "starting vtctld"
    cell=${CELL:-'zone1'}
    grpc_port=${VTCTLD_GRPC_PORT:-'15999'}
    vtctld_web_port=${VTCTLD_WEB_PORT:-'15000'}
    topology_fags=${TOPOLOGY_FLAGS:-'--topo_implementation etcd2 --topo_global_server_address 127.0.0.1:2379 --topo_global_root /vitess/global'}

    su vitess <<EOF
    exec vtctld \
    $topology_fags \
    --alsologtostderr \
    --cell $cell \
    --service_map 'grpc-vtctl,grpc-vtctld' \
    --backup_storage_implementation file \
    --file_backup_storage_root $VTDATAROOT/backups \
    --log_dir $VTDATAROOT \
    --port $vtctld_web_port \
    --grpc_port $grpc_port \
    --pid_file $VTDATAROOT/vtctld.pid
    EOF
  vtconsensus.sh: |-
    #!/bin/bash
    . /scripts/set_config_variables.sh
    set_config_variables vtconsensus

    echo "starting vtconsensus"
    cell=${CELL:-'zone1'}

    vtconsensusport=${VTCONSENSUS_PORT:-'16000'}
    topology_fags=${TOPOLOGY_FLAGS:-'--topo_implementation etcd2 --topo_global_server_address 127.0.0.1:2379 --topo_global_root /vitess/global'}

    su vitess <<EOF
    exec vtconsensus \
      $topology_fags \
      --alsologtostderr \
      --refresh_interval $refresh_interval \
      --scan_repair_timeout $scan_repair_timeout \
      --log_dir ${VTDATAROOT} \
      --db_username "$MYSQL_ROOT_USER" \
      --db_password "$MYSQL_ROOT_PASSWORD"
    EOF
  vtgate.sh: |-
    #!/bin/bash
    . /scripts/set_config_variables.sh
    set_config_variables vtgate

    cell=${CELL:-'zone1'}
    web_port=${VTGATE_WEB_PORT:-'15001'}
    grpc_port=${VTGATE_GRPC_PORT:-'15991'}
    mysql_server_port=${VTGATE_MYSQL_PORT:-'15306'}
    mysql_server_socket_path="/tmp/mysql.sock"

    echo "starting vtgate."
    su vitess <<EOF
    exec vtgate \
      $TOPOLOGY_FLAGS \
      --alsologtostderr \
      --gateway_initial_tablet_timeout $gateway_initial_tablet_timeout \
      --healthcheck_timeout $healthcheck_timeout \
      --srv_topo_timeout $srv_topo_timeout \
      --grpc_keepalive_time $grpc_keepalive_time \
      --grpc_keepalive_timeout $grpc_keepalive_timeout \
      --log_dir $VTDATAROOT \
      --log_queries_to_file $VTDATAROOT/vtgate_querylog.txt \
      --port $web_port \
      --grpc_port $grpc_port \
      --mysql_server_port $mysql_server_port \
      --mysql_server_socket_path $mysql_server_socket_path \
      --cell $cell \
      --cells_to_watch $cell \
      --tablet_types_to_wait PRIMARY,REPLICA \
      --tablet_refresh_interval $tablet_refresh_interval \
      --service_map 'grpc-vtgateservice' \
      --pid_file $VTDATAROOT/vtgate.pid \
      --mysql_auth_server_impl none
    EOF
  binlog-collector.sh: |-
    #!/bin/bash
    set -e;
    LOG_DIR=/data/mysql/data;
    cd $LOG_DIR;
    LOG_START_TIME=$(mysqlbinlog $(ls -Ftr $LOG_DIR/|grep -e '^mysql-bin.*[[:digit:]]$'|head -n 1) |grep 'Xid =' |head -n 1|awk -F ' server id ' '{print $1}'|tr -d '#')
    for i in $(ls -Ft $LOG_DIR/|grep -e '^mysql-bin.*[[:digit:]]$'); do LOG_STOP_TIME=$(mysqlbinlog $i |grep 'Xid =' |tail -n 1|awk -F ' server id ' '{print $1}'|tr -d '#'); [[ "$LOG_STOP_TIME" != "" ]] && break;  done
    if [ "${LOG_START_TIME}" == "" ]; then LOG_START_TIME=${LOG_STOP_TIME}; fi
    LOG_START_TIME=$(date -d "$LOG_START_TIME" -u '+%Y-%m-%dT%H:%M:%SZ')
    LOG_STOP_TIME=$(date -d "$LOG_STOP_TIME" -u '+%Y-%m-%dT%H:%M:%SZ')
    printf "{\"startTime\": \"$LOG_START_TIME\" ,\"stopTime\": \"$LOG_STOP_TIME\"}"
