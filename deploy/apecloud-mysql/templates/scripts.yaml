apiVersion: v1
kind: ConfigMap
metadata:
  name: apecloud-mysql-scripts
  labels:
    {{- include "apecloud-mysql.labels" . | nindent 4 }}
data:
  setup.sh: |
    #!/bin/bash
    leader=$KB_MYSQL_LEADER
    followers=$KB_MYSQL_FOLLOWERS
    echo "leader=$leader"
    echo "followers=$followers"
    echo "KB_POD_NAME=$KB_POD_NAME"
    idx=${KB_POD_NAME##*-}
    host=$(eval echo \$KB_MYSQL_"$idx"_HOSTNAME)
    echo "host=$host"
    if [ -z "$leader" -o "$KB_POD_NAME" = "$leader" ]; then
      echo "no leader or self is leader, no need to call add."
    else 
      leader_idx=${leader##*-}
      leader_host=$(eval echo \$KB_MYSQL_"$leader_idx"_HOSTNAME)
      if [ ! -z $leader_host ]; then 
        host_flag="-h$leader_host"
      fi
      if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
        password_flag="-p$MYSQL_ROOT_PASSWORD"
      fi
      echo "mysql $host_flag -uroot $password_flag -e \"select * from information_schema.wesql_cluster_global;\" 2>&1"
      topology=`mysql $host_flag -uroot $password_flag -e "select * from information_schema.wesql_cluster_global;" 2>&1`
      echo "topology=$topology"
      in_topology=`echo $topology | grep "$KB_POD_NAME"`
      if [ -z "$in_topology" ]; then
        echo "mysql $host_flag -uroot $password_flag -e \"call dbms_consensus.add_learner('$host:13306');\" >> /tmp/setup_error.log 2>&1 "
        mysql $host_flag -uroot $password_flag -e "call dbms_consensus.add_learner('$host:13306');" >> /tmp/setup_error.log 2>&1 
        code=$?
        echo "exit code: $code" 
        if [ $code -ne 0 ]; then
          cat /tmp/setup_error.log
          already_exists=`cat /tmp/setup_error.log | grep "Target node already exists"`
          if [ -z "$already_exists" ]; then 
            exit $code
          fi
        fi 
        /scripts/upgrade-learner.sh &
      else 
        # if self is in topology and role is learner, upgrade it to follower
        # sometimes pod crash before upgrade learner finished
        is_learner=`echo $in_topology | grep "Learner"`
        if [ ! -z "$is_learner" ]; then 
          /scripts/upgrade-learner.sh &
        fi
      fi
    fi
    cluster_info="";
    for (( i=0; i< $KB_MYSQL_N; i++ )); do
      if [ $i -ne 0 ]; then
        cluster_info="$cluster_info;";
      fi;
      tmp_host=$(eval echo \$KB_MYSQL_"$i"_HOSTNAME)
      cluster_info="$cluster_info$tmp_host:13306";
    done; 
    cluster_info="$cluster_info@$(($idx+1))"; 
    echo "cluster_info=$cluster_info"; 
    mkdir -p /data/mysql/data /data/mysql/log
    chmod +777 -R /data/mysql; 
    echo "KB_MYSQL_CLUSTER_UID=$KB_MYSQL_CLUSTER_UID"
    cluster_uid_path=/data/mysql/.kb_cluster_uid
    if [ -f $cluster_uid_path ] && [ ! -f /data/mysql/data/.restore_new_cluster ]; then
      last_cluster_uid=`cat $cluster_uid_path`
      if [ "$last_cluster_uid" != "$KB_MYSQL_CLUSTER_UID" ]; then
        echo "recreate from existing volumes, touch /data/mysql/data/.resetup_db"
        touch /data/mysql/data/.resetup_db
      fi
    fi
    echo "$KB_MYSQL_CLUSTER_UID" > $cluster_uid_path
    if [ -z $leader ] || [ ! -f "/data/mysql/data/.restore" ]; then
      echo "docker-entrypoint.sh mysqld --defaults-file=/opt/mysql/my.cnf --cluster-start-index=$CLUSTER_START_INDEX --cluster-info=\"$cluster_info\" --cluster-id=$CLUSTER_ID"
      exec docker-entrypoint.sh mysqld --defaults-file=/opt/mysql/my.cnf --cluster-start-index=$CLUSTER_START_INDEX --cluster-info="$cluster_info" --cluster-id=$CLUSTER_ID
    elif [ "$KB_POD_NAME" != "$leader" ]; then
      echo "docker-entrypoint.sh mysqld --defaults-file=/opt/mysql/my.cnf --cluster-start-index=$CLUSTER_START_INDEX --cluster-info=\"$host:13306\" --cluster-id=$CLUSTER_ID"
      exec docker-entrypoint.sh mysqld --defaults-file=/opt/mysql/my.cnf --cluster-start-index=$CLUSTER_START_INDEX --cluster-info="$host:13306" --cluster-id=$CLUSTER_ID
    else
      echo "docker-entrypoint.sh mysqld --defaults-file=/opt/mysql/my.cnf --cluster-start-index=$CLUSTER_START_INDEX --cluster-info=\"$host:13306@1\" --cluster-id=$CLUSTER_ID"
      exec docker-entrypoint.sh mysqld --defaults-file=/opt/mysql/my.cnf --cluster-start-index=$CLUSTER_START_INDEX --cluster-info="$host:13306@1" --cluster-id=$CLUSTER_ID
    fi
  upgrade-learner.sh: |
    #!/bin/bash
    leader=$KB_MYSQL_LEADER
    idx=${KB_POD_NAME##*-}
    host=$(eval echo \$KB_MYSQL_"$idx"_HOSTNAME)
    leader_idx=${leader##*-}
    leader_host=$(eval echo \$KB_MYSQL_"$leader_idx"_HOSTNAME)
    if [ ! -z $leader_host ]; then 
      host_flag="-h$leader_host"
    fi
    if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
      password_flag="-p$MYSQL_ROOT_PASSWORD"
    fi
    while true
    do
      sleep 5
      mysql -uroot $password_flag -e "select  ROLE  from information_schema.wesql_cluster_local" > /tmp/role.log 2>&1 &
      pid=$!; sleep 2;
      if ! ps $pid > /dev/null; then 
        wait $pid; 
        code=$?; 
        if [ $code -ne 0 ]; then 
          cat /tmp/role.log >> /tmp/upgrade-learner.log
        else 
          role=`cat /tmp/role.log`
          echo "role: $role" >> /tmp/upgrade-learner.log
          if [ -z "$role" ]; then 
            echo "cannot get role" >> /tmp/upgrade-learner.log
          else 
            break
          fi
        fi
      else 
        kill -9 $pid
        echo "mysql timeout" >> /tmp/upgrade-learner.log
      fi
    done
    grep_learner=`echo $role | grep "Learner"`
    echo "grep learner: $grep_learner" >> /tmp/upgrade-learner.log
    if [ -z "$grep_learner" ]; then 
      exit 0
    fi
    while true
    do 
      mysql $host_flag -uroot $password_flag -e "call dbms_consensus.upgrade_learner('$host:13306');" >> /tmp/upgrade.log 2>&1 &
      pid=$!; sleep 2;
      if ! ps $pid > /dev/null; then 
        wait $pid; 
        code=$?; 
        if [ $code -ne 0 ]; then 
          cat /tmp/upgrade.log >> /tmp/upgrade-learner.log
          already_exists=`cat /tmp/upgrade.log | grep "Target node already exists"`
          if [ ! -z "$already_exists" ]; then 
            break
          fi 
        else 
          break
        fi
      else 
        kill -9 $pid
        echo "mysql call leader timeout" >> /tmp/upgrade-learner.log
      fi
      sleep 5
    done
  pre-stop.sh: |
    #!/bin/bash
    drop_followers() {
    echo "leader=$leader" >> /data/mysql/.kb_pre_stop.log
    echo "KB_POD_NAME=$KB_POD_NAME" >> /data/mysql/.kb_pre_stop.log
    if [ -z "$leader" -o "$KB_POD_NAME" = "$leader" ]; then
      echo "no leader or self is leader, exit" >> /data/mysql/.kb_pre_stop.log
      exit 0
    fi
    host=$(eval echo \$KB_MYSQL_"$idx"_HOSTNAME)
    echo "host=$host" >> /data/mysql/.kb_pre_stop.log
    leader_idx=${leader##*-}
    leader_host=$(eval echo \$KB_MYSQL_"$leader_idx"_HOSTNAME)
    if [ ! -z $leader_host ]; then 
      host_flag="-h$leader_host"
    fi
    if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
      password_flag="-p$MYSQL_ROOT_PASSWORD"
    fi
    echo "mysql $host_flag -uroot $password_flag -e \"call dbms_consensus.downgrade_follower('$host:13306');\" 2>&1 " >> /data/mysql/.kb_pre_stop.log
    mysql $host_flag -uroot $password_flag -e "call dbms_consensus.downgrade_follower('$host:13306');" 2>&1
    echo "mysql $host_flag -uroot $password_flag -e \"call dbms_consensus.drop_learner('$host:13306');\" 2>&1 " >> /data/mysql/.kb_pre_stop.log
    mysql $host_flag -uroot $password_flag -e "call dbms_consensus.drop_learner('$host:13306');" 2>&1
    }

    set_my_weight_to_zero() {
      if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
        password_flag="-p$MYSQL_ROOT_PASSWORD"
      fi

      if [ "$KB_POD_NAME" = "$leader" ]; then
        echo "self is leader, before scale in, need to set my election weight to 0." >> /data/mysql/.kb_pre_stop.log
        host=$(eval echo \$KB_MYSQL_"$idx"_HOSTNAME)
        echo "set weight to 0. mysql -uroot $password_flag -e \"call dbms_consensus.configure_follower('$host:13306',0 ,false);\" 2>&1" >> /data/mysql/.kb_pre_stop.log
        mysql -uroot $password_flag -e "call dbms_consensus.configure_follower('$host:13306',0 ,false);" 2>&1
      fi
    }

    switchover() {
      if [ ! -z $MYSQL_ROOT_PASSWORD ]; then 
        password_flag="-p$MYSQL_ROOT_PASSWORD"
      fi
      #new_leader_host=$KB_MYSQL_0_HOSTNAME
      if [ "$KB_POD_NAME" = "$leader" ]; then
        echo "self is leader, need to switchover" >> /data/mysql/.kb_pre_stop.log
        echo "try to get global cluster info" >> /data/mysql/.kb_pre_stop.log
        global_info=`mysql -uroot $password_flag 2>/dev/null -e "select IP_PORT from information_schema.wesql_cluster_global order by MATCH_INDEX desc;"`
        echo "all nodes: $global_info" >> /data/mysql/.kb_pre_stop.log
        global_info_arr=($global_info)
        echo "all nodes arrary: ${global_info_arr[0]},${global_info_arr[1]},${global_info_arr[2]},${global_info_arr[3]}"  >> /data/mysql/.kb_pre_stop.log
        echo "array size: ${#global_info_arr[@]}, the first one is not real address,just the field name IP_PORT"  >> /data/mysql/.kb_pre_stop.log

        host=$(eval echo \$KB_MYSQL_"$idx"_HOSTNAME)
        host_ip_port=$host:13306
        try_times=10
        for((i=1;i<${#global_info_arr[@]};i++)) do
          if [ "$host_ip_port" == "${global_info_arr[i]}" ];then
            echo "do not transfer to leader, leader:${global_info_arr[i]}"  >> /data/mysql/.kb_pre_stop.log;
          else
            echo "try to transfer to:${global_info_arr[i]}"  >> /data/mysql/.kb_pre_stop.log;
            echo "mysql -uroot $password_flag -e \"call dbms_consensus.change_leader('${global_info_arr[i]}');\" 2>&1" >> /data/mysql/.kb_pre_stop.log
            mysql -uroot $password_flag -e "call dbms_consensus.change_leader('${global_info_arr[i]}');" 2>&1
            sleep 1
            role_info=`mysql -uroot $password_flag 2>/dev/null -e "select ROLE from information_schema.wesql_cluster_local;"`
            role_info_arr=($role_info)
            real_role=${role_info_arr[1]}
            echo "this node's current role info:$real_role"  >> /data/mysql/.kb_pre_stop.log
            if [ "$real_role" == "Follower" ];then
              echo "transfer successfully" >> /data/mysql/.kb_pre_stop.log
              new_leader_host_and_port=${global_info_arr[i]}
              # get rid of port
              new_leader_host=${new_leader_host_and_port%%:*}
              echo "new_leader_host=$new_leader_host" >> /data/mysql/.kb_pre_stop.log
              leader=`echo "$new_leader_host" | cut -d "." -f 1`
              echo "leader_host: $leader"  >> /data/mysql/.kb_pre_stop.log
              idx=${KB_POD_NAME##*-}
              break
            fi
          fi
          ((try_times--))
          if [ $try_times -le 0 ];then
            echo "try too many times" >> /data/mysql/.kb_pre_stop.log
            break
          fi
        done
      fi
    }
    leader=`cat /etc/annotations/leader`
    idx=${KB_POD_NAME##*-}
    current_component_replicas=`cat /etc/annotations/component-replicas`
    echo "current replicas: $current_component_replicas" >> /data/mysql/.kb_pre_stop.log
    if [ ! $idx -lt $current_component_replicas ] && [ $current_component_replicas -ne 0 ]; then 
        # if idx greater than or equal to current_component_replicas means the cluster's scaling in
        # put .restore on pvc for next scaling out, if pvc not deleted
        touch /data/mysql/data/.restore; sync
        # set wegiht to 0 and switch leader before leader scaling in itself
        set_my_weight_to_zero
        switchover
        # only scaling in need to drop followers
        drop_followers
    elif [ $current_component_replicas -eq 0 ]; then
        # stop, do nothing.
        echo "stop, do nothing" >> /data/mysql/.kb_pre_stop.log
    else 
        # restart, switchover first.
        echo "Also try to switchover just before restart" >> /data/mysql/.kb_pre_stop.log
        switchover
        echo "no need to drop followers" >> /data/mysql/.kb_pre_stop.log
    fi
