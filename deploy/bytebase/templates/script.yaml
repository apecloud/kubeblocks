apiVersion: v1
kind: ConfigMap
metadata:
  name: bb-setup-script
data:
  init.sh: |
    set -o errexit
    set -e


    pip install requests kubernetes
    URL="${BYTEBASE_ENTRYPOINT_PORT_8080_TCP_ADDR}:${BYTEBASE_ENTRYPOINT_PORT_8080_TCP_PORT}"
    echo URL
    retry_count=0
    MAX_RETRIES=300
    while [ $retry_count -lt $MAX_RETRIES ]; do
    response_headers=$(wget --server-response --spider -nv  ${URL}  2>&1)
    response_code=$(echo "$response_headers" | awk '/HTTP/{print $2}')
    if [ "$response_code" -eq "200" ]; then
    echo "Response code is 200. Exiting..."
    break
    else
    echo "Response code is $response_code. Waiting..."
    retry_count=$((retry_count + 1))
    sleep 1  # 等待一秒后再次轮询
    fi
    done

    if [ $retry_count -eq $MAX_RETRIES ]; then
    echo "Max retries reached. Exiting..."
    exit
    fi

    python main.py "http://${BYTEBASE_ENTRYPOINT_PORT_8080_TCP_ADDR}" ${BYTEBASE_ENTRYPOINT_PORT_8080_TCP_PORT}

  main.py: |
    import os
    import sys
    import base64
    from kubernetes import client, config
    from client import Client
    import bytebase_api as API

    if __name__ == '__main__':
        config.load_incluster_config()
        # config.load_config()
        v1 = client.CoreV1Api()
        namespace = os.getenv("KB_NAMESPACE") or "default"

        # clusters contain the cluster label and the corresponding engine type.
        clusters = [
            ['app.kubernetes.io/name=apecloud-mysql', API.MYSQL],
            ['app.kubernetes.io/name=postgresql', API.POSTGRES],
            ['app.kubernetes.io/name=mongodb', API.MONGODB],
            ['app.kubernetes.io/name=redis', API.REDIS]
        ]
        url = sys.argv[1] or os.getenv("BYTEBASE_ENTRYPOINT_PORT_8080_TCP_ADDR")
        # url = os.getenv("BYTEBASE_ENTRYPOINT_PORT_8080_TCP_ADDR") or ""  # exit("get bytebase address failed")
        port = sys.argv[2] or os.getenv("BYTEBASE_ENTRYPOINT_PORT_8080_TCP_PORT")  # exit("get bytebase port failed")
        client = Client(f"{url}:{port}", "v1")

        # client = Client("http://localhost:18080", "v1")

        signup = {
            "state": "ACTIVE",
            "email": "admin@example.com",
            "title": "kubeblocks",
            "user_type": "USER",
            "password": "admin",
            "service_key": "",
            "mfa_enabled": False
        }

        res = client.signup(signup)
        print("signup result: ", res[0], res[1])
        #
        # create a new environment
        new_environment = {
            "uid": "kubeblocks",
            "name": "environments/kubeblocks",
            "title": "kubeblocks",
            "state": API.StateActive,
            "tier": API.TierUnprotected
        }
        res = client.create_environment(new_environment)
        print(res)

        # get service
        for info in clusters:
            label = info[0]
            engine_type = info[1]
            # services = v1.list_namespaced_service(namespace=namespace, label_selector=label)
            secrets = v1.list_namespaced_secret(namespace="", label_selector=label)
            for s in secrets.items:
                # print(s.data["host"], s.data["port"], s.data["username"], s.data["password"])
                # print(base64.b64decode(s.data["host"]).decode("utf-8"),
                #       base64.b64decode(s.data["port"]).decode("utf-8"),
                #       base64.b64decode(s.data["username"]).decode("utf-8"),
                #       base64.b64decode(s.data["password"]).decode("utf-8"),
                #       s.metadata.owner_references[0].name)
                name = s.metadata.owner_references[0].name
                username = base64.b64decode(s.data["username"]).decode("utf-8")
                password = base64.b64decode(s.data["password"]).decode("utf-8")
                host = base64.b64decode(s.data["host"]).decode("utf-8")
                port = base64.b64decode(s.data["port"]).decode("utf-8")
                new_instance = {
                    "name": name,
                    "title": name,
                    "state": API.StateActive,
                    "engine": engine_type,
                    "dataSources": [{
                        # "title": "",
                        "type": API.ADMIN,
                        "username": username,
                        "password": password,
                        "host": host,
                        "port": port,
                    }],
                    "environment": "environments/kubeblocks",
                }
                res = client.create_instance(new_instance)
                print(res)


  bytebase_api.py: |
    # Engine Type
    ENGINE_UNSPECIFIED = 0
    CLICKHOUSE = 1
    MYSQL = 2
    POSTGRES = 3
    SNOWFLAKE = 4
    SQLITE = 5
    TIDB = 6
    MONGODB = 7
    REDIS = 8
    ORACLE = 9
    SPANNER = 10
    MSSQL = 11
    REDSHIFT = 12
    MARIADB = 13
    OCEANBASE = 14
    DM = 15
    RISINGWAVE = 16

    # DataSourceType
    DATA_SOURCE_UNSPECIFIED = 0
    ADMIN = 1
    READ_ONLY = 2

    # Environment And Instance State
    StateActive = "ACTIVE"
    StateDeleted = "DELETED"

    # Environment Tier
    TierProtected = 1
    TierUnprotected = 2

  client.py: |
    import json
    import requests

    class Client:
        def __init__(self, url, version):
            self.url = url  # url should contain the protocol and port eg: "http://localhost:18080"
            self.version = version
            self.loginCookie = None

            self.email = ""
            self.password = ""

        def login(self, auth):
            if auth['email'] == '' or auth['password'] == '':
                return 0, ValueError("define username and password")

            auth['web'] = True
            rb = json.dumps(auth).encode('utf-8')
            headers = {'Content-Type': 'application/json'}
            url = f"{self.url}/{self.version}/auth/login"

            response = requests.post(url, data=rb, headers=headers)
            response.raise_for_status()

            accessToken = response.headers.get("Grpc-Metadata-Bytebase-Access-Token")
            refreshToken = response.headers.get("Grpc-Metadata-Bytebase-Refresh-Token")
            user = response.headers.get("Grpc-Metadata-Bytebase-User")

            self.loginCookie = {
                'AccessToken': accessToken,
                'RefreshToken': refreshToken,
                'User': user
            }

            return response.status_code, None

        def signup(self, data):
            if data['email'] == '' or data['password'] == '':
                return 0, ValueError("the username and password cannot be empty")

            url = f"{self.url}/{self.version}/users"
            response = requests.post(url, json=data)
            # response.raise_for_status()
            # print(response)
            self.email = data['email']
            self.password = data['password']
            return response.status_code, response.text

        def get_environment(self, environment_name="kubeblocks"):
            self.login({
                'email': self.email,
                'password': self.password
            })
            url = f"{self.url}/{self.version}/environments/{environment_name}"
            headers = {'Authorization': f"Bearer {self.loginCookie['AccessToken']}"}
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            res_data = json.loads(response.text)
            return res_data

        def create_environment(self, environment):
            self.login({
                'email': self.email,
                'password': self.password
            })
            url = f"{self.url}/{self.version}/environments?environment_id=kubeblocks"  # create a new enviroment named kubeblokcs
            headers = {'Authorization': f"Bearer {self.loginCookie['AccessToken']}"}
            response = requests.post(url, json=environment, headers=headers)
            response.raise_for_status()
            res_data = json.loads(response.text)
            return res_data

        def get_instance(self, name="test-sample-instance"):
            self.login({
                'email': self.email,
                'password': self.password
            })
            # url = f"{self.url}/{self.version}/environments/{environment_name}"

            instance_name = f"instances/{name}"
            url = f"{self.url}/{self.version}/{instance_name}"
            # self.client.head()
            headers = {'Authorization': f"Bearer {self.loginCookie['AccessToken']}"}
            response = requests.get(url, headers=headers)
            response.raise_for_status()

            if response.status_code == 404:
                raise Exception("Instance not found")
            elif response.status_code > 250:
                raise Exception(f"Error fetching instance, status code: {response.status_code}")

            res_data = json.loads(response.text)
            return res_data

        def create_instance(self, instance):
            self.login({
                'email': self.email,
                'password': self.password
            })
            instance_id = instance["name"]
            headers = {'Authorization': f"Bearer {self.loginCookie['AccessToken']}"}
            url = f"{self.url}/{self.version}/instances?instance_id=f{instance_id}"
            # instanceId = instance.get("title")
            # url = f"{self.url}/{self.version}/environments/101/instances?instanceId={instanceId}"
            response = requests.post(url, headers=headers, json=instance)
            response.raise_for_status()
            res_data = json.loads(response.text)
            return res_data
