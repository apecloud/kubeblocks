kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ include "csi-hostpath-driver.fullname" . }}
  labels:
    {{ include "csi-hostpath-driver.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "csi-hostpath-driver.fullname" . }}
  # One replica only:
  # Host path driver only works when everything runs
  # on a single node.
  replicas: 1
  selector:
    matchLabels:
      {{ include "csi-hostpath-driver.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{ include "csi-hostpath-driver.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "csi-hostpath-driver.serviceAccountName" . }}
      {{ with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "csi-hostpath-driver.serviceAccountName" . }}
      securityContext:
        {{  toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: hostpath
          #image: registry.k8s.io/sig-storage/hostpathplugin:v1.9.0
          image: "{{ .Values.image.registry }}{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "--drivername=hostpath.csi.k8s.io"
            - "--v=5"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
          ports:
            - containerPort: 9898
              name: healthz
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 2
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
              name: mountpoint-dir
            - mountPath: /var/lib/kubelet/plugins
              mountPropagation: Bidirectional
              name: plugins-dir
            - mountPath: /csi-data-dir
              name: csi-data-dir
            - mountPath: /dev
              name: dev-dir

        - name: csi-external-health-monitor-controller
          #image: registry.k8s.io/sig-storage/csi-external-health-monitor-controller:v0.7.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.healthmonitor.image.repository }}:{{ .Values.sidecars.healthmonitor.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /csi/csi.sock

          volumeMounts:
            - name: socket-dir
              mountPath: /csi

        - name: node-driver-registrar
          #image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.6.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.registrar.image.repository }}:{{ .Values.sidecars.registrar.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=/var/lib/kubelet/plugins/csi-hostpath/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /registration
              name: registration-dir
            - mountPath: /csi-data-dir
              name: csi-data-dir

        - name: liveness-probe
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
          #image: registry.k8s.io/sig-storage/livenessprobe:v2.8.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.livenessprobe.image.repository }}:{{ .Values.sidecars.livenessprobe.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --csi-address=/csi/csi.sock
            - --health-port=9898

        - name: csi-attacher
          #image: registry.k8s.io/sig-storage/csi-attacher:v4.0.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.attacher.image.repository }}:{{ .Values.sidecars.attacher.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          volumeMounts:
            - mountPath: /csi
              name: socket-dir

        - name: csi-provisioner
          #image: registry.k8s.io/sig-storage/csi-provisioner:v3.3.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.provisioner.image.repository }}:{{ .Values.sidecars.provisioner.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - -v=5
            - --csi-address=/csi/csi.sock
            - --feature-gates=Topology=true
            # end csi-provisioner args
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          volumeMounts:
            - mountPath: /csi
              name: socket-dir

        - name: csi-resizer
          #image: registry.k8s.io/sig-storage/csi-resizer:v1.6.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.resizer.image.repository }}:{{ .Values.sidecars.resizer.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - -v=5
            - -csi-address=/csi/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          volumeMounts:
            - mountPath: /csi
              name: socket-dir

        - name: csi-snapshotter
          #image: registry.k8s.io/sig-storage/csi-snapshotter:v6.1.0
          image: "{{ .Values.image.registry }}{{ .Values.sidecars.snapshotter.image.repository }}:{{ .Values.sidecars.snapshotter.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - -v=5
            - --csi-address=/csi/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          volumeMounts:
            - mountPath: /csi
              name: socket-dir

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/csi-hostpath
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
          name: mountpoint-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
          name: plugins-dir
        - hostPath:
            # 'path' is where PV data is persisted on host.
            # using /tmp is also possible while the PVs will not available after plugin container recreation or host reboot
            path: /var/lib/csi-hostpath-data/
            type: DirectoryOrCreate
          name: csi-data-dir
        - hostPath:
            path: /dev
            type: Directory
          name: dev-dir
