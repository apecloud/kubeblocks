apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: elasticsearch
  labels:
    {{- include "elasticsearch.labels" . | nindent 4 }}
spec:
  type: elasticsearch
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "https://$(SVC_FQDN):$(SVC_PORT_rest-api)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_rest-api)"
  
  componentDefs:

    - name: elasticsearch
      characterType: elasticsearch
      
      configSpecs: 
      - name: elasticsearch-config-template
        templateRef: elasticsearch-config-template
        volumeName: elasticsearch-config  
        namespace: {{.Release.Namespace}}
      workloadType: Stateful 

      service: # Source: elasticsearch/templates/service.yaml   -> coordinating-only
        ports:
          - name: rest-api  # tcp
            port: 9200
            targetPort: rest-api
          - name: transport  # tcp
            port: 9300
            targetPort: transport
      volumeTypes:
        - name: data
          type: data

      podSpec:  
        initContainers:
        - name: sysctl
          imagePullPolicy: IfNotPresent
          command:
          - sh   
          - -c
          - |
            set -xe
            DESIRED="262144"
            CURRENT=$(sysctl -n vm.max_map_count)
            if [ "$DESIRED" -gt "$CURRENT" ]; then
              sysctl -w vm.max_map_count=$DESIRED
            fi
          securityContext:
            runAsUser: 0
            privileged: true
        containers:
          - name: elasticsearch
            imagePullPolicy: IfNotPresent

            securityContext:
              runAsNonRoot: true
              runAsUser: 1001

            readinessProbe:
              tcpSocket:
                port: 9200
              periodSeconds: 5
              timeoutSeconds: 3
              failureThreshold: 3

            startupProbe:
              tcpSocket:
                port: 9200
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 3
              failureThreshold: 30

            ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
            - name: metrics
              containerPort: 9600

            env: 
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "true"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "$(KB_CLUSTER_NAME)"
            - name: ELASTICSEARCH_IS_DEDICATED_NODE  # is dedicated node
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES  # node type when behaving as a 'dedicated node'
              value: ""  
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: ""
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "1"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: "$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)-0"
            - name: ELASTICSEARCH_ENABLE_SECURITY
              value: "false"
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "1"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "128m"

            volumeMounts:
              - mountPath: /usr/share/elasticsearch/data
                name: data
              - mountPath: /usr/share/elasticsearch/config/elasticsearch.yaml
                subPath: elasticsearch.yaml
                name: elasticsearch-config

# https://discuss.elastic.co/t/kibana-not-able-to-connect-to-elastic-master-in-kubernetes-from-elastic-helm/185759/5
          - name: elasticsearch-master-graceful-termination-handler
            imagePullPolicy: IfNotPresent
            command:
            - "sh"
            - -c
            - |
              #!/usr/bin/env bash
              set -e

              http () {
                  local path="${1}"
                  if [ -n "${USERNAME}" ] && [ -n "${PASSWORD}" ]; then
                    BASIC_AUTH="-u ${USERNAME}:${PASSWORD}"
                  else
                    BASIC_AUTH=''
                  fi
                  curl -XGET -s -k --fail ${BASIC_AUTH} https://$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)-headless:9200:${path}
              }

              cleanup () {
                while true ; do
                  local master="$(http "/_cat/master?h=node" || echo "")"
                  if [[ $master == "$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)"* && $master != "${NODE_NAME}" ]]; then
                    echo "This node is not master."
                    break
                  fi
                  echo "This node is still master, waiting gracefully for it to step down"
                  sleep 1
                done

                exit 0
              }

              trap cleanup TERM

              sleep infinity &
              wait $!

    - name: metrics
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: 9114 # Source: elasticsearch/templates/metrics/deployment.yaml
      characterType: elasticsearch-metrics
      workloadType: Stateless
      service:
        ports:
        - name: metrics
          port: 9114
          targetPort: metrics

      podSpec:
        containers:
        - name: metrics
          
          imagePullPolicy: "{{ .Values.image.pullPolicy }}" 
          securityContext: 
            privileged: true
            runAsUser: 1001
          command:
            []
          args: 
            - --es.uri=http://$(KB_CLUSTER_NAME)-elasticsearch:9200
            - --es.all
            - --es.ssl-skip-verify
            - --es.indices
            - --es.shards
          env: 
          startupProbe:
            tcpSocket:
              port: 9114
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 20
            successThreshold: 1
            initialDelaySeconds: 10
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: metrics
          ports:
            - name: metrics
              containerPort: 9114