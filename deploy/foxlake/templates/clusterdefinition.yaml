apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: foxlake
  labels:
    {{- include "foxlake.labels" . | nindent 4 }}

  annotations:
    k8s.foxlake.io/mpp-worker-image: {{ .Values.images.foxlake.repository }}:{{ .Values.images.foxlake.tag }}
    k8s.foxlake.io/mpp-worker-tolerations: spot=true:NoSchedule
spec:
  connectionCredential:
    username: "foxlake_root"
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_foxlake)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_foxlake)"
    metaDbPasswd: "$(RANDOM_PASSWD)"
    minioAccessKey: {{ .Values.minio.accessKey }}
    minioSecretKey: {{ .Values.minio.secretKey }}
  componentDefs:
    - name: foxlake-server
      workloadType: Stateless
      characterType: foxlake
      service:
        ports:
          - name: foxlake
            targetPort: foxlake
            port: 11288
            nodePort: null
          - name: foxlake-coordinator
            targetPort: mpp
            port: 10030
            nodePort: null
      podSpec:
        securityContext:
          fsGroup: 1001
          seccompProfile:
            type: RuntimeDefault
        initContainers:
          - name: wait-mysql-ready
            image: busybox:1.35
            command: [ "sh" ]
            args: [ "-c", 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z $(MYSQL_SERVICE_NAME) 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL Server has started";' ]
            env:
              - name: MYSQL_SERVICE_NAME
                value: "{{ include "foxlake.metadb.fqdn" . }}"
            resources:
              limits:
                cpu: "10m"
                memory: "64Mi"

          - name: foxlake-gms-initializer
            env:
              - name: initializeGms
                value: "true"
              {{- include "foxlake.env" . | nindent 14 }}
            resources:
              limits:
                cpu: "100m"
                memory: "1Gi"
        containers:
          - name: foxlake
            ports:
              - containerPort: 10030
                name: mpp
              - containerPort: 11288
                name: foxlake
            env:
              {{- include "foxlake.env" . | nindent 14 }}
      systemAccounts:
        cmdExecutorConfig:
          image: {{ .Values.images.mysql.repository }}:{{ .Values.images.mysql.tag }}
          command:
          - mysql
          args:
          - -u$(MYSQL_ROOT_USER)
          - -p$(MYSQL_ROOT_PASSWORD)
          - -h$(KB_ACCOUNT_ENDPOINT)
          - -P$(SVC_PORT)
          - -e
          - "$(KB_ACCOUNT_STATEMENT)"
          env:
          - name: MYSQL_ROOT_USER
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: username
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: password
          - name: SVC_PORT
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: port
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
                deletion: DROP USER IF EXISTS $(USERNAME);
    - name: foxlake-metadb
      workloadType: Stateful
      characterType: mysql
      service:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
      podSpec:
        containers:
          - name: mysql
            env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: metaDbPasswd
            ports:
              - containerPort: 3306
                name: mysql
            volumeMounts:
              - name: data
                mountPath: /var/lib/mysql
    - name: foxlake-minio
      workloadType: Stateful
      characterType: minio
      probes:
      logconfigs:
      configSpecs:
      scriptsSpecs:
      service:
        ports:
          - name: http
            port: 9000
            targetPort: 9000
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: minio
            imagePullPolicy: {{default .Values.images.pullPolicy "IfNotPresent"}}
            securityContext:
              fsGroup: 1000
              runAsGroup: 1000
              runAsUser: 1000
            livenessProbe:
              failureThreshold: 5
              httpGet:
                path: /minio/health/live
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 5
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              failureThreshold: 5
              initialDelaySeconds: 5
              periodSeconds: 5
              successThreshold: 1
              tcpSocket:
                port: 9000
              timeoutSeconds: 1
            startupProbe:
              failureThreshold: 60
              periodSeconds: 10
              successThreshold: 1
              tcpSocket:
                port: 9000
              timeoutSeconds: 5
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            serviceAccountName: "$(KB_CLUSTER_NAME-minio)"
            volumeMounts:
              - mountPath: /export
                name: export
            volumes:
              - name: minio-user
                secret:
                  defaultMode: 420
                  secretName: $(CONN_CREDENTIAL_SECRET_NAME)
            command:
              - /bin/sh
              - -ce
              - /usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export
            env:
              - name: MINIO_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    key: minioAccessKey
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
              - name: MINIO_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    key: minioSecretKey
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
