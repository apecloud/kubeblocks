# Standard Kubernetes Kind declaration. Required.
apiVersion: dataprotection.infracreate.com/v1alpha1
# Standard Kubernetes Kind declaration. Required.
kind: BackupTool
# Standard Kubernetes metadata. Required.
metadata:
  # Backup name. Maybe any valid Kubernetes object name. Required.
  name: xtrabackup-mysql
  labels:
    { { - include "wesqlapp.labels" . | nindent 4 } }

spec:
  # backup tool image
  image: percona/percona-xtrabackup

  # database engine to support in the backup.
  # Required.
  databaseEngine: mysql

  # backup tool runtime kind. validate value: job
  deployKind: job

  # limit the backup tool container resource
  # ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources:
    limits:
      # Limits and requests for CPU resources are measured in cpu units.
      # In Kubernetes, 1 CPU unit is equivalent to 1 physical CPU core, or 1 virtual core,
      # depending on whether the node is a physical host or a virtual machine running inside a physical machine.
      cpu: "1"
      # Limits and requests for memory are measured in bytes.
      # You can express memory as a plain integer or as a fixed-point number
      # using one of these quantity suffixes: E, P, T, G, M, k.
      # You can also use the power-of-two equivalents: Ei, Pi, Ti, Gi, Mi, Ki.
      # For example, the following represent roughly the same value: 128974848, 129e6, 129M,  128974848000m, 123Mi
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 128Mi

  env:
    - name: DATA_DIR
      value: /var/lib/mysql

  # backup tool can support physical restore, in this case, restore must be RESTART database.
  physical:
    restoreCommands:
      - >
        set -e;
        mkdir -p /tmp/data/ && cd /tmp/data;
        xbstream -x < /${BACKUP_DIR}/${BACKUP_NAME}.xbstream;
        xtrabackup --decompress  --target-dir=/tmp/data/;
        find . -name "*.qp"|xargs rm -f;
        rm -rf ${DATA_DIR}/*;
        rsync -avrP /tmp/data/ ${DATA_DIR}/;
        rm -rf /tmp/data/;
        chmod -R 0777 ${DATA_DIR};

    # Optional
    incrementalRestoreCommands: []

  # backup tool can support logical restore, in this case, restore NOT RESTART database.
  logical:
    restoreCommands: []

    # Optional
    incrementalRestoreCommands: []

  # Array of command that dbaas can do database backup.
  # from invoke args
  # the order of commands follows the order of array.
  backupCommands:
    - xtrabackup --compress --backup  --safe-slave-backup --slave-info --stream=xbstream --host=${DB_HOST} --user=${DB_USER} --password=${DB_PASSWORD} --datadir=${DATA_DIR} > /${BACKUP_DIR}/${BACKUP_NAME}.xbstream

  # Array of command that dbaas can do database incremental backup.
  # like xtrabackup, that can performs an incremental backup file.
  # Required if spec.backupType is defined "incremental".
  # Optional
  incrementalBackupCommands: []