---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: clusters.apps.kubeblocks.io
spec:
  group: apps.kubeblocks.io
  names:
    categories:
    - kubeblocks
    - all
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: ClusterDefinition referenced by cluster.
      jsonPath: .spec.clusterDefinitionRef
      name: CLUSTER-DEFINITION
      type: string
    - description: Cluster Application Version.
      jsonPath: .spec.clusterVersionRef
      name: VERSION
      type: string
    - description: Cluster termination policy.
      jsonPath: .spec.terminationPolicy
      name: TERMINATION-POLICY
      type: string
    - description: Cluster Status.
      jsonPath: .status.phase
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster
            properties:
              affinity:
                description: affinity is a group of affinity scheduling rules.
                properties:
                  nodeLabels:
                    additionalProperties:
                      type: string
                    description: nodeLabels describes that pods must be scheduled
                      to the nodes with the specified node labels.
                    type: object
                  podAntiAffinity:
                    default: Preferred
                    description: podAntiAffinity describes the anti-affinity level
                      of pods within a component. Preferred means try spread pods
                      by `TopologyKeys`. Required means must spread pods by `TopologyKeys`.
                    enum:
                    - Preferred
                    - Required
                    type: string
                  tenancy:
                    default: SharedNode
                    description: tenancy describes how pods are distributed across
                      node. SharedNode means multiple pods may share the same node.
                      DedicatedNode means each pod runs on their own dedicated node.
                    enum:
                    - SharedNode
                    - DedicatedNode
                    type: string
                  topologyKeys:
                    description: topologyKey is the key of node labels. Nodes that
                      have a label with this key and identical values are considered
                      to be in the same topology. It's used as the topology domain
                      for pod anti-affinity and pod spread constraint. Some well-known
                      label keys, such as "kubernetes.io/hostname" and "topology.kubernetes.io/zone"
                      are often used as TopologyKey, as well as any other custom label
                      key.
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: set
                type: object
              clusterDefinitionRef:
                description: Cluster referenced ClusterDefinition name, this is an
                  immutable attribute.
                pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                type: string
              clusterVersionRef:
                description: Cluster referenced ClusterVersion name.
                pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                type: string
              componentSpecs:
                description: List of componentSpecs you want to replace in ClusterDefinition
                  and ClusterVersion. It will replace the field in ClusterDefinition's
                  and ClusterVersion's component if type is matching.
                items:
                  properties:
                    affinity:
                      description: affinity describes affinities which specific by
                        users.
                      properties:
                        nodeLabels:
                          additionalProperties:
                            type: string
                          description: nodeLabels describes that pods must be scheduled
                            to the nodes with the specified node labels.
                          type: object
                        podAntiAffinity:
                          default: Preferred
                          description: podAntiAffinity describes the anti-affinity
                            level of pods within a component. Preferred means try
                            spread pods by `TopologyKeys`. Required means must spread
                            pods by `TopologyKeys`.
                          enum:
                          - Preferred
                          - Required
                          type: string
                        tenancy:
                          default: SharedNode
                          description: tenancy describes how pods are distributed
                            across node. SharedNode means multiple pods may share
                            the same node. DedicatedNode means each pod runs on their
                            own dedicated node.
                          enum:
                          - SharedNode
                          - DedicatedNode
                          type: string
                        topologyKeys:
                          description: topologyKey is the key of node labels. Nodes
                            that have a label with this key and identical values are
                            considered to be in the same topology. It's used as the
                            topology domain for pod anti-affinity and pod spread constraint.
                            Some well-known label keys, such as "kubernetes.io/hostname"
                            and "topology.kubernetes.io/zone" are often used as TopologyKey,
                            as well as any other custom label key.
                          items:
                            type: string
                          type: array
                          x-kubernetes-list-type: set
                      type: object
                    componentDefRef:
                      description: componentDefRef reference componentDef defined
                        in ClusterDefinition spec.
                      maxLength: 63
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    enabledLogs:
                      description: enabledLogs indicate which log file takes effect
                        in database cluster element is the log type which defined
                        in cluster definition logConfig.name, and will set relative
                        variables about this log type in database kernel.
                      items:
                        type: string
                      type: array
                      x-kubernetes-list-type: set
                    issuer:
                      description: issuer who provides tls certs required when TLS
                        enabled
                      properties:
                        name:
                          default: KubeBlocks
                          description: 'name of issuer options supported: - KubeBlocks
                            - Certificates signed by KubeBlocks Operator. - UserProvided
                            - User provided own CA-signed certificates.'
                          enum:
                          - KubeBlocks
                          - UserProvided
                          type: string
                        secretRef:
                          description: secretRef, Tls certs Secret reference required
                            when from is UserProvided
                          properties:
                            ca:
                              description: ca cert key in Secret
                              type: string
                            cert:
                              description: cert key in Secret
                              type: string
                            key:
                              description: key of TLS private key in Secret
                              type: string
                            name:
                              description: name of the Secret
                              type: string
                          required:
                          - ca
                          - cert
                          - key
                          - name
                          type: object
                      required:
                      - name
                      type: object
                    monitor:
                      default: false
                      description: monitor which is a switch to enable monitoring,
                        default is false KubeBlocks provides an extension mechanism
                        to support component level monitoring, which will scrape metrics
                        auto or manually from servers in component and export metrics
                        to Time Series Database.
                      type: boolean
                    name:
                      description: name defines cluster's component name.
                      maxLength: 15
                      pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
                      type: string
                    primaryIndex:
                      description: primaryIndex determines which index is primary
                        when workloadType is Replication, index number starts from
                        zero.
                      format: int32
                      minimum: 0
                      type: integer
                    replicas:
                      default: 1
                      description: Component replicas, use default value in ClusterDefinition
                        spec. if not specified.
                      format: int32
                      minimum: 0
                      type: integer
                    resources:
                      description: resources requests and limits of workload.
                      properties:
                        claims:
                          description: "Claims lists the names of resources, defined
                            in spec.resourceClaims, that are used by this container.
                            \n This is an alpha field and requires enabling the DynamicResourceAllocation
                            feature gate. \n This field is immutable."
                          items:
                            description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                            properties:
                              name:
                                description: Name must match the name of one entry
                                  in pod.spec.resourceClaims of the Pod where this
                                  field is used. It makes that resource available
                                  inside a container.
                                type: string
                            required:
                            - name
                            type: object
                          type: array
                          x-kubernetes-list-map-keys:
                          - name
                          x-kubernetes-list-type: map
                        limits:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Limits describes the maximum amount of compute
                            resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                        requests:
                          additionalProperties:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                          description: 'Requests describes the minimum amount of compute
                            resources required. If Requests is omitted for a container,
                            it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. More info:
                            https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                          type: object
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    services:
                      description: services expose endpoints can be accessed by clients
                      items:
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'If ServiceType is LoadBalancer, cloud provider
                              related parameters can be put here More info: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer'
                            type: object
                          name:
                            description: Service name
                            type: string
                          serviceType:
                            default: ClusterIP
                            description: 'serviceType determines how the Service is
                              exposed. Valid options are ClusterIP, NodePort, and
                              LoadBalancer. "ClusterIP" allocates a cluster-internal
                              IP address for load-balancing to endpoints. Endpoints
                              are determined by the selector or if that is not specified,
                              by manual construction of an Endpoints object or EndpointSlice
                              objects. If clusterIP is "None", no virtual IP is allocated
                              and the endpoints are published as a set of endpoints
                              rather than a virtual IP. "NodePort" builds on ClusterIP
                              and allocates a port on every node which routes to the
                              same endpoints as the clusterIP. "LoadBalancer" builds
                              on NodePort and creates an external load-balancer (if
                              supported in the current cloud) which routes to the
                              same endpoints as the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                            enum:
                            - ClusterIP
                            - NodePort
                            - LoadBalancer
                            type: string
                            x-kubernetes-preserve-unknown-fields: true
                        required:
                        - name
                        type: object
                      type: array
                    switchPolicy:
                      description: switchPolicy defines the strategy for switchover
                        and failover when workloadType is Replication.
                      properties:
                        type:
                          default: MaximumAvailability
                          description: clusterSwitchPolicy type defined by Provider
                            in ClusterDefinition, refer components[i].replicationSpec.switchPolicies[x].type
                          enum:
                          - MaximumAvailability
                          - MaximumDataProtection
                          - Noop
                          type: string
                      type: object
                    tls:
                      description: tls should be enabled or not
                      type: boolean
                    tolerations:
                      description: Component tolerations will override ClusterSpec.Tolerations
                        if specified.
                      items:
                        description: The pod this Toleration is attached to tolerates
                          any taint that matches the triple <key,value,effect> using
                          the matching operator <operator>.
                        properties:
                          effect:
                            description: Effect indicates the taint effect to match.
                              Empty means match all taint effects. When specified,
                              allowed values are NoSchedule, PreferNoSchedule and
                              NoExecute.
                            type: string
                          key:
                            description: Key is the taint key that the toleration
                              applies to. Empty means match all taint keys. If the
                              key is empty, operator must be Exists; this combination
                              means to match all values and all keys.
                            type: string
                          operator:
                            description: Operator represents a key's relationship
                              to the value. Valid operators are Exists and Equal.
                              Defaults to Equal. Exists is equivalent to wildcard
                              for value, so that a pod can tolerate all taints of
                              a particular category.
                            type: string
                          tolerationSeconds:
                            description: TolerationSeconds represents the period of
                              time the toleration (which must be of effect NoExecute,
                              otherwise this field is ignored) tolerates the taint.
                              By default, it is not set, which means tolerate the
                              taint forever (do not evict). Zero and negative values
                              will be treated as 0 (evict immediately) by the system.
                            format: int64
                            type: integer
                          value:
                            description: Value is the taint value the toleration matches
                              to. If the operator is Exists, the value should be empty,
                              otherwise just a regular string.
                            type: string
                        type: object
                      type: array
                      x-kubernetes-preserve-unknown-fields: true
                    volumeClaimTemplates:
                      description: volumeClaimTemplates information for statefulset.spec.volumeClaimTemplates.
                      items:
                        properties:
                          name:
                            description: Ref ClusterVersion.spec.components.containers.volumeMounts.name
                            type: string
                          spec:
                            description: spec defines the desired characteristics
                              of a volume requested by a pod author.
                            properties:
                              accessModes:
                                description: 'accessModes contains the desired access
                                  modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                                items:
                                  type: string
                                type: array
                              dataSource:
                                description: 'dataSource field can be used to specify
                                  either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                                  * An existing PVC (PersistentVolumeClaim) If the
                                  provisioner or an external controller can support
                                  the specified data source, it will create a new
                                  volume based on the contents of the specified data
                                  source. When the AnyVolumeDataSource feature gate
                                  is enabled, dataSource contents will be copied to
                                  dataSourceRef, and dataSourceRef contents will be
                                  copied to dataSource when dataSourceRef.namespace
                                  is not specified. If the namespace is specified,
                                  then dataSourceRef will not be copied to dataSource.'
                                properties:
                                  apiGroup:
                                    description: APIGroup is the group for the resource
                                      being referenced. If APIGroup is not specified,
                                      the specified Kind must be in the core API group.
                                      For any other third-party types, APIGroup is
                                      required.
                                    type: string
                                  kind:
                                    description: Kind is the type of resource being
                                      referenced
                                    type: string
                                  name:
                                    description: Name is the name of resource being
                                      referenced
                                    type: string
                                required:
                                - kind
                                - name
                                type: object
                              dataSourceRef:
                                description: 'dataSourceRef specifies the object from
                                  which to populate the volume with data, if a non-empty
                                  volume is desired. This may be any object from a
                                  non-empty API group (non core object) or a PersistentVolumeClaim
                                  object. When this field is specified, volume binding
                                  will only succeed if the type of the specified object
                                  matches some installed volume populator or dynamic
                                  provisioner. This field will replace the functionality
                                  of the dataSource field and as such if both fields
                                  are non-empty, they must have the same value. For
                                  backwards compatibility, when namespace isn''t specified
                                  in dataSourceRef, both fields (dataSource and dataSourceRef)
                                  will be set to the same value automatically if one
                                  of them is empty and the other is non-empty. When
                                  namespace is specified in dataSourceRef, dataSource
                                  isn''t set to the same value and must be empty.
                                  There are three important differences between dataSource
                                  and dataSourceRef: * While dataSource only allows
                                  two specific types of objects, dataSourceRef allows
                                  any non-core object, as well as PersistentVolumeClaim
                                  objects. * While dataSource ignores disallowed values
                                  (dropping them), dataSourceRef preserves all values,
                                  and generates an error if a disallowed value is
                                  specified. * While dataSource only allows local
                                  objects, dataSourceRef allows objects in any namespaces.
                                  (Beta) Using this field requires the AnyVolumeDataSource
                                  feature gate to be enabled. (Alpha) Using the namespace
                                  field of dataSourceRef requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.'
                                properties:
                                  apiGroup:
                                    description: APIGroup is the group for the resource
                                      being referenced. If APIGroup is not specified,
                                      the specified Kind must be in the core API group.
                                      For any other third-party types, APIGroup is
                                      required.
                                    type: string
                                  kind:
                                    description: Kind is the type of resource being
                                      referenced
                                    type: string
                                  name:
                                    description: Name is the name of resource being
                                      referenced
                                    type: string
                                  namespace:
                                    description: Namespace is the namespace of resource
                                      being referenced Note that when a namespace
                                      is specified, a gateway.networking.k8s.io/ReferenceGrant
                                      object is required in the referent namespace
                                      to allow that namespace's owner to accept the
                                      reference. See the ReferenceGrant documentation
                                      for details. (Alpha) This field requires the
                                      CrossNamespaceVolumeDataSource feature gate
                                      to be enabled.
                                    type: string
                                required:
                                - kind
                                - name
                                type: object
                              resources:
                                description: 'resources represents the minimum resources
                                  the volume should have. If RecoverVolumeExpansionFailure
                                  feature is enabled users are allowed to specify
                                  resource requirements that are lower than previous
                                  value but must still be higher than capacity recorded
                                  in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                                properties:
                                  claims:
                                    description: "Claims lists the names of resources,
                                      defined in spec.resourceClaims, that are used
                                      by this container. \n This is an alpha field
                                      and requires enabling the DynamicResourceAllocation
                                      feature gate. \n This field is immutable."
                                    items:
                                      description: ResourceClaim references one entry
                                        in PodSpec.ResourceClaims.
                                      properties:
                                        name:
                                          description: Name must match the name of
                                            one entry in pod.spec.resourceClaims of
                                            the Pod where this field is used. It makes
                                            that resource available inside a container.
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    type: array
                                    x-kubernetes-list-map-keys:
                                    - name
                                    x-kubernetes-list-type: map
                                  limits:
                                    additionalProperties:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    description: 'Limits describes the maximum amount
                                      of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                    type: object
                                  requests:
                                    additionalProperties:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    description: 'Requests describes the minimum amount
                                      of compute resources required. If Requests is
                                      omitted for a container, it defaults to Limits
                                      if that is explicitly specified, otherwise to
                                      an implementation-defined value. More info:
                                      https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                    type: object
                                type: object
                              selector:
                                description: selector is a label query over volumes
                                  to consider for binding.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              storageClassName:
                                description: 'storageClassName is the name of the
                                  StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                                type: string
                              volumeMode:
                                description: volumeMode defines what type of volume
                                  is required by the claim. Value of Filesystem is
                                  implied when not included in claim spec.
                                type: string
                              volumeName:
                                description: volumeName is the binding reference to
                                  the PersistentVolume backing this claim.
                                type: string
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        required:
                        - name
                        type: object
                      type: array
                  required:
                  - componentDefRef
                  - name
                  - replicas
                  type: object
                minItems: 1
                type: array
                x-kubernetes-list-map-keys:
                - name
                x-kubernetes-list-type: map
              terminationPolicy:
                description: Cluster termination policy. One of DoNotTerminate, Halt,
                  Delete, WipeOut. DoNotTerminate will block delete operation. Halt
                  will delete workload resources such as statefulset, deployment workloads
                  but keep PVCs. Delete is based on Halt and deletes PVCs. WipeOut
                  is based on Delete and wipe out all volume snapshots and snapshot
                  data from backup storage location.
                enum:
                - DoNotTerminate
                - Halt
                - Delete
                - WipeOut
                type: string
              tolerations:
                description: tolerations are attached to tolerate any taint that matches
                  the triple <key,value,effect> using the matching operator <operator>.
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
                x-kubernetes-preserve-unknown-fields: true
            required:
            - clusterDefinitionRef
            - terminationPolicy
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster
            properties:
              clusterDefGeneration:
                description: clusterDefGeneration represents the generation number
                  of ClusterDefinition referenced.
                format: int64
                type: integer
              components:
                additionalProperties:
                  description: ClusterComponentStatus record components status information
                  properties:
                    consensusSetStatus:
                      description: consensusSetStatus role and pod name mapping.
                      properties:
                        followers:
                          description: followers status.
                          items:
                            properties:
                              accessMode:
                                default: ReadWrite
                                description: accessMode, what service this pod provides.
                                enum:
                                - None
                                - Readonly
                                - ReadWrite
                                type: string
                              name:
                                default: leader
                                description: name role name.
                                type: string
                              pod:
                                default: Unknown
                                description: pod name.
                                type: string
                            required:
                            - accessMode
                            - name
                            - pod
                            type: object
                          type: array
                        leader:
                          description: leader status.
                          properties:
                            accessMode:
                              default: ReadWrite
                              description: accessMode, what service this pod provides.
                              enum:
                              - None
                              - Readonly
                              - ReadWrite
                              type: string
                            name:
                              default: leader
                              description: name role name.
                              type: string
                            pod:
                              default: Unknown
                              description: pod name.
                              type: string
                          required:
                          - accessMode
                          - name
                          - pod
                          type: object
                        learner:
                          description: learner status.
                          properties:
                            accessMode:
                              default: ReadWrite
                              description: accessMode, what service this pod provides.
                              enum:
                              - None
                              - Readonly
                              - ReadWrite
                              type: string
                            name:
                              default: leader
                              description: name role name.
                              type: string
                            pod:
                              default: Unknown
                              description: pod name.
                              type: string
                          required:
                          - accessMode
                          - name
                          - pod
                          type: object
                      required:
                      - leader
                      type: object
                    message:
                      additionalProperties:
                        type: string
                      description: message records the component details message in
                        current phase. keys are podName or deployName or statefulSetName,
                        the format is `<ObjectKind>/<Name>`.
                      type: object
                    phase:
                      description: 'phase describes the phase of the component, the
                        detail information of the phases are as following: Running:
                        component is running. [terminal state] Stopped: component
                        is stopped, as no running pod. [terminal state] Failed: component
                        is unavailable. i.e, all pods are not ready for Stateless/Stateful
                        component, Leader/Primary pod is not ready for Consensus/Replication
                        component. [terminal state] Abnormal: component is running
                        but part of its pods are not ready. Leader/Primary pod is
                        ready for Consensus/Replication component. [terminal state]
                        Creating: component has entered creating process. Updating:
                        component has entered updating process, triggered by Spec.
                        updated.'
                      enum:
                      - Running
                      - Stopped
                      - Failed
                      - Abnormal
                      - Creating
                      - Updating
                      type: string
                    podsReady:
                      description: podsReady checks if all pods of the component are
                        ready.
                      type: boolean
                    podsReadyTime:
                      description: podsReadyTime what time point of all component
                        pods are ready, this time is the ready time of the last component
                        pod.
                      format: date-time
                      type: string
                    replicationSetStatus:
                      description: replicationSetStatus role and pod name mapping.
                      properties:
                        primary:
                          description: primary status.
                          properties:
                            pod:
                              default: Unknown
                              description: pod name.
                              type: string
                          required:
                          - pod
                          type: object
                        secondaries:
                          description: secondaries status.
                          items:
                            properties:
                              pod:
                                default: Unknown
                                description: pod name.
                                type: string
                            required:
                            - pod
                            type: object
                          type: array
                      required:
                      - primary
                      type: object
                  type: object
                description: components record the current status information of all
                  components of the cluster.
                type: object
              conditions:
                description: Describe current state of cluster API Resource, like
                  warning.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              message:
                description: message describes cluster details message in current
                  phase.
                type: string
              observedGeneration:
                description: observedGeneration is the most recent generation observed
                  for this Cluster. It corresponds to the Cluster's generation, which
                  is updated on mutation by the API Server.
                format: int64
                type: integer
              phase:
                description: 'phase describes the phase of the Cluster, the detail
                  information of the phases are as following: Running: cluster is
                  running, all its components are available. [terminal state] Stopped:
                  cluster has stopped, all its components are stopped. [terminal state]
                  Failed: cluster is unavailable. [terminal state] Abnormal: Cluster
                  is still running, but part of its components are Abnormal/Failed.
                  [terminal state] Creating: Cluster has entered creating process.
                  Updating: Cluster has entered updating process, triggered by Spec.
                  updated.'
                enum:
                - Running
                - Stopped
                - Failed
                - Abnormal
                - Creating
                - Updating
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
