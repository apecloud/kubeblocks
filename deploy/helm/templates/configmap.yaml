apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kubeblocks.fullname" . }}-manager-config
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
data:
  config.yaml: |
    # the global pvc name which persistent volume claim to store the backup data.
    # will replace the pvc name when it is empty in the backup policy.
    BACKUP_PVC_NAME: "{{ .Values.dataProtection.backupPVCName }}"

    # the init capacity of pvc for creating the pvc, e.g. 10Gi.
    # will replace the init capacity when it is empty in the backup policy.
    BACKUP_PVC_INIT_CAPACITY: "{{ .Values.dataProtection.backupPVCInitCapacity }}"

    # the pvc storage class name.
    # will replace the storageClassName when it is nil in the backup policy.
    BACKUP_PVC_STORAGE_CLASS: "{{ .Values.dataProtection.backupPVCStorageClassName }}"

    # the pvc create policy.
    # if the storageClass supports dynamic provisioning, recommend "IfNotPresent" policy.
    # otherwise, using "Never" policy.
    # only affect the backupPolicy automatically created by KubeBs-locks.
    BACKUP_PVC_CREATE_POLICY: "{{ .Values.dataProtection.backupPVCCreatePolicy }}"

    # the configmap name of the pv template. if the csi-driver not support dynamic provisioning,
    # you can provide a configmap which contains key "persistentVolume" and value of the persistentVolume struct.
    # only effective when storageClass is empty.
    BACKUP_PV_CONFIGMAP_NAME: "{{ .Values.dataProtection.backupPVConfigMapName }}"

    # the configmap namespace of the pv template.
    BACKUP_PV_CONFIGMAP_NAMESPACE: "{{ .Values.dataProtection.backupPVConfigMapNamespace }}"

    {{- with .Values.dataPlane }}
    # data plane tolerations
    DATA_PLANE_TOLERATIONS: {{ toJson .tolerations | squote }}

    # data plane affinity
    DATA_PLANE_AFFINITY: {{ toJson .affinity | squote }}
    {{- end }}

    # the default storage class name.
    DEFAULT_STORAGE_CLASS: {{ include "kubeblocks.defaultStorageClass" . | quote }}