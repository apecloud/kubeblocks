# this file will be removed in v0.10.
---
# cos is a storage provider for [Tencent Cloud Object Storage](https://cloud.tencent.com/product/cos)
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: cos
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: ru.yandex.s3.csi
  csiDriverSecretTemplate: |
    accessKeyID: {{ `{{ index .Parameters "accessKeyId" }}` }}
    secretAccessKey: {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "https://cos.%s.myqcloud.com" $region) }}` }}
    {{ `{{- end }}` }}
    endpoint: {{ `{{ $endpoint }}` }}

  storageClassTemplate: |
    provisioner: ru.yandex.s3.csi
    parameters:
      mounter: geesefs
      # you can set mount options here, for example limit memory cache size (recommended)
      options: {{ `{{ printf "--memory-limit %s --read-ahead-large %s --dir-mode 0777 --file-mode 0666 %s --subdomain" .Parameters.geesefsMemoryLimit .Parameters.geesefsReadAheadLarge .Parameters.mountOptions }}` }}
      bucket: {{ `{{ index .Parameters "bucket" }}` }}
      csi.storage.k8s.io/provisioner-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/provisioner-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/controller-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/controller-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-stage-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-stage-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}

  datasafedConfigTemplate: |
    [storage]
    type = s3
    provider = TencentCOS
    env_auth = false
    access_key_id = {{ `{{ index .Parameters "accessKeyId" }}` }}
    secret_access_key = {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "cos.%s.myqcloud.com" $region) }}` }}
    {{ `{{- end }}` }}
    endpoint = {{ `{{ $endpoint }}` }}
    root = {{ `{{ index .Parameters "bucket" }}` }}
    no_check_certificate = {{ `{{ index .Parameters "insecure" }}` }}
    chunk_size = 50Mi

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        region:
          type: string
          description: "COS region, e.g. cn-guangzhou"
        bucket:
          type: string
          description: "COS bucket"
        endpoint:
          type: string
          description: "COS endpoint (optional)"
        mountOptions:
          type: string
          description: "Extra mount options for geesefs"
        geesefsMemoryLimit:
          type: integer
          default: 512
          description: "The value of --memory-limit parameter for geesefs, in MB"
        geesefsReadAheadLarge:
          type: integer
          default: 20480
          description: "The value of --read-ahead-large parameter for geesefs, in KB"
        accessKeyId:
          type: string
          description: "COS access key"
        secretAccessKey:
          type: string
          description: "COS secret key"
        insecure:
          type: boolean
          default: false
          description: "Do not verify the server SSL certificate"

      required:
        - bucket
        - region
        - accessKeyId
        - secretAccessKey

    credentialFields:
      - accessKeyId
      - secretAccessKey
---
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: ftp
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  datasafedConfigTemplate: |
    [storage]
    type = ftp
    host = {{ `{{ .Parameters.ftpHost }}` }}
    port = {{ `{{ if ne .Parameters.ftpPort "0" }}{{ .Parameters.ftpPort }}{{ else }}21{{ end }}` }}
    user = {{ `{{ .Parameters.ftpUser }}` }}
    pass.need_obscure = {{ `{{ .Parameters.ftpPassword }}` }}
    tls = {{ `{{ .Parameters.ftpTls | default false }}` }}

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        ftpHost:
          type: string
          description: "Host of the FTP server"
        ftpPort:
          type: integer
          description: "Port of the FTP server (optional)"
          default: 21
        ftpUser:
          type: string
          description: "the FTP user"
        ftpPassword:
          type: string
          description: "the password of the user"
        ftpTls:
          type: boolean
          description: "enable FTP over TLS (optional)"
          default: false

      required:
        - ftpHost
        - ftpUser
        - ftpPassword

    credentialFields:
      - ftpUser
      - ftpPassword
---
# gcs-s3comp is a storage provider for [Google Cloud Storage](https://cloud.google.com/storage/), by using its S3-compatible API.
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: gcs-s3comp
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: ru.yandex.s3.csi
  csiDriverSecretTemplate: |
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "https://storage.googleapis.com") }}` }}
    {{ `{{- end }}` }}
    accessKeyID: {{ `{{ index .Parameters "accessKeyId" }}` }}
    secretAccessKey: {{ `{{ index .Parameters "secretAccessKey" }}` }}
    endpoint: {{ `{{ $endpoint }}` }}

  storageClassTemplate: |
    provisioner: ru.yandex.s3.csi
    parameters:
      mounter: geesefs
      # you can set mount options here, for example limit memory cache size (recommended)
      options: {{ `{{ printf "--memory-limit %s --read-ahead-large %s --dir-mode 0777 --file-mode 0666 %s --subdomain" .Parameters.geesefsMemoryLimit .Parameters.geesefsReadAheadLarge .Parameters.mountOptions }}` }}
      bucket: {{ `{{ index .Parameters "bucket" }}` }}
      csi.storage.k8s.io/provisioner-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/provisioner-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/controller-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/controller-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-stage-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-stage-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}

  datasafedConfigTemplate: |
    [storage]
    type = s3
    provider = GCS
    env_auth = false
    access_key_id = {{ `{{ index .Parameters "accessKeyId" }}` }}
    secret_access_key = {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "https://storage.googleapis.com") }}` }}
    {{ `{{- end }}` }}
    endpoint = {{ `{{ $endpoint }}` }}
    region = {{ `{{ index .Parameters "region" }}` }}
    root = {{ `{{ index .Parameters "bucket" }}` }}
    no_check_certificate = {{ `{{ index .Parameters "insecure" }}` }}
    no_check_bucket = true
    chunk_size = 50Mi

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        region:
          type: string
          description: "GCS region, e.g. auto"
        bucket:
          type: string
          description: "GCS bucket, the bucket must already exist"
        endpoint:
          type: string
          description: "GCS endpoint (optional)"
        mountOptions:
          type: string
          description: "Extra mount options for geesefs"
        geesefsMemoryLimit:
          type: integer
          default: 512
          description: "The value of --memory-limit parameter for geesefs, in MB"
        geesefsReadAheadLarge:
          type: integer
          default: 20480
          description: "The value of --read-ahead-large parameter for geesefs, in KB"
        accessKeyId:
          type: string
          description: "GCS access key"
        secretAccessKey:
          type: string
          description: "GCS secret key"
        insecure:
          type: boolean
          default: false
          description: "Do not verify the server SSL certificate"

      required:
        - bucket
        - region
        - accessKeyId
        - secretAccessKey

    credentialFields:
      - accessKeyId
      - secretAccessKey
---
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: minio
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: ru.yandex.s3.csi
  csiDriverSecretTemplate: |
    accessKeyID: {{ `{{ index .Parameters "accessKeyId" }}` }}
    secretAccessKey: {{ `{{ index .Parameters "secretAccessKey" }}` }}
    endpoint: {{ `{{ index .Parameters "endpoint" }}` }}

  storageClassTemplate: |
    provisioner: ru.yandex.s3.csi
    parameters:
      mounter: geesefs
      {{ `{{ $regionOption := "" }}` }}
      {{ `{{ if .Parameters.region }}` }}
        {{ `{{ $regionOption = (printf "--region %s" .Parameters.region) }}` }}
      {{ `{{ end }}` }}
      # you can set mount options here, for example limit memory cache size (recommended)
      options: {{ `{{ printf "--memory-limit %s --read-ahead-large %s --dir-mode 0777 --file-mode 0666 %s %s" .Parameters.geesefsMemoryLimit .Parameters.geesefsReadAheadLarge .Parameters.mountOptions $regionOption }}` }}
      bucket: {{ `{{ index .Parameters "bucket" }}` }}
      csi.storage.k8s.io/provisioner-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/provisioner-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/controller-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/controller-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-stage-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-stage-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}

  datasafedConfigTemplate: |
    [storage]
    type = s3
    provider = Minio
    env_auth = false
    access_key_id = {{ `{{ index .Parameters "accessKeyId" }}` }}
    secret_access_key = {{ `{{ index .Parameters "secretAccessKey" }}` }}
    region = {{ `{{ index .Parameters "region" }}` }}
    endpoint = {{ `{{ index .Parameters "endpoint" }}` }}
    root = {{ `{{ index .Parameters "bucket" }}` }}
    no_check_certificate = {{ `{{ index .Parameters "insecure" }}` }}
    chunk_size = 50Mi

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        region:
          type: string
          description: "MinIO region (optional), e.g. us-west-1"
        bucket:
          type: string
          description: "MinIO bucket"
        endpoint:
          type: string
          description: "MinIO endpoint"
        mountOptions:
          type: string
          description: "Extra mount options for geesefs"
        geesefsMemoryLimit:
          type: integer
          default: 512
          description: "The value of --memory-limit parameter for geesefs, in MB"
        geesefsReadAheadLarge:
          type: integer
          default: 20480
          description: "The value of --read-ahead-large parameter for geesefs, in KB"
        accessKeyId:
          type: string
          description: "MinIO access key"
        secretAccessKey:
          type: string
          description: "MinIO secret key"
        insecure:
          type: boolean
          default: false
          description: "Do not verify the server SSL certificate"

      required:
        - bucket
        - endpoint
        - accessKeyId
        - secretAccessKey

    credentialFields:
      - accessKeyId
      - secretAccessKey
---
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: nfs
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: nfs.csi.k8s.io

  storageClassTemplate: |
    provisioner: nfs.csi.k8s.io
    parameters:
      server: {{ `{{ .Parameters.nfsServer }}` }}
      share: {{ `{{ .Parameters.nfsShare }}` }}
      subDir: {{ `{{ .Parameters.nfsSubDir }}` }}
      mountPermissions: "0777"
    {{ `{{- if .Parameters.nfsMountOptions }}` }}
    {{ `{{- $options := splitList " " .Parameters.nfsMountOptions }}` }}
    mountOptions: {{ `{{ $options | toJson }}` }}
    {{ `{{- end }}` }}

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        nfsServer:
          type: string
          description: "NFS Server address"
        nfsShare:
          type: string
          description: "NFS share path"
          default: "/"
        nfsSubDir:
          type: string
          description: "sub directory under nfs share"
        nfsMountOptions:
          type: string
          description: "extra mount options"

      required:
        - nfsServer
---
# obs is a storage provider for [Huawei OBS](https://www.huaweicloud.com/product/obs.html) object storage.
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: obs
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: ru.yandex.s3.csi
  csiDriverSecretTemplate: |
    accessKeyID: {{ `{{ index .Parameters "accessKeyId" }}` }}
    secretAccessKey: {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "https://obs.%s.myhuaweicloud.com" $region) }}` }}
    {{ `{{- end }}` }}
    endpoint: {{ `{{ $endpoint }}` }}

  storageClassTemplate: |
    provisioner: ru.yandex.s3.csi
    parameters:
      mounter: geesefs
      # you can set mount options here, for example limit memory cache size (recommended)
      options: {{ `{{ printf "--memory-limit %s --read-ahead-large %s --dir-mode 0777 --file-mode 0666 %s --subdomain" .Parameters.geesefsMemoryLimit .Parameters.geesefsReadAheadLarge .Parameters.mountOptions }}` }}
      bucket: {{ `{{ index .Parameters "bucket" }}` }}
      csi.storage.k8s.io/provisioner-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/provisioner-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/controller-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/controller-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-stage-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-stage-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}

  datasafedConfigTemplate: |
    [storage]
    type = s3
    provider = HuaweiOBS
    env_auth = false
    access_key_id = {{ `{{ index .Parameters "accessKeyId" }}` }}
    secret_access_key = {{ `{{ index .Parameters "secretAccessKey" }}` }}
    region = {{ `{{ index .Parameters "region" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "obs.%s.myhuaweicloud.com" $region) }}` }}
    {{ `{{- end }}` }}
    endpoint = {{ `{{ $endpoint }}` }}
    root = {{ `{{ index .Parameters "bucket" }}` }}
    no_check_certificate = {{ `{{ index .Parameters "insecure" }}` }}
    chunk_size = 50Mi

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        region:
          type: string
          description: "OBS region, e.g. cn-north-4"
        bucket:
          type: string
          description: "OBS bucket"
        endpoint:
          type: string
          description: "OBS endpoint (optional)"
        mountOptions:
          type: string
          description: "Extra mount options for geesefs"
        geesefsMemoryLimit:
          type: integer
          default: 512
          description: "The value of --memory-limit parameter for geesefs, in MB"
        geesefsReadAheadLarge:
          type: integer
          default: 20480
          description: "The value of --read-ahead-large parameter for geesefs, in KB"
        accessKeyId:
          type: string
          description: "OBS access key"
        secretAccessKey:
          type: string
          description: "OBS secret key"
        insecure:
          type: boolean
          default: false
          description: "Do not verify the server SSL certificate"

      required:
        - bucket
        - region
        - accessKeyId
        - secretAccessKey

    credentialFields:
      - accessKeyId
      - secretAccessKey
---
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: oss
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: ru.yandex.s3.csi
  csiDriverSecretTemplate: |
    accessKeyID: {{ `{{ index .Parameters "accessKeyId" }}` }}
    secretAccessKey: {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "https://oss-%s.aliyuncs.com" $region) }}` }}
    {{ `{{- end }}` }}
    endpoint: {{ `{{ $endpoint }}` }}

  storageClassTemplate: |
    provisioner: ru.yandex.s3.csi
    parameters:
      mounter: geesefs
      # you can set mount options here, for example limit memory cache size (recommended)
      options: {{ `{{ printf "--memory-limit %s --read-ahead-large %s --dir-mode 0777 --file-mode 0666 %s --subdomain" .Parameters.geesefsMemoryLimit .Parameters.geesefsReadAheadLarge .Parameters.mountOptions }}` }}
      bucket: {{ `{{ index .Parameters "bucket" }}` }}
      csi.storage.k8s.io/provisioner-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/provisioner-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/controller-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/controller-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-stage-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-stage-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}

  datasafedConfigTemplate: |
    [storage]
    type = s3
    provider = Alibaba
    env_auth = false
    access_key_id = {{ `{{ index .Parameters "accessKeyId" }}` }}
    secret_access_key = {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- $endpoint = (printf "oss-%s.aliyuncs.com" $region) }}` }}
    {{ `{{- end }}` }}
    endpoint = {{ `{{ $endpoint }}` }}
    root = {{ `{{ index .Parameters "bucket" }}` }}
    no_check_certificate = {{ `{{ index .Parameters "insecure" }}` }}
    chunk_size = 50Mi

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        region:
          type: string
          description: "OSS region, e.g. cn-hangzhou"
        bucket:
          type: string
          description: "OSS bucket"
        endpoint:
          type: string
          description: "OSS endpoint (optional)"
        mountOptions:
          type: string
          description: "Extra mount options for geesefs"
        geesefsMemoryLimit:
          type: integer
          default: 512
          description: "The value of --memory-limit parameter for geesefs, in MB"
        geesefsReadAheadLarge:
          type: integer
          default: 20480
          description: "The value of --read-ahead-large parameter for geesefs, in KB"
        accessKeyId:
          type: string
          description: "OSS access key"
        secretAccessKey:
          type: string
          description: "OSS secret key"
        insecure:
          type: boolean
          default: false
          description: "Do not verify the server SSL certificate"

      required:
        - bucket
        - region
        - accessKeyId
        - secretAccessKey

    credentialFields:
      - accessKeyId
      - secretAccessKey
---
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: pvc
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  persistentVolumeClaimTemplate: |
    spec:
      {{- $scName := (include "kubeblocks.defaultStorageClass" .) }}
      storageClassName: {{ printf `{{ .Parameters.storageClassName | default %q }}` $scName }}
      accessModes:
        - {{ `{{ .Parameters.accessMode | default "ReadWriteOnce" }}` }}
      volumeMode: {{ `{{ .Parameters.volumeMode | default "Filesystem" }}` }}

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        storageClassName:
          type: string
          description: "the name of the StorageClass used to create the PVC"
        accessMode:
          type: string
          description: "the access mode used to create the PVC"
          default: "ReadWriteOnce"
          enum: ["ReadWriteOnce", "ReadWriteMany", "ReadWriteOncePod"]
        volumeMode:
          type: string
          description: "the volume mode used to create the PVC"
          default: "Filesystem"
          enum: ["Filesystem", "Block"]
---
apiVersion: storage.kubeblocks.io/v1alpha1
kind: StorageProvider
metadata:
  name: s3
  labels:
    {{- include "kubeblocks.labels" . | nindent 4 }}
spec:
  csiDriverName: ru.yandex.s3.csi
  csiDriverSecretTemplate: |
    accessKeyID: {{ `{{ index .Parameters "accessKeyId" }}` }}
    secretAccessKey: {{ `{{ index .Parameters "secretAccessKey" }}` }}
    {{ `{{- $region := index .Parameters "region" }}` }}
    {{ `{{- $endpoint := index .Parameters "endpoint" }}` }}
    {{ `{{- if not $endpoint }}` }}
      {{ `{{- if hasPrefix "cn-" $region }}` }}
        {{ `{{- $endpoint = (printf "https://s3.%s.amazonaws.com.cn" $region) }}` }}
      {{ `{{- else }}` }}
        {{ `{{- $endpoint = (printf "https://s3.%s.amazonaws.com" $region) }}` }}
      {{ `{{- end }}` }}
    {{ `{{- end }}` }}
    endpoint: {{ `{{ $endpoint }}` }}

  storageClassTemplate: |
    provisioner: ru.yandex.s3.csi
    parameters:
      mounter: geesefs
      # you can set mount options here, for example limit memory cache size (recommended)
      options: {{ `{{ printf "--memory-limit %s --read-ahead-large %s --dir-mode 0777 --file-mode 0666 %s --region %s" .Parameters.geesefsMemoryLimit .Parameters.geesefsReadAheadLarge .Parameters.mountOptions .Parameters.region }}` }}
      bucket: {{ `{{ index .Parameters "bucket" }}` }}
      csi.storage.k8s.io/provisioner-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/provisioner-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/controller-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/controller-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-stage-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-stage-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}
      csi.storage.k8s.io/node-publish-secret-name: {{ `{{ .CSIDriverSecretRef.Name }}` }}
      csi.storage.k8s.io/node-publish-secret-namespace: {{ `{{ .CSIDriverSecretRef.Namespace }}` }}

  datasafedConfigTemplate: |
    [storage]
    type = s3
    provider = AWS
    env_auth = false
    access_key_id = {{ `{{ index .Parameters "accessKeyId" }}` }}
    secret_access_key = {{ `{{ index .Parameters "secretAccessKey" }}` }}
    region = {{ `{{ index .Parameters "region" }}` }}
    endpoint = {{ `{{ index .Parameters "endpoint" }}` }}
    root = {{ `{{ index .Parameters "bucket" }}` }}
    no_check_certificate = {{ `{{ index .Parameters "insecure" }}` }}
    chunk_size = 50Mi

  parametersSchema:
    openAPIV3Schema:
      type: "object"
      properties:
        region:
          type: string
          description: "AWS region, e.g. us-west-1"
        bucket:
          type: string
          description: "S3 bucket"
        endpoint:
          type: string
          description: "S3 endpoint (optional)"
        mountOptions:
          type: string
          description: "Extra mount options for geesefs"
        geesefsMemoryLimit:
          type: integer
          default: 512
          description: "The value of --memory-limit parameter for geesefs, in MB"
        geesefsReadAheadLarge:
          type: integer
          default: 20480
          description: "The value of --read-ahead-large parameter for geesefs, in KB"
        accessKeyId:
          type: string
          description: "AWS access key"
        secretAccessKey:
          type: string
          description: "AWS secret key"
        insecure:
          type: boolean
          default: false
          description: "Do not verify the server SSL certificate"

      required:
        - bucket
        - region
        - accessKeyId
        - secretAccessKey

    credentialFields:
      - accessKeyId
      - secretAccessKey
