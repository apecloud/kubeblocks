apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: BackupTool
metadata:
  name: mongodb-physical-backup-tool
  labels:
    clusterdefinition.kubeblocks.io/name: mongodb
    {{- include "mongodb.labels" . | nindent 4 }}
spec:
  image: mongo:5.0.14
  deployKind: job
  env:
    - name: DATA_DIR
      value: /data/mongodb/db
  physical:
    restoreCommands:
      - |
        set -e
        mkdir -p ${DATA_DIR}
        res=`ls -A ${DATA_DIR}`
        if [ ! -z "${res}" ]; then
          echo "${DATA_DIR} is not empty! Please make sure that the directory is empty before restoring the backup."
          exit 1
        fi
        tar -xvf ${BACKUP_DIR}/${BACKUP_NAME}.tar.gz -C ${DATA_DIR}
        PORT=27017
        MONGODB_ROOT=/data/mongodb
        RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
        RPL_SET_NAME=${RPL_SET_NAME%-};
        mkdir -p $MONGODB_ROOT/db
        mkdir -p $MONGODB_ROOT/logs
        mkdir -p $MONGODB_ROOT/tmp
        MODE=$1
        mongod $MODE --bind_ip_all --port $PORT --dbpath $MONGODB_ROOT/db --directoryperdb --logpath $MONGODB_ROOT/logs/mongodb.log  --logappend --pidfilepath $MONGODB_ROOT/tmp/mongodb.pid&
        until mongosh --quiet --port $PORT --host $host --eval "print('peer is ready')"; do sleep 1; done
        PID=`cat $MONGODB_ROOT/tmp/mongodb.pid`

        mongosh --quiet --port $PORT local --eval "db.system.replset.deleteOne({})"
        mongosh --quiet --port $PORT local --eval "db.system.replset.find()"
        mongosh --quiet --port $PORT admin --eval 'db.dropUser("root", {w: "majority", wtimeout: 4000})' || true
        kill $PID
        wait $PID
    incrementalRestoreCommands: []
  logical:
    restoreCommands: []
    incrementalRestoreCommands: []
  backupCommands:
    - |
     mkdir -p ${BACKUP_DIR} && cd ${DATA_DIR}
     tar -czvf ${BACKUP_DIR}/${BACKUP_NAME}.tar.gz ./
     echo $?
  incrementalBackupCommands: []
