apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-scripts
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
data:
  mongos-setup.sh: |-
    #!/bin/sh
    
    PORT=27018 
    CONFIG_SVR_NAME=$KB_CLUSTER_NAME"-configsvr"
    DOMAIN=$CONFIG_SVR_NAME"-headless."$KB_NAMESPACE".svc.cluster.local"
    mongos --bind_ip_all --configdb $CONFIG_SVR_NAME/$CONFIG_SVR_NAME"-0."$DOMAIN:$PORT,$CONFIG_SVR_NAME"-1."$DOMAIN:$PORT,$CONFIG_SVR_NAME"-2."$DOMAIN:$PORT
  replicaset-setup.sh: |-
    #!/bin/sh

    RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
    RPL_SET_NAME=${RPL_SET_NAME%-};
    PORT=27018
    MODE=$1
    mongod $MODE --bind_ip_all --port $PORT --replSet $RPL_SET_NAME
  replicaset-post-start.sh: |-
    #!/bin/sh
    # usage: replicaset-post-start.sh type_name is_configsvr
    # type_name: component.type, in uppercase
    # is_configsvr: true or false, default false
    INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+\$");
    INDEX=${INDEX#-};
    if [ $INDEX -ne 0 ]; then exit 0; fi
    
    PORT=27018
    until mongosh --port $PORT --eval "print('ready')"; do sleep 1; done
    
    RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
    RPL_SET_NAME=${RPL_SET_NAME%-};
    
    TYPE_NAME=$1
    IS_CONFIGSVR=$2
    MEMBERS=""
    i=0
    while [ $i -lt $(eval echo \$KB_"$TYPE_NAME"_N) ]; do
      if [ $i -ne 0 ]; then MEMBERS="$MEMBERS,"; fi
      host=$(eval echo \$KB_"$TYPE_NAME"_"$i"_HOSTNAME)
      host=$host"."$KB_NAMESPACE".svc.cluster.local"
      until mongosh --port $PORT --host $host --eval "print('peer is ready')"; do sleep 1; done
      MEMBERS="$MEMBERS{_id: $i, host: \"$host:$PORT\"}"
      i=$(( i + 1))
    done
    CONFIGSVR=""
    if [ $IS_CONFIGSVR = "true" ]; then CONFIGSVR="configsvr: true,"; fi
    mongosh --port $PORT --eval "rs.initiate({_id: \"$RPL_SET_NAME\", $CONFIGSVR members: [$MEMBERS]})"
  shard-agent.sh: |-
    #!/bin/sh
    
    INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+\$");
    INDEX=${INDEX#-};
    if [ $INDEX -ne 0 ]; then
      trap : TERM INT; (while true; do sleep 1000; done) & wait
    fi

    # wait main container ready
    PORT=27018
    until mongosh --port $PORT --eval "rs.status().ok"; do sleep 1; done
    # add shard to mongos
    SHARD_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
    SHARD_NAME=${SHARD_NAME%-};
    DOMAIN=$SHARD_NAME"-headless."$KB_NAMESPACE".svc.cluster.local"
    MONGOS_HOST=$KB_CLUSTER_NAME"-mongos"
    MONGOS_PORT=27017
    SHARD_CONFIG=$SHARD_NAME/$SHARD_NAME"-0."$DOMAIN:$PORT,$SHARD_NAME"-1."$DOMAIN:$PORT,$SHARD_NAME"-2."$DOMAIN:$PORT
    until mongosh --host $MONGOS_HOST --port $MONGOS_PORT --eval "print('service is ready')"; do sleep 1; done
    mongosh --host $MONGOS_HOST --port $MONGOS_PORT --eval "sh.addShard(\"$SHARD_CONFIG\")"

    trap : TERM INT; (while true; do sleep 1000; done) & wait