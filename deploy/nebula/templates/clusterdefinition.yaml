apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: nebula
  labels:
    {{- include "nebula.labels" . | nindent 4 }}
spec:
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_tcp-nebula)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_tcp-nebula)"
    accesskey: ""
    secretkey: ""
  componentDefs:
    - name: nebula-console
      workloadType: Stateless
      characterType: nebula
      componentDefRef:
        - &graphdRef
          componentDefName: nebula-graphd
          componentRefEnv:
            - name: GRAPHD_SVC_PORT
              valueFrom:
                type: FieldRef
                fieldPath: $.componentDef.service.ports[?(@.name == "thrift")].port
            - name: GRAPHD_SVC_NAME
              valueFrom:
                type: ServiceRef
      podSpec:
        containers:
          - name: nebula-console
            imagePullPolicy: {{default .Values.nebula.metad.image.pullPolicy "IfNotPresent"}}
            command: ["/bin/sh"]
            args: ["-c", "trap : TERM INT; sleep infinity & wait"]
    - name: nebula-graphd
      configSpecs:
        - name: nebula-graphd-config
          templateRef: nebula-graphd-config-template
          namespace: {{ .Release.Namespace }}
          volumeName: nebula-graphd
      workloadType: Stateful
      characterType: nebula-graphd
      service:
        ports:
          - name: thrift
            port: 9669
            targetPort: thrift
            protocol: TCP
          - name: http
            port: 19669
            targetPort: http
            protocol: TCP
          - name: http2
            port: 19670
            targetPort: http2
            protocol: TCP
      componentDefRef:
        - &metadRef
          componentDefName: nebula-metad
          componentRefEnv:
            - name: NEBULA_METAD_SVC
              valueFrom:
                type: HeadlessServiceRef
                format: $(POD_FQDN){{ .Values.clusterDomain }}:9559
                joinWith: ","
      podSpec:
        securityContext:
          fsGroup: 1001
        containers:
          - name: nebula-graphd
            command:
              - /bin/bash
              - -c
              - |
                set -ex
                trap : TERM INT
                exec /usr/local/nebula/bin/nebula-graphd --flagfile=/usr/local/nebula/etc/nebula-graphd.conf --meta_server_addrs=$NEBULA_METAD_SVC --local_ip=${KB_POD_FQDN}{{ .Values.clusterDomain }} --daemonize=false
            imagePullPolicy: {{default .Values.nebula.graphd.image.pullPolicy "IfNotPresent"}}
            ports:
              - containerPort: 9669
                name: thrift
                protocol: TCP
              - containerPort: 19669
                name: http
                protocol: TCP
              - containerPort: 19670
                name: http2
                protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /status
                port: http
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            volumeMounts:
              - mountPath: /usr/local/nebula/data
                name: data
              - mountPath: /usr/local/nebula/logs
                name: logs
              - mountPath: /usr/local/nebula/etc
                name: nebula-graphd
    - name: nebula-metad
      configSpecs:
        - name: nebula-metad-config
          templateRef: nebula-metad-config-template
          namespace: {{ .Release.Namespace }}
          volumeName: nebula-metad
      workloadType: Stateful
      characterType: nebula-metad
      componentDefRef:
        - *metadRef
      podSpec:
        containers:
          - name: nebula-metad
            command:
              - /bin/bash
              - -c
              - |
                set -ex
                trap : TERM INT
                exec /usr/local/nebula/bin/nebula-metad --flagfile=/usr/local/nebula/etc/nebula-metad.conf --meta_server_addrs=$NEBULA_METAD_SVC --local_ip=${KB_POD_FQDN}{{ .Values.clusterDomain }}  --daemonize=false
            imagePullPolicy: {{default .Values.nebula.metad.image.pullPolicy "IfNotPresent"}}
            ports:
            - containerPort: 9559
              name: thrift
              protocol: TCP
            - containerPort: 19559
              name: http
              protocol: TCP
            - containerPort: 19560
              name: http2
              protocol: TCP
            # readinessProbe:
            #   failureThreshold: 3
            #   httpGet:
            #     path: /status
            #     port: http
            #     scheme: HTTP
            #   initialDelaySeconds: 10
            #   periodSeconds: 10
            #   successThreshold: 1
            #   timeoutSeconds: 5
            volumeMounts:
              - mountPath: /usr/local/nebula/data
                name: data
              - mountPath: /usr/local/nebula/logs
                name: logs
              - mountPath: /usr/local/nebula/etc
                name: nebula-metad
    - name: nebula-storaged
      configSpecs:
        - name: nebula-storaged-config
          templateRef: nebula-storaged-config-template
          namespace: {{ .Release.Namespace }}
          volumeName: nebula-storaged
      scriptSpecs:
        - name: nebula-storaged-scripts
          templateRef: nebula-storaged-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      workloadType: Stateful
      characterType: nebula-storaged
      componentDefRef:
        - *metadRef
        - *graphdRef
      podSpec:
        securityContext:
          fsGroup: 1001
        containers:
          - name: nebula-storaged
            command:
              - /bin/bash
              - -c
              - |
                trap : TERM INT
                exec /usr/local/nebula/bin/nebula-storaged --flagfile=/usr/local/nebula/etc/nebula-storaged.conf --meta_server_addrs=$NEBULA_METAD_SVC --local_ip=$KB_POD_FQDN"{{ .Values.clusterDomain }}" --daemonize=false
            imagePullPolicy: {{default .Values.nebula.storaged.image.pullPolicy "IfNotPresent"}}
            ports:
              - containerPort: 9779
                name: thrift
                protocol: TCP
              - containerPort: 19779
                name: http
                protocol: TCP
              - containerPort: 19780
                name: http2
                protocol: TCP
              - containerPort: 9778
                name: admin
                protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /status
                port: http
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            volumeMounts:
              - mountPath: /usr/local/nebula/etc
                name: nebula-storaged
              - mountPath: /usr/local/nebula/data
                name: data
              - mountPath: /usr/local/nebula/logs
                name: logs
          - name: nebula-console
            imagePullPolicy: {{default .Values.nebula.metad.image.pullPolicy "IfNotPresent"}}
            command: ["/bin/sh"]
            args: ["-c", "trap : TERM INT; sleep infinity & wait"]
            lifecycle:
              postStart:
                exec:
                  command: ["/bin/sh", "-c", "/scripts/post-start.sh"]
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "/scripts/pre-stop.sh"]
            volumeMounts:
              - name: annotations
                mountPath: /etc/annotations
              - name: scripts
                mountPath: /scripts
        volumes:
          - name: annotations
            downwardAPI:
              items:
                - path: "component-replicas"
                  fieldRef:
                    fieldPath: metadata.annotations['apps.kubeblocks.io/component-replicas']