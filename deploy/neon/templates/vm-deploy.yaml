apiVersion: v1
kind: ConfigMap
metadata:
  name: compute-node-config
data:
  compute.sh: |     
    #!/bin/bash
      set -ex
      export PAGESERVER=neon-cluster-neon-pageserver-headless.default.svc.cluster.local
      export SAFEKEEPERS=neon-cluster-neon-safekeeper-headless.default.svc.cluster.local:5454
      SPEC_FILE_ORG=/spec_prep_docker.json
      SPEC_FILE=/spec.json
      PG_VERSION=14
      echo "Waiting pageserver become ready."
      while ! nc -z $PAGESERVER 6400; do
          sleep 1;
      done
      echo "Page server is ready."

      echo "Create a tenant and timeline"
      if [ -z "$TENANT" ]; then
        PARAMS=(
          -sb
          -X POST
          -H "Content-Type: application/json"
          -d "{}"
          "http://${PAGESERVER}:9898/v1/tenant/"
        )
        tenant_id=$(curl "${PARAMS[@]}" | sed 's/"//g')
      else
        tenant_id=$TENANT
      fi

      if [ -z "$TIMELINE" ]; then
      PARAMS=(
        -sb
        -X POST
        -H "Content-Type: application/json"
        -d "{\"tenant_id\":\"${tenant_id}\", \"pg_version\": ${PG_VERSION}}"
        "http://${PAGESERVER}:9898/v1/tenant/${tenant_id}/timeline/"
      )
      result=$(curl "${PARAMS[@]}")
      echo $result | jq .

      echo "Overwrite tenant id and timeline id in spec file"
      tenant_id=$(echo ${result} | jq -r .tenant_id)
      timeline_id=$(echo ${result} | jq -r .timeline_id)

      else

      #If not empty CREATE_BRANCH
      #we create branch with given ancestor_timeline_id as TIMELINE

      if [ ! -z "$CREATE_BRANCH" ]; then

      PARAMS=(
          -sb
          -X POST
          -H "Content-Type: application/json"
          -d "{\"tenant_id\":\"${tenant_id}\", \"pg_version\": ${PG_VERSION}, \"ancestor_timeline_id\":\"${TIMELINE}\"}"
          "http://${PAGESERVER}:9898/v1/tenant/${tenant_id}/timeline/"
      )

      result=$(curl "${PARAMS[@]}")
      echo $result | jq .

      echo "Overwrite tenant id and timeline id in spec file"
      tenant_id=$(echo ${result} | jq -r .tenant_id)
      timeline_id=$(echo ${result} | jq -r .timeline_id)

      else
          timeline_id=$TIMELINE
      fi #end if CREATE_BRANCH

      fi

      sed "s/TENANT_ID/${tenant_id}/" ${SPEC_FILE_ORG} > ${SPEC_FILE}
      sed -i "s/TIMELINE_ID/${timeline_id}/" ${SPEC_FILE}
      sed -i "s/PAGESERVER_SPEC/${PAGESERVER}/" ${SPEC_FILE}
      sed -i "s/SAFEKEEPERS_SPEC/${SAFEKEEPERS}/" ${SPEC_FILE}

      cat ${SPEC_FILE}

      echo "Start compute node"
      whoami
      echo $PWD
      if [ ! -d "data" ]; then
        mkdir data
      fi
      ls -lah /data

      if [ ! -d "/data/pgdata" ]; then
        mkdir -p /data/pgdata
      fi
      chown -R postgres:postgres /data
      nohup su - postgres -c "/usr/local/bin/compute_ctl --pgdata /data/pgdata -C 'postgresql://cloud_admin@localhost:55432/postgres' -b /usr/local/bin/postgres -S ${SPEC_FILE}" &

  entrypoint.sh: |
    #!/bin/bash
    cd /opt/neondatabase-neon
    ./target/release/neon_local start
    ./target/release/neon_local pg start main
    while true; do
    sleep 1000
    done
  spec.json: |   
    {
      "format_version": 1.0,

      "timestamp": "2022-10-12T18:00:00.000Z",
      "operation_uuid": "0f657b36-4b0f-4a2d-9c2e-1dcd615e7d8c",

      "cluster": {
        "cluster_id": "cluster1",
        "name": "Trolladyngja",
        "state": "restarted",
        "roles": [
          {
            "name": "cloud_admin",
            "encrypted_password": "b093c0d3b281ba6da1eacc608620abd8",
            "options": null
          }
        ],
        "databases": [
        ],
        "settings": [
          {
            "name": "fsync",
            "value": "off",
            "vartype": "bool"
          },
          {
            "name": "wal_level",
            "value": "replica",
            "vartype": "enum"
          },
          {
            "name": "hot_standby",
            "value": "on",
            "vartype": "bool"
          },
          {
            "name": "wal_log_hints",
            "value": "on",
            "vartype": "bool"
          },
          {
            "name": "log_connections",
            "value": "on",
            "vartype": "bool"
          },
          {
            "name": "port",
            "value": "55432",
            "vartype": "integer"
          },
          {
            "name": "shared_buffers",
            "value": "1MB",
            "vartype": "string"
          },
          {
            "name": "max_connections",
            "value": "100",
            "vartype": "integer"
          },
          {
            "name": "listen_addresses",
            "value": "0.0.0.0",
            "vartype": "string"
          },
          {
            "name": "max_wal_senders",
            "value": "10",
            "vartype": "integer"
          },
          {
            "name": "max_replication_slots",
            "value": "10",
            "vartype": "integer"
          },
          {
            "name": "wal_sender_timeout",
            "value": "5s",
            "vartype": "string"
          },
          {
            "name": "wal_keep_size",
            "value": "0",
            "vartype": "integer"
          },
          {
            "name": "password_encryption",
            "value": "md5",
            "vartype": "enum"
          },
          {
            "name": "restart_after_crash",
            "value": "off",
            "vartype": "bool"
          },
          {
            "name": "synchronous_standby_names",
            "value": "walproposer",
            "vartype": "string"
          },
          {
            "name": "shared_preload_libraries",
            "value": "neon",
            "vartype": "string"
          },
          {
            "name": "neon.safekeepers",
            "value": "neon-cluster-neon-safekeeper-0.neon-cluster-neon-safekeeper-headless.default.svc.cluster.local,neon-cluster-neon-safekeeper-1.neon-cluster-neon-safekeeper-headless.default.svc.cluster.local,neon-cluster-neon-safekeeper-2.neon-cluster-neon-safekeeper-headless.default.svc.cluster.local:5454",
            "vartype": "string"
          },
          {
            "name": "neon.timeline_id",
            "value": "b93d7329d4488763dfd47b0faa75e33d",
            "vartype": "string"
          },
          {
            "name": "neon.tenant_id",
            "value": "eb7a5b7ef4070cdc870dbf514c4f7c67",
            "vartype": "string"
          },
          {
            "name": "neon.pageserver_connstring",
            "value": "host=neon-cluster-neon-pageserver-0.neon-cluster-neon-pageserver-headless.default.svc.cluster.local port=6400",
            "vartype": "string"
          },
          {
            "name": "max_replication_write_lag",
            "value": "500MB",
            "vartype": "string"
          },
          {
            "name": "max_replication_flush_lag",
            "value": "10GB",
            "vartype": "string"
          }
        ]
      },

      "delta_operations": [
      ]
    }
  spec.prep.DOCKER.json: |      
    {
      "format_version": 1.0,

      "timestamp": "2022-10-12T18:00:00.000Z",
      "operation_uuid": "0f657b36-4b0f-4a2d-9c2e-1dcd615e7d8c",

      "cluster": {
        "cluster_id": "cluster1",
        "name": "Trolladyngja",
        "state": "restarted",
        "roles": [
          {
            "name": "cloud_admin",
            "encrypted_password": "b093c0d3b281ba6da1eacc608620abd8",
            "options": null
          }
        ],
        "databases": [
        ],
        "settings": [
          {
            "name": "fsync",
            "value": "off",
            "vartype": "bool"
          },
          {
            "name": "wal_level",
            "value": "replica",
            "vartype": "enum"
          },
          {
            "name": "hot_standby",
            "value": "on",
            "vartype": "bool"
          },
          {
            "name": "wal_log_hints",
            "value": "on",
            "vartype": "bool"
          },
          {
            "name": "log_connections",
            "value": "on",
            "vartype": "bool"
          },
          {
            "name": "port",
            "value": "55432",
            "vartype": "integer"
          },
          {
            "name": "shared_buffers",
            "value": "1MB",
            "vartype": "string"
          },
          {
            "name": "max_connections",
            "value": "100",
            "vartype": "integer"
          },
          {
            "name": "listen_addresses",
            "value": "0.0.0.0",
            "vartype": "string"
          },
          {
            "name": "max_wal_senders",
            "value": "10",
            "vartype": "integer"
          },
          {
            "name": "max_replication_slots",
            "value": "10",
            "vartype": "integer"
          },
          {
            "name": "wal_sender_timeout",
            "value": "5s",
            "vartype": "string"
          },
          {
            "name": "wal_keep_size",
            "value": "0",
            "vartype": "integer"
          },
          {
            "name": "password_encryption",
            "value": "md5",
            "vartype": "enum"
          },
          {
            "name": "restart_after_crash",
            "value": "off",
            "vartype": "bool"
          },
          {
            "name": "synchronous_standby_names",
            "value": "walproposer",
            "vartype": "string"
          },
          {
            "name": "shared_preload_libraries",
            "value": "neon",
            "vartype": "string"
          },
          {
            "name": "neon.safekeepers",
            "value": "SAFEKEEPERS_SPEC",
            "vartype": "string"
          },
          {
            "name": "neon.timeline_id",
            "value": "TIMELINE_ID",
            "vartype": "string"
          },
          {
            "name": "neon.tenant_id",
            "value": "TENANT_ID",
            "vartype": "string"
          },
          {
            "name": "neon.pageserver_connstring",
            "value": "host=PAGESERVER_SPEC port=6400",
            "vartype": "string"
          },
          {
            "name": "max_replication_write_lag",
            "value": "500MB",
            "vartype": "string"
          },
          {
            "name": "max_replication_flush_lag",
            "value": "10GB",
            "vartype": "string"
          }
        ]
      },

      "delta_operations": [
      ]
    }

---
apiVersion: vm.neon.tech/v1
kind: VirtualMachine
metadata:
  name: test
  annotations:
    # In this example, these bounds aren't necessary. So... here's what they look like :)
    autoscaling.neon.tech/bounds: '{ "min": { "cpu": 0.25, "mem": "1Gi" }, "max": { "cpu": 1.25, "mem": "5Gi" } }'
  labels:
    autoscaling.neon.tech/enabled: "true"
    # Set to "true" to continuously migrate the VM (TESTING ONLY)
    autoscaling.neon.tech/testing-only-always-migrate: "false"
spec:
  schedulerName: autoscale-scheduler
  guest:
    cpus: { min: 0.25, use: 0.25, max: 2 }
    memorySlotSize: 1Gi
    memorySlots: { min: 1, use: 1, max: 5 }
    rootDisk:
      image: huyongqi/pg14-disk-test:test
      size: 12Gi
      imagePullPolicy: IfNotPresent
    command: 
      - /bin/bash
      - -c
      - |
        if [ ! -f "/tmp/script_executed" ]; then
            set -ex
            trap : TERM INT
            whoami
            export PAGESERVER=neon-cluster-neon-pageserver-headless.default.svc.cluster.local
            export SAFEKEEPERS=neon-cluster-neon-safekeeper-headless.default.svc.cluster.local:5454
            cp scripts/* ./
            chmod +x compute.sh entrypoint.sh spec.json spec_prep_docker.json
            ./compute.sh

            touch /tmp/script_executed
        else
            echo "Scripts already executed."
        fi
    env:
      - name: PAGESERVER
        value: "http://neon-cluster-neon-pageserver"
      - name: SAFEKEEPERS
        value: "http://neon-cluster-neon-safekeeper:5454"
    ports:
      - port: 22   # ssh
      - port: 5432 # postgres
      - port: 9100 # metrics
      - port: 10301 # informant
  disks:
    - name: compute-node-config
      mountPath: /scripts
      readOnly: false
      configMap:
        name: compute-node-config
