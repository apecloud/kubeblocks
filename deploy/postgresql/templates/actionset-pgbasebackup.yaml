apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  name: postgres-basebackup
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    {{- include "postgresql.labels" . | nindent 4}}
spec:
  backupType: Full
  env:
  - name: DATA_DIR
    value: /home/postgres/pgdata/pgroot/data
  backup:
    preBackup: []
    postBackup: []
    backupData:
      image: {{.Values.image.registry | default "docker.io"}}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
      scheduleToTargetPodNode: false
      command:
      - bash
      - -c
      - |
        #!/bin/bash
        set -e;
        if [ -d ${DP_BACKUP_DIR} ]; then
          rm -rf ${DP_BACKUP_DIR}
        fi
        mkdir -p ${DP_BACKUP_DIR};
        export PGPASSWORD=${DP_DB_PASSWORD}
        {{- .Files.Get "dataprotection/backup-info-collector.sh" | nindent 8}}
        START_TIME=`get_current_time`
        echo ${PGPASSWORD} | pg_basebackup -Ft -Pv -c fast -Xs -D ${DP_BACKUP_DIR} -h ${DP_DB_HOST} -U ${DP_DB_USER} -W;
        # stat and save the backup information
        stat_and_save_backup_info $START_TIME
      syncProgress:
        enabled: true
        intervalSeconds: 5
  restore:
    prepareData:
      image: {{.Values.image.registry | default "docker.io"}}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
      command:
      - bash
      - -c
      - |
        #!/bin/sh
        set -e;
        cd ${DP_BACKUP_DIR};
        mkdir -p ${DATA_DIR};
        # compatible with gzip compression for version 0.5.0
        if [ -f base.tar.gz ];then
          tar -xvf base.tar.gz -C ${DATA_DIR}/;
        else
          tar -xvf base.tar -C ${DATA_DIR}/;
        fi
        if [ -f pg_wal.tar.gz ];then
          tar -xvf pg_wal.tar.gz -C ${DATA_DIR}/pg_wal/;
        else
          tar -xvf pg_wal.tar -C ${DATA_DIR}/pg_wal/;
        fi
        echo "done!";
      postReady: []