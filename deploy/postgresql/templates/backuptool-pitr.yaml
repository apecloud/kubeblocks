apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: BackupTool
metadata:
  labels:
    clusterdefinition.kubeblocks.io/name: postgresql
    kubeblocks.io/backup-tool-type: pitr
    {{- include "postgresql.labels" . | nindent 4 }}
  name: postgres-pitr
spec:
  deployKind: job
  env:
    - name: VOLUME_DATA_DIR
      value: /home/postgres/pgdata
    - name: RESTORE_SCRIPT_DIR
      value: "$(VOLUME_DATA_DIR)/kb_restore"
    - name: PITR_DIR
      value: "$(VOLUME_DATA_DIR)/pitr"
    - name: DATA_DIR
      value: "$(VOLUME_DATA_DIR)/pgroot/data"
    - name: CONF_DIR
      value: "$(VOLUME_DATA_DIR)/conf"
    - name: RECOVERY_TIME
      value: $KB_RECOVERY_TIME
    - name: TIME_FORMAT
      value: 2006-01-02 15:04:05 MST
    - name: ARCHIVE_LOG_DIR
      value: $(VOLUME_DATA_DIR)/pgroot/arcwal
    - name: LOG_DIR
      value: $(VOLUME_DATA_DIR)/pgroot/data/pg_wal
  image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
  logical:
    restoreCommands:
      - |
        set -e;
        rm -f ${CONF_DIR}/recovery.conf;
  physical:
    restoreCommands:
      - |
        set -e;
        mkdir -p ${PITR_DIR};
        cd ${PITR_DIR}
        for i in $(find ${BACKUP_DIR} -name "*.gz"); do
          echo "copying ${i}";
          cp ${i} $(basename $i);
          gzip -df $(basename $i);
        done
        chmod 777 -R ${PITR_DIR};
        touch ${DATA_DIR}/recovery.signal;
        mkdir -p ${CONF_DIR};
        chmod 777 -R ${CONF_DIR};
        mkdir -p ${RESTORE_SCRIPT_DIR};
        echo "#!/bin/bash" > ${RESTORE_SCRIPT_DIR}/kb_restore.sh;
        echo "[[ -d '${DATA_DIR}.old' ]] && mv -f ${DATA_DIR}.old/* ${DATA_DIR}/;" >> ${RESTORE_SCRIPT_DIR}/kb_restore.sh;
        echo "sync;" >> ${RESTORE_SCRIPT_DIR}/kb_restore.sh;
        chmod +x ${RESTORE_SCRIPT_DIR}/kb_restore.sh;
        echo "restore_command='mv ${PITR_DIR}/%f %p'\nrecovery_target_time='${RECOVERY_TIME}'\nrecovery_target_action='promote'" > ${CONF_DIR}/recovery.conf;
        mv ${DATA_DIR} ${DATA_DIR}.old;
        echo "done.";
        sync;
  backupCommands:
    - |
      set -e;
      EXPIRED_INCR_LOG=${BACKUP_DIR}/$(date -d"7 day ago" +%Y%m%d);
      if [ -d ${EXPIRED_INCR_LOG} ]; then rm -rf ${EXPIRED_INCR_LOG}; fi
      TODAY_INCR_LOG=${BACKUP_DIR}/$(date +%Y%m%d);
      mkdir -p ${TODAY_INCR_LOG};
      for i in $(find ${ARCHIVE_LOG_DIR} -name "*.gz"); do
        echo "uploading ${i}";
        mv -f ${i} ${TODAY_INCR_LOG}/;
      done
      if [ -d ${LOG_DIR} ]; then
        cd ${LOG_DIR};
        LATEST_LOG=$(ls -t . | grep '[[:digit:]]$\|.partial$'|head -n 1);
        echo "uploading ${TODAY_INCR_LOG}/${LATEST_LOG}.gz";
        gzip -kqc ${LATEST_LOG} > ${TODAY_INCR_LOG}/${LATEST_LOG}.gz;
      fi
      echo "done."
      sync;

  type: pitr