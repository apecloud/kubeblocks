{{- $customUser := include "postgresql.username" . }}
apiVersion: dbaas.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: apecloud-postgresql
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  type: state.postgresql
  connectionCredential:
    username: postgres
    postgres-password: {{ (include "postgresql.postgresPassword" .) | quote  }}
  components:
    - typeName: postgresql
      componentType: Stateful
      characterType: postgresql
      defaultReplicas: 1
      probes:
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: {{ .Values.metrics.service.ports.metrics }}  
      logConfigs:
        {{- range $name,$pattern := .Values.logConfigs }}
        - name: {{ $name }}
          filePathPattern: {{ $pattern }}
        {{- end }}
      configTemplateRefs:
        - name: postgresql-configuration
          namespace: {{ .Release.Namespace }}
          volumeName: postgresql-config
          defaultMode: 493
      service:
        ports:
          - name: tcp-postgresql
            protocol: TCP
            port:  {{ .Values.primary.service.ports.postgresql }}
            targetPort: tcp-postgresql
          - name: http-metrics-postgresql
            port: {{ .Values.metrics.service.ports.metrics }}
            targetPort: http-metrics
            nodeport: null
      podSpec:
        securityContext:
          fsGroup: 1001
        containers:
          - name: postgresql
            securityContext:
              runAsUser: 1001            
            volumeMounts:
              - name: dshm
                mountPath: /dev/shm
              - name: data
                mountPath: {{ .Values.primary.persistence.mountPath }}
              - name: postgresql-config
                mountPath: /bitnami/postgresql/conf
            ports:
              - name: tcp-postgresql
                containerPort: {{ .Values.containerPorts.postgresql }}
           
            livenessProbe:
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              exec:
                command:
                  - /bin/sh
                  - -c
                  - exec pg_isready -U {{ default "postgres" | quote }} -h 127.0.0.1 -p {{ .Values.containerPorts.postgresql }}
            readinessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              exec:
                command:
                  - /bin/sh
                  - -c
                  - -ee
                  - |
                    exec pg_isready -U {{ default "postgres" | quote }} -h 127.0.0.1 -p {{ .Values.containerPorts.postgresql }}
                    [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /postgresql/.initialized ]
            env:
              - name: BITNAMI_DEBUG
                value: "false"
              - name: POSTGRESQL_PORT_NUMBER
                value: {{ .Values.containerPorts.postgresql | quote }}
              - name: POSTGRESQL_VOLUME_DIR
                value: {{ .Values.primary.persistence.mountPath | quote }}
              - name: PGDATA
                value: {{ .Values.postgresqlDataDir | quote }}
              # Authentication
              - name: POSTGRES_USER
                value: {{ $customUser | quote }} 
              - name: POSTGRES_POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: postgres-password
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: postgres-password
              - name: POSTGRES_DB
                value: {{ (include "postgresql.database" .) | quote }}
              # Audit
              - name: POSTGRESQL_LOG_HOSTNAME
                value: {{ .Values.audit.logHostname | quote }}
              - name: POSTGRESQL_LOG_CONNECTIONS
                value: {{ .Values.audit.logConnections | quote }}
              - name: POSTGRESQL_LOG_DISCONNECTIONS
                value: {{ .Values.audit.logDisconnections | quote }}
              {{- if .Values.audit.logLinePrefix }}
              - name: POSTGRESQL_LOG_LINE_PREFIX
                value: {{ .Values.audit.logLinePrefix | quote }}
              {{- end }}
              {{- if .Values.audit.logTimezone }}
              - name: POSTGRESQL_LOG_TIMEZONE
                value: {{ .Values.audit.logTimezone | quote }}
              {{- end }}
              {{- if .Values.audit.pgAuditLog }}
              - name: POSTGRESQL_PGAUDIT_LOG
                value: {{ .Values.audit.pgAuditLog | quote }}
              {{- end }}
              - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
                value: {{ .Values.audit.pgAuditLogCatalog | quote }}
              # Others
              - name: POSTGRESQL_CLIENT_MIN_MESSAGES
                value: {{ .Values.audit.clientMinMessages | quote }}
              - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
                value: {{ .Values.postgresqlSharedPreloadLibraries | quote }}
              {{- if .Values.primary.extraEnvVars }}
              {{- include "tplvalues.render" (dict "value" .Values.primary.extraEnvVars "context" $) | nindent 12 }}
              {{- end }}
            {{- if or .Values.primary.extraEnvVarsCM .Values.primary.extraEnvVarsSecret }}
            envFrom:
              {{- if .Values.primary.extraEnvVarsCM }}
              - configMapRef:
                  name: {{ .Values.primary.extraEnvVarsCM }}
              {{- end }}
              {{- if .Values.primary.extraEnvVarsSecret }}
              - secretRef:
                  name: {{ .Values.primary.extraEnvVarsSecret }}
              {{- end }}
            {{- end }}
     
          - name: metrics
            image:  {{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
            imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001         
            env:
              {{- $database := include "postgresql.database" .}}
              {{- $sslmode := false }}    
              - name: DATA_SOURCE_URI
                value: {{ printf "127.0.0.1:%d/%s?sslmode=%s" (int (include "postgresql.service.port" .)) $database $sslmode }}
              - name: DATA_SOURCE_PASS
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: postgres-password
              - name: DATA_SOURCE_USER
                value: "postgres"
            ports:
              - name: http-metrics
                containerPort: {{ .Values.metrics.containerPorts.metrics }}                                     
            livenessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              httpGet:
                path: /
                port: http-metrics        
            readinessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              httpGet:
                path: /
                port: http-metrics     
            volumeMounts:
        volumes:
          - name: dshm
            emptyDir:
              medium: Memory       
              {{- if .Values.shmVolume.sizeLimit }}
              sizeLimit: {{ .Values.shmVolume.sizeLimit }}
              {{- end }}