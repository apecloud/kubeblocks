apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: postgresql-12
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  provider: kubeblocks
  description: A PostgreSQL (with Patroni HA) component definition for Kubernetes
  serviceKind: postgresql
  serviceVersion: 12.15.0
  services:
    - name: postgresql
      serviceName: postgresql
      spec:
        ports:
          - name: tcp-postgresql
            port: 5432
            targetPort: tcp-postgresql
          - name: tcp-pgbouncer
            port: 6432
            targetPort: tcp-pgbouncer
      roleSelector: primary
  connectionCredentials:
    - name: postgres
      serviceName: postgresql
      portName: tcp-postgresql
      accountName: postgres
    - name: pgbouncer
      serviceName: postgresql
      portName: tcp-pgbouncer
      accountName: postgres
  updateStrategy: BestEffortParallel
  volumes:
    - name: data
      needSnapshot: true
  roles:
    - name: primary
      serviceable: true
      writable: true
    - name: secondary
      serviceable: false
      writable: false
  labels:
    apps.kubeblocks.postgres.patroni/scope: "$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)-patroni$(KB_CLUSTER_UID_POSTFIX_8)"
  logConfigs:
    {{- range $name,$pattern := .Values.logConfigs }}
    - name: {{ $name }}
      filePathPattern: {{ $pattern }}
    {{- end }}
  monitor:
    builtIn: false
    exporterConfig:
      scrapePath: /metrics
      scrapePort: {{ .Values.metrics.service.port }}
  configs:
    - name: postgresql-configuration
      templateRef: postgresql-configuration
      constraintRef: postgresql14-cc
      keys:
        - postgresql.conf
      namespace: {{ .Release.Namespace }}
      volumeName: postgresql-config
      defaultMode: 0444
    - name: pgbouncer-configuration
      templateRef: pgbouncer-configuration
      keys:
        - pgbouncer.ini
      namespace: {{ .Release.Namespace }}
      volumeName: pgbouncer-config
      defaultMode: 0444
    - name: postgresql-custom-metrics
      templateRef: postgresql14-custom-metrics
      namespace: {{ .Release.Namespace }}
      volumeName: postgresql-custom-metrics
      defaultMode: 0444
    - name: agamotto-configuration
      templateRef: postgresql-agamotto-configuration
      namespace: {{ .Release.Namespace }}
      volumeName: agamotto-configuration
      defaultMode: 0444
  scripts:
    - name: postgresql-scripts
      templateRef: postgresql-scripts
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0555
  systemAccounts:
    - name: postgres
      initAccount: true
      passwordGenerationPolicy:
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases
    - name: kbadmin
      statement: CREATE USER $(USERNAME) SUPERUSER PASSWORD '$(PASSWD)';
      passwordGenerationPolicy: &defaultPasswdGenerationPolicy
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases
    - name: kbdataprotection
      statement: CREATE USER $(USERNAME) SUPERUSER PASSWORD '$(PASSWD)';
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
    - name: kbprobe
      statement: CREATE USER $(USERNAME) WITH PASSWORD '$(PASSWD)';  GRANT pg_monitor TO $(USERNAME);
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
    - name: kbmonitoring
      statement: CREATE USER $(USERNAME) WITH PASSWORD '$(PASSWD)';  GRANT pg_monitor TO $(USERNAME);
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
    - name: kbreplicator
      statement: CREATE USER $(USERNAME) WITH REPLICATION PASSWORD '$(PASSWD)';
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
  lifecycleActions:
    roleProbe:
      builtinHandler: postgresql
      failureThreshold: 2
      periodSeconds: 1
      timeoutSeconds: 1
    switchover:
      withCandidate:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:12.15.0-pgvector-v0.5.0
        exec:
          command:
            - /bin/bash
            - -c
          args:
            - curl -s http://$(KB_REPLICATION_PRIMARY_POD_FQDN):8008/switchover -XPOST -d '{"leader":"$(KB_REPLICATION_PRIMARY_POD_NAME)","candidate":"$(KB_SWITCHOVER_CANDIDATE_NAME)"}'
      withoutCandidate:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:12.15.0-pgvector-v0.5.0
        exec:
          command:
            - /bin/bash
            - -c
          args:
            - curl -s http://$(KB_REPLICATION_PRIMARY_POD_FQDN):8008/switchover -XPOST -d '{"leader":"$(KB_REPLICATION_PRIMARY_POD_NAME)"}'
    accountProvision:
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:12.15.0-pgvector-v0.5.0
        exec:
          command:
            - psql
          args:
            - -h$(KB_ACCOUNT_ENDPOINT)
            - -c
            - $(KB_ACCOUNT_STATEMENT)
        env:
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: username
                optional: false
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
  runtime:
    securityContext:
      runAsUser: 0
      fsGroup: 103
      runAsGroup: 103
    initContainers:
      - name: pg-init-container
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:12.15.0-pgvector-v0.5.0
        imagePullPolicy: {{ default .Values.image.pullPolicy "IfNotPresent" }}
        command:
          - /kb-scripts/init_container.sh
        volumeMounts:
          - name: data
            mountPath: /home/postgres/pgdata
          - name: postgresql-config
            mountPath: /home/postgres/conf
          - name: scripts
            mountPath: /kb-scripts
          - name: pod-info
            mountPath: /kb-podinfo
    containers:
      - name: postgresql
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:12.15.0-pgvector-v0.5.0
        imagePullPolicy: {{ default .Values.image.pullPolicy "IfNotPresent" }}
        securityContext:
          runAsUser: 0
        command:
          - /kb-scripts/setup.sh
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
              - /bin/sh
              - -c
              - -ee
              - |
                exec pg_isready -U {{ default "postgres" | quote }} -h 127.0.0.1 -p 5432
                [ -f /postgresql/tmp/.initialized ] || [ -f /postgresql/.initialized ]
        volumeMounts:
          - name: dshm
            mountPath: /dev/shm
          - name: data
            mountPath: /home/postgres/pgdata
          - name: postgresql-config
            mountPath: /home/postgres/conf
          - name: scripts
            mountPath: /kb-scripts
          - name: pod-info
            mountPath: /kb-podinfo
        ports:
          - name: tcp-postgresql
            containerPort: 5432
          - name: patroni
            containerPort: 8008
        env: ## refer https://github.com/zalando/spilo/blob/master/ENVIRONMENT.rst
          - name: DCS_ENABLE_KUBERNETES_API
            value: "true"
          - name: KUBERNETES_USE_CONFIGMAPS
            value: "true"
          - name: SCOPE
            value: "$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)-patroni$(KB_CLUSTER_UID_POSTFIX_8)"
          - name: KUBERNETES_SCOPE_LABEL
            value: "apps.kubeblocks.postgres.patroni/scope"
          - name: KUBERNETES_ROLE_LABEL
            value: "apps.kubeblocks.postgres.patroni/role"
          - name: KUBERNETES_LABELS
            value: '{"app.kubernetes.io/instance":"$(KB_CLUSTER_NAME)","apps.kubeblocks.io/component-name":"$(KB_COMP_NAME)"}'
          - name: RESTORE_DATA_DIR
            value: /home/postgres/pgdata/kb_restore
          - name: KB_PG_CONFIG_PATH
            value: /home/postgres/conf/postgresql.conf
          - name: SPILO_CONFIGURATION
            value: | ## https://github.com/zalando/patroni#yaml-configuration
              bootstrap:
                initdb:
                  - auth-host: md5
                  - auth-local: trust
          - name: ALLOW_NOSSL
            value: "true"
          - name: PGROOT
            value: /home/postgres/pgdata/pgroot
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PGUSER_SUPERUSER
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: username
                optional: false
          - name: PGPASSWORD_SUPERUSER
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
          - name: PGUSER_ADMIN
            value: superadmin
          - name: PGPASSWORD_ADMIN
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
          - name: PGUSER_STANDBY
            value: standby
          - name: PGPASSWORD_STANDBY
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: username
                optional: false
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
      - name: pgbouncer
        image: {{ .Values.pgbouncer.image.registry | default "docker.io" }}/{{ .Values.pgbouncer.image.repository }}:{{ default .Values.pgbouncer.image.tag }}
        imagePullPolicy: {{ .Values.pgbouncer.image.pullPolicy | quote }}
        securityContext:
          runAsUser: 0
        ports:
          - name: tcp-pgbouncer
            containerPort: 6432
        volumeMounts:
          - name: pgbouncer-config
            mountPath: /home/pgbouncer/conf
          - name: scripts
            mountPath: /kb-scripts
        command:
          - /kb-scripts/pgbouncer_setup.sh
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: tcp-pgbouncer
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: tcp-pgbouncer
        env:
          - name: PGBOUNCER_AUTH_TYPE
            value: md5
          - name: POSTGRESQL_USERNAME
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: username
                optional: false
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
          - name: POSTGRESQL_PORT
            value: "5432"
          - name: POSTGRESQL_HOST
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PGBOUNCER_PORT
            value: "6432"
          - name: PGBOUNCER_BIND_ADDRESS
            value: "0.0.0.0"
      - name: metrics
        image: {{ .Values.metrics.image.registry | default "docker.io" }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
        securityContext:
          runAsUser: 0
        env:
          - name: ENDPOINT
            value: {{ printf "127.0.0.1:5432" }}
          - name: DATA_SOURCE_PASS
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: password
                optional: false
          - name: DATA_SOURCE_USER
            valueFrom:
              secretKeyRef:
                name: $(COMPONENT_CONN_CREDENTIAL_SECRET_NAME)-postgres
                key: username
                optional: false
        command:
          - "/bin/agamotto"
          - "--config=/opt/agamotto/agamotto-config.yaml"
        ports:
          - name: http-metrics
            containerPort: {{ .Values.metrics.service.port }}
        volumeMounts:
          - name: postgresql-custom-metrics
            mountPath: /opt/conf
          - name: agamotto-configuration
            mountPath: /opt/agamotto
    volumes:
      - name: dshm
        emptyDir:
          medium: Memory
          {{- with .Values.shmVolume.sizeLimit }}
          sizeLimit: {{ . }}
          {{- end }}
      - name: pod-info
        downwardAPI:
          items:
            - path: "pod-role"
              fieldRef:
                fieldPath: metadata.labels['kubeblocks.io/role']
            - path: "primary-pod"
              fieldRef:
                fieldPath: metadata.annotations['rs.apps.kubeblocks.io/primary']
            - path: "component-replicas"
              fieldRef:
                fieldPath: metadata.annotations['apps.kubeblocks.io/component-replicas']
