apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-scripts
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
data:
  init_container.sh: |
    #!/bin/bash
    set -o errexit
    set -e
    mkdir -p /home/postgres/pgdata/conf
    chmod +777 -R /home/postgres/pgdata/conf
    cp /home/postgres/conf/postgresql.conf /home/postgres/pgdata/conf
    chmod +777 /home/postgres/pgdata/conf/postgresql.conf
  generate_patroni_yaml.py: |
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    import os
    import sys
    import yaml
    def write_file(config, filename, overwrite):
        if not overwrite and os.path.exists(filename):
            pass
        else:
            with open(filename, 'w') as f:
                f.write(config)
    def read_file_lines(file):
        ret = []
        for line in file.readlines():
            line = line.strip()
            if line and not line.startswith('#'):
                ret.append(line)
        return ret
    def postgresql_conf_to_dict(file_path):
        with open(file_path, 'r') as f:
            content = f.read()
        lines = content.splitlines()
        result = {}
        for line in lines:
            if line.startswith('#'):
                continue
            if '=' not in line:
                continue
            key, value = line.split('=', 1)
            result[key.strip()] = value.strip().strip("'")
        return result
    def main(filename):
        restore_dir = os.environ.get('RESTORE_DATA_DIR', '')
        local_config = yaml.safe_load(
            os.environ.get('SPILO_CONFIGURATION', os.environ.get('PATRONI_CONFIGURATION', ''))) or {}
        if not 'postgresql' in local_config:
            local_config['postgresql'] = {}
        postgresql = local_config['postgresql']
        postgresql['config_dir'] = '/home/postgres/pgdata/conf'
        postgresql['custom_conf'] = '/home/postgres/conf/postgresql.conf'
        # add pg_hba.conf
        with open('/home/postgres/conf/pg_hba.conf', 'r') as f:
            lines = read_file_lines(f)
            if lines:
                postgresql['pg_hba'] = lines
        if restore_dir and os.path.isfile(os.path.join(restore_dir, 'kb_restore.signal')):
            if not 'bootstrap' in local_config:
                local_config['bootstrap'] = {}
            with open('/home/postgres/conf/kb_restore.conf', 'r') as f:
                local_config['bootstrap'].update(yaml.safe_load(f))
        # point in time recovery(PITR)
        data_dir = os.environ.get('PGDATA', '')
        if os.path.isfile("/home/postgres/pgdata/conf/recovery.conf"):
            with open('/home/postgres/conf/kb_pitr.conf', 'r') as f:
                pitr_config = yaml.safe_load(f)
                re_config = postgresql_conf_to_dict("/home/postgres/pgdata/conf/recovery.conf")
                pitr_config[pitr_config['method']]['recovery_conf'].update(re_config)
                local_config['bootstrap'].update(pitr_config)
        write_file(yaml.dump(local_config, default_flow_style=False), filename, True)
    if __name__ == '__main__':
        main(sys.argv[1])
  setup.sh: |
    #!/bin/bash
    set -o errexit
    set -e

    # usage: retry <command>
    # e.g. retry pg_isready -U postgres -h $primary_fqdn -p 5432
    function retry {
      local max_attempts=10
      local attempt=1
      until "$@" || [ $attempt -eq $max_attempts ]; do
        echo "Command '$*' failed. Attempt $attempt of $max_attempts. Retrying in 5 seconds..."
        attempt=$((attempt + 1))
        sleep 5
      done
      if [ $attempt -eq $max_attempts ]; then
        echo "Command '$*' failed after $max_attempts attempts. Exiting..."
        exit 1
      fi
    }

    # Waiting for primary pod information from the DownwardAPI annotation to be available, with a maximum of 5 attempts
    attempt=1
    max_attempts=10
    while [ $attempt -le $max_attempts ] && [ -z "$(cat /kb-podinfo/primary-pod)" ]; do
      sleep 3
      attempt=$((attempt + 1))
    done

    primary=$(cat /kb-podinfo/primary-pod)
    echo "DownwardAPI get primary=$primary" >> /home/postgres/pgdata/.kb_set_up.log
    echo "KB_POD_NAME=$KB_POD_NAME" >> /home/postgres/pgdata/.kb_set_up.log
    if  [ ! -z "$primary" ] && [ "$primary" != "$KB_POD_NAME" ]; then
        primary_fqdn="$primary.$KB_CLUSTER_NAME-$KB_COMP_NAME-headless.$KB_NAMESPACE.svc"
        echo "primary_fqdn=$primary_fqdn" >> /home/postgres/pgdata/.kb_set_up.log
        # waiting for the primary to be ready, if the wait time exceeds the maximum number of retries, then the script will fail and exit.
        retry pg_isready -U {{ default "postgres" | quote }} -h $primary_fqdn -p 5432
    fi

    if [ -f ${RESTORE_DATA_DIR}/kb_restore.signal ]; then
        chown -R postgres ${RESTORE_DATA_DIR}
    fi
    python3 /kb-scripts/generate_patroni_yaml.py tmp_patroni.yaml
    export SPILO_CONFIGURATION=$(cat tmp_patroni.yaml)
    exec /launch.sh init
  pgbouncer_setup.sh: |
    #!/bin/bash
    set -o errexit
    set -e
    mkdir -p /opt/bitnami/pgbouncer/conf/ /opt/bitnami/pgbouncer/logs/ /opt/bitnami/pgbouncer/tmp/
    cp /home/pgbouncer/conf/pgbouncer.ini /opt/bitnami/pgbouncer/conf/
    echo "\"$POSTGRESQL_USERNAME\" \"$POSTGRESQL_PASSWORD\"" > /opt/bitnami/pgbouncer/conf/userlist.txt
    echo -e "\\n[databases]" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
    echo "postgres=host=$KB_POD_IP port=5432 dbname=postgres" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
    chmod +777 /opt/bitnami/pgbouncer/conf/pgbouncer.ini
    chmod +777 /opt/bitnami/pgbouncer/conf/userlist.txt
    useradd pgbouncer
    chown -R pgbouncer:pgbouncer /opt/bitnami/pgbouncer/conf/ /opt/bitnami/pgbouncer/logs/ /opt/bitnami/pgbouncer/tmp/
    /opt/bitnami/scripts/pgbouncer/run.sh
  backup-info-collector.sh: |
    #!/bin/bash
    {{- .Files.Get "dataprotection/backup-info-collector.sh" | nindent 4 }}
    export DB_USER=postgres
    export DB_HOST=127.0.0.1
    STOP_TIME=`get_current_time`
    [[ "${STOP_TIME}" != "" ]] && printf "{\"stopTime\": \"$(date -d "$STOP_TIME" -u '+%Y-%m-%dT%H:%M:%SZ')\"}" || printf "{}"