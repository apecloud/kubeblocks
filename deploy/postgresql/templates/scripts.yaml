apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-scripts
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
data:
  init_container.sh: |
    #!/bin/bash
    set -o errexit
    set -ex
    mkdir -p /home/postgres/pgdata/conf
    chmod +777 -R /home/postgres/pgdata/conf
    cp /home/postgres/conf/postgresql.conf /home/postgres/pgdata/conf
    chmod +777 /home/postgres/pgdata/conf/postgresql.conf
  generate_patroni_yaml.py: |
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    import os
    import sys
    import yaml
    def write_file(config, filename, overwrite):
        if not overwrite and os.path.exists(filename):
            pass
        else:
            with open(filename, 'w') as f:
                f.write(config)
    def read_file_lines(file):
        ret = []
        for line in file.readlines():
            line = line.strip()
            if line and not line.startswith('#'):
                ret.append(line)
        return ret
    def main(filename):
        restore_dir = os.environ.get('RESTORE_DATA_DIR', '')
        local_config = yaml.safe_load(
            os.environ.get('SPILO_CONFIGURATION', os.environ.get('PATRONI_CONFIGURATION', ''))) or {}
        if not 'postgresql' in local_config:
            local_config['postgresql'] = {}
        postgresql = local_config['postgresql']
        postgresql['config_dir'] = '/home/postgres/pgdata/conf'
        postgresql['custom_conf'] = '/home/postgres/conf/postgresql.conf'
        # TODO add local postgresql.parameters
        # add pg_hba.conf
        with open('/home/postgres/conf/pg_hba.conf', 'r') as f:
            lines = read_file_lines(f)
            if lines:
                postgresql['pg_hba'] = lines
        if restore_dir and os.path.isfile(os.path.join(restore_dir, 'kb_restore.signal')):
            if not 'bootstrap' in local_config:
                local_config['bootstrap'] = {}
            with open('/home/postgres/conf/kb_restore.conf', 'r') as f:
                local_config['bootstrap'].update(yaml.safe_load(f))
        write_file(yaml.dump(local_config, default_flow_style=False), filename, True)
    if __name__ == '__main__':
        main(sys.argv[1])
  setup.sh: |
    #!/bin/bash
    set -o errexit
    set -ex
    KB_PRIMARY_POD_NAME_PREFIX=${KB_PRIMARY_POD_NAME%%\.*}
    if [ "$KB_PRIMARY_POD_NAME_PREFIX" != "$KB_POD_NAME" ]; then
        # waiting for primary pod to be ready
        until pg_isready -U {{ default "postgres" | quote }} -h $KB_PRIMARY_POD_NAME -p 5432; do
            sleep 5
        done
    fi
    python3 /kb-scripts/generate_patroni_yaml.py tmp_patroni.yaml
    export SPILO_CONFIGURATION=$(cat tmp_patroni.yaml)
    # export SCOPE="$KB_CLUSTER_NAME-$KB_CLUSTER_NAME"
    exec /launch.sh init