apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-scripts
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
data:
  post_start.sh: |
    #!/bin/sh
    export PGPASSWORD=$POSTGRES_POSTGRES_PASSWORD
    echo "wait for the database to be accessible, trying to connect."
    while :
    do
        echo "start to connect postgres."
        psql -Upostgres -c "SELECT 1;" >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "postgres connect success, break now."
            if [ -f ${PGDATA}/recovery.signal ]; then
                psql -Upostgres -c "select pg_wal_replay_resume();"
            fi
            if [ -f ${PGDATA}/../init-scripts/restore.sh ]; then
               echo "restore.sh exist, remove it."
               rm -rf ${PGDATA}/../init-scripts/restore.sh
            fi
            break
        fi
        echo "postgres connect fail, sleep and try again."
        sleep 1
    done
    echo "create extension pg_stat_statements."
    psql -Upostgres -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;" 2>&1
    if [ $? -eq 0 ];then
        echo "create extension pg_stat_statements success."
    else
        exit 1
    fi
  setup.sh: |
    #!/bin/bash
    set -o errexit
    set -o nounset
    KB_PRIMARY_POD_NAME_PREFIX="${KB_PRIMARY_POD_NAME%%\.*}"
    # debug
    echo "KB_PRIMARY_POD_NAME=$KB_PRIMARY_POD_NAME"
    echo "KB_PRIMARY_POD_NAME_PREFIX=$KB_PRIMARY_POD_NAME_PREFIX"
    echo "KB_POD_NAME=$KB_POD_NAME"
    if [ "$KB_PRIMARY_POD_NAME_PREFIX" != "$KB_POD_NAME" ]; then
      export POSTGRES_REPLICATION_MODE=slave
      # TODO: use replicator instead
      export POSTGRES_REPLICATION_USER=$POSTGRES_USER
      export POSTGRES_REPLICATION_PASSWORD=$POSTGRES_PASSWORD
      export POSTGRES_CLUSTER_APP_NAME=my-application
      export POSTGRES_MASTER_HOST=$KB_PRIMARY_POD_NAME
      export POSTGRES_MASTER_PORT_NUMBER="5432"
      . /opt/bitnami/scripts/libos.sh
      . /opt/bitnami/scripts/libpostgresql.sh
      . /opt/bitnami/scripts/postgresql-env.sh
      # add permission to daemon user
      chmod a+w "$POSTGRESQL_VOLUME_DIR"
      # Ensure 'daemon' user exists when running as 'root'
      am_i_root && ensure_user_exists "$POSTGRESQL_DAEMON_USER" --group "$POSTGRESQL_DAEMON_GROUP"
      if [ ! -d ${PGDATA} ]; then
         # pg_basebackup
         postgresql_slave_init_db
      fi
    else 
      # bitnami scripts will execute all the *.sh files in the /docker-entrypoint-initdb.d directory after setup
      cp /scripts/post_start.sh /docker-entrypoint-initdb.d
    fi
    if [ -f ${PGDATA}/../init-scripts/kb_restore.sh ]; then
        # add recovery.signal/standby.signal to trigger recovery
        cp ${PGDATA}/../init-scripts/kb_restore.sh /docker-entrypoint-preinitdb.d
    fi
    /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh