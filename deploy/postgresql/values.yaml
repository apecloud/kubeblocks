## @section PostgreSQL common parameters
##

## Bitnami PostgreSQL image version
## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
## @param image.registry PostgreSQL image registry
## @param image.repository PostgreSQL image repository
## @param image.tag PostgreSQL image tag (immutable tags are recommended)
## @param image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
## @param image.pullPolicy PostgreSQL image pull policy
## @param image.pullSecrets Specify image pull secrets
## @param image.debug Specify if debug values should be set
##
image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 14.6.0-debian-11-r22
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: [ ]
  ## Set to true if you would like to see extra information on logs
  ##
  debug: false
## Authentication parameters
##
auth:
  ## @param auth.postgresPassword Password for the "postgres" admin user, leave empty 
  ## for random generated password.
  ##
  postgresPassword:
  ## @param auth.database Name for a custom database to create
  ##
  database: "custom_db"
## Audit settings
## @param audit.logHostname Log client hostnames
## @param audit.logConnections Add client log-in operations to the log file
## @param audit.logDisconnections Add client log-outs operations to the log file
## @param audit.pgAuditLog Add operations to log using the pgAudit extension
## @param audit.pgAuditLogCatalog Log catalog using pgAudit
## @param audit.clientMinMessages Message log level to share with the user
## @param audit.logLinePrefix Template for log line prefix (default if not set)
## @param audit.logTimezone Timezone for the log timestamps
##
audit:
  logHostname: false
  logConnections: false
  logDisconnections: false
  pgAuditLog: ""
  pgAuditLogCatalog: "off"
  clientMinMessages: error
  logLinePrefix: ""
  logTimezone: ""

## Set PostgreSQL preload extension shared libraries.
## @param postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
##
postgresqlSharedPreloadLibraries: "pg_stat_statements, auto_explain"
## Start PostgreSQL pod(s) without limitations on shm memory.
## By default docker and containerd (and possibly other container runtimes) limit `/dev/shm` to `64M`
##
shmVolume:
  ## @param shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
  ##
  enabled: true
  ## @param shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
  ## Note: the size of the tmpfs counts against container's memory limit
  ## e.g:
  ## sizeLimit: 1Gi
  ##
  sizeLimit: ""

## @section PostgreSQL Primary parameters
##
primary:
  ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
  ##
  name: primary
  ## @param primary.configuration PostgreSQL Primary main configuration to be injected as ConfigMap
  ##
  configuration: |-
    # - Connection Settings -
    listen_addresses = '*'
    port = '5432'
    #archive_command = 'wal_dir=/pg/arcwal; [[ $(date +%H%M) == 1200 ]] && rm -rf ${wal_dir}/$(date -d"yesterday" +%Y%m%d); /bin/mkdir -p ${wal_dir}/$(date +%Y%m%d) && /usr/bin/lz4 -q -z %p > ${wal_dir}/$(date +%Y%m%d)/%f.lz4'
    #archive_mode = 'True'
    auto_explain.log_analyze = 'True'
    auto_explain.log_min_duration = '1s'
    auto_explain.log_nested_statements = 'True'
    auto_explain.log_timing = 'True'
    auto_explain.log_verbose = 'True'
    autovacuum_analyze_scale_factor = '0.05'
    autovacuum_freeze_max_age = '100000000'
    autovacuum_max_workers = '1'
    autovacuum_naptime = '1min'
    autovacuum_vacuum_cost_delay = '-1'
    autovacuum_vacuum_cost_limit = '-1'
    autovacuum_vacuum_scale_factor = '0.1'
    bgwriter_delay = '10ms'
    bgwriter_lru_maxpages = '800'
    bgwriter_lru_multiplier = '5.0'
    checkpoint_completion_target = '0.95'
    checkpoint_timeout = '10min'
    citus.node_conninfo = 'sslmode=prefer'
    cluster_name = 'prod-osm-pigsty000'
    commit_delay = '20'
    commit_siblings = '10'
    deadlock_timeout = '50ms'
    default_statistics_target = '500'
    effective_cache_size = '12GB'
    hot_standby = 'on'
    hot_standby_feedback = 'True'
    huge_pages = 'try'
    idle_in_transaction_session_timeout = '1h'
    listen_addresses = '0.0.0.0'
    log_autovacuum_min_duration = '1s'
    log_checkpoints = 'True'
    log_destination = 'csvlog'
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d.log'
    log_lock_waits = 'True'
    log_min_duration_statement = '100'
    log_replication_commands = 'True'
    log_statement = 'ddl'
    logging_collector = 'True'
    #maintenance_work_mem = '3952MB'
    max_connections = '10000'
    max_locks_per_transaction = '128'
    max_logical_replication_workers = '8'
    max_parallel_maintenance_workers = '2'
    max_parallel_workers = '8'
    max_parallel_workers_per_gather = '0'
    max_prepared_transactions = '0'
    max_replication_slots = '16'
    max_standby_archive_delay = '10min'
    max_standby_streaming_delay = '3min'
    max_sync_workers_per_subscription = '6'
    max_wal_senders = '24'
    max_wal_size = '100GB'
    max_worker_processes = '8'
    min_wal_size = '20GB'
    password_encryption = 'md5'
    pg_stat_statements.max = '5000'
    pg_stat_statements.track = 'all'
    pg_stat_statements.track_planning = 'False'
    pg_stat_statements.track_utility = 'False'
    random_page_cost = '1.1'
    #auto generated
    shared_buffers = '1GB'
    #shared_preload_libraries = 'timescaledb, pg_stat_statements, auto_explain'
    superuser_reserved_connections = '10'
    temp_file_limit = '100GB'
    #timescaledb.max_background_workers = '6'
    #timescaledb.telemetry_level = 'off'
    track_activity_query_size = '8192'
    track_commit_timestamp = 'True'
    track_functions = 'all'
    track_io_timing = 'True'
    vacuum_cost_delay = '2ms'
    vacuum_cost_limit = '10000'
    vacuum_defer_cleanup_age = '50000'
    wal_buffers = '16MB'
    wal_keep_size = '20GB'
    wal_level = 'replica'
    wal_log_hints = 'on'
    wal_receiver_status_interval = '1s'
    wal_receiver_timeout = '60s'
    wal_writer_delay = '20ms'
    wal_writer_flush_after = '1MB'
    work_mem = '32MB'


  ## @param primary.pgHbaConfiguration PostgreSQL Primary client authentication configuration
  ## e.g:#
  ## pgHbaConfiguration: |-
  ##   local all all trust
  ##   host all all localhost trust
  ##   host mydatabase mysuser 192.168.0.0/24 md5
  ##
  pgHbaConfiguration: |-
    host     all             all             0.0.0.0/0               md5
    host     all             all             ::/0                    md5
    local    all             all                                     md5
    host     all             all             127.0.0.1/32            md5
    host     all             all             ::1/128                 md5

  cue: |-
    #PGParameter: {

      // Sets the application name to be reported in statistics and logs.
      application_name?: string

      // Sets the shell command that will be called to archive a WAL file.
      archive_command?: string

      // (s) Forces a switch to the next xlog file if a new file has not been started within N seconds.
      archive_timeout: int & >=0 & <=2147483647 | *300 @timeDurationResource(1s)

      // Enable input of NULL elements in arrays.
      array_nulls?: bool & false | true

      // (s) Sets the maximum allowed time to complete client authentication.
      authentication_timeout?: int & >=1 & <=600 @timeDurationResource()

      // Use EXPLAIN ANALYZE for plan logging.
      "auto_explain.log_analyze"?: bool & false | true

      // Log buffers usage.
      "auto_explain.log_buffers"?: bool & false | true

      // EXPLAIN format to be used for plan logging.
      "auto_explain.log_format"?: string & "text" | "xml" | "json" | "yaml"
    
      // (ms) Sets the minimum execution time above which plans will be logged.
      "auto_explain.log_min_duration"?: int & >=-1 & <=2147483647 @timeDurationResource()
    
      // Log nested statements.
      "auto_explain.log_nested_statements"?: bool & false | true
    
      // Collect timing data, not just row counts.
      "auto_explain.log_timing"?: bool & false | true
    
      // Include trigger statistics in plans.
      "auto_explain.log_triggers"?: bool & false | true
    
      // Use EXPLAIN VERBOSE for plan logging.
      "auto_explain.log_verbose"?: bool & false | true
    
      // Fraction of queries to process.
      "auto_explain.sample_rate"?: float & >=0 & <=1
    
      // Starts the autovacuum subprocess.
      autovacuum?: bool & false | true
    
      // Number of tuple inserts, updates or deletes prior to analyze as a fraction of reltuples.
      autovacuum_analyze_scale_factor: float & >=0 & <=100 | *0.05
    
      // Minimum number of tuple inserts, updates or deletes prior to analyze.
      autovacuum_analyze_threshold?: int & >=0 & <=2147483647
    
      // Age at which to autovacuum a table to prevent transaction ID wraparound.
      autovacuum_freeze_max_age?: int & >=100000000 & <=750000000
    
      // Sets the maximum number of simultaneously running autovacuum worker processes.
      autovacuum_max_workers?: int & >=1 & <=8388607
    
      // Multixact age at which to autovacuum a table to prevent multixact wraparound.
      autovacuum_multixact_freeze_max_age?: int & >=10000000 & <=2000000000
    
      // (s) Time to sleep between autovacuum runs.
      autovacuum_naptime: int & >=1 & <=2147483 | *15 @timeDurationResource(1s)
    
      // (ms) Vacuum cost delay in milliseconds, for autovacuum.
      autovacuum_vacuum_cost_delay?: int & >=-1 & <=100
    
      // Vacuum cost amount available before napping, for autovacuum.
      autovacuum_vacuum_cost_limit?: int & >=-1 & <=10000
    
      // Number of tuple inserts prior to vacuum as a fraction of reltuples.
      autovacuum_vacuum_insert_scale_factor?: float & >=0 & <=100
    
      // Minimum number of tuple inserts prior to vacuum, or -1 to disable insert vacuums.
      autovacuum_vacuum_insert_threshold?: int & >=-1 & <=2147483647
    
      // Number of tuple updates or deletes prior to vacuum as a fraction of reltuples.
      autovacuum_vacuum_scale_factor: float & >=0 & <=100 | *0.1
    
      // Minimum number of tuple updates or deletes prior to vacuum.
      autovacuum_vacuum_threshold?: int & >=0 & <=2147483647
    
      // (kB) Sets the maximum memory to be used by each autovacuum worker process.
      autovacuum_work_mem?: int & >=-1 & <=2147483647 @storeResource(1KB)
    
      // Sets the maximum time to wait while connecting to AWS Lambda.
      "aws_lambda.connect_timeout_ms"?: int & >=1 & <=900000 @timeDurationResource()
    
      // Sets the maximum time to wait while waiting for response from AWS Lambda
      "aws_lambda.request_timeout_ms"?: int & >=1 & <=900000 @timeDurationResource()
    
      // (8Kb) Number of pages after which previously performed writes are flushed to disk.
      backend_flush_after?: int & >=0 & <=256
    
      // Sets whether \ is allowed in string literals.
      backslash_quote?: string & "safe_encoding" | "on" | "off"
    
      // Log backtrace for errors in these functions.
      backtrace_functions?: string
    
      // (ms) Background writer sleep time between rounds.
      bgwriter_delay?: int & >=10 & <=10000 @timeDurationResource()
    
      // (8Kb) Number of pages after which previously performed writes are flushed to disk.
      bgwriter_flush_after?: int & >=0 & <=256
    
      // Background writer maximum number of LRU pages to flush per round.
      bgwriter_lru_maxpages?: int & >=0 & <=1000
    
      // Multiple of the average buffer usage to free per round.
      bgwriter_lru_multiplier?: float & >=0 & <=10
    
      // Sets the output format for bytea.
      bytea_output?: string & "escape" | "hex"
    
      // Check function bodies during CREATE FUNCTION.
      check_function_bodies?: bool & false | true
    
      // Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval.
      checkpoint_completion_target: float & >=0 & <=1 | *0.9
    
      // (8kB) Number of pages after which previously performed writes are flushed to disk.
      checkpoint_flush_after?: int & >=0 & <=256 @storeResource(8KB)
    
      // (s) Sets the maximum time between automatic WAL checkpoints.
      checkpoint_timeout?: int & >=30 & <=3600 @timeDurationResource(1s)
    
      // (s) Enables warnings if checkpoint segments are filled more frequently than this.
      checkpoint_warning?: int & >=0 & <=2147483647 @timeDurationResource(1s)
    
      // time between checks for client disconnection while running queries
      client_connection_check_interval?: int & >=0 & <=2147483647 @timeDurationResource()
    
      // Sets the clients character set encoding.
      client_encoding?: string
    
      // Sets the message levels that are sent to the client.
      client_min_messages?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "log" | "notice" | "warning" | "error"
    
      // Sets the delay in microseconds between transaction commit and flushing WAL to disk.
      commit_delay?: int & >=0 & <=100000
    
      // Sets the minimum concurrent open transactions before performing commit_delay.
      commit_siblings?: int & >=0 & <=1000
    
      // Enables in-core computation of a query identifier
      compute_query_id?: string & "on" | "auto"
    
      // Sets the servers main configuration file.
      config_file?: string
    
      // Enables the planner to use constraints to optimize queries.
      constraint_exclusion?: string & "partition" | "on" | "off"
    
      // Sets the planners estimate of the cost of processing each index entry during an index scan.
      cpu_index_tuple_cost?: float & >=0 & <=1.79769
    
      // Sets the planners estimate of the cost of processing each operator or function call.
      cpu_operator_cost?: float & >=0 & <=1.79769
    
      // Sets the planners estimate of the cost of processing each tuple (row).
      cpu_tuple_cost?: float & >=0 & <=1.79769
    
      // Sets the database to store pg_cron metadata tables
      "cron.database_name"?: string
    
      // Log all jobs runs into the job_run_details table
      "cron.log_run"?: string & "on" | "off"
    
      // Log all cron statements prior to execution.
      "cron.log_statement"?: string & "on" | "off"
    
      // Maximum number of jobs that can run concurrently.
      "cron.max_running_jobs": int & >=0 & <=100 | *5
    
      // Enables background workers for pg_cron
      "cron.use_background_workers"?: string
    
      // Sets the planners estimate of the fraction of a cursors rows that will be retrieved.
      cursor_tuple_fraction?: float & >=0 & <=1
    
      // Sets the servers data directory.
      data_directory?: string
    
      // Sets the display format for date and time values.
      datestyle?: string
    
      // Enables per-database user names.
      db_user_namespace?: bool & false | true
    
      // (ms) Sets the time to wait on a lock before checking for deadlock.
      deadlock_timeout?: int & >=1 & <=2147483647 @timeDurationResource()
    
      // Indents parse and plan tree displays.
      debug_pretty_print?: bool & false | true
    
      // Logs each querys parse tree.
      debug_print_parse?: bool & false | true
    
      // Logs each querys execution plan.
      debug_print_plan?: bool & false | true
    
      // Logs each querys rewritten parse tree.
      debug_print_rewritten?: bool & false | true
    
      // Sets the default statistics target.
      default_statistics_target?: int & >=1 & <=10000
    
      // Sets the default tablespace to create tables and indexes in.
      default_tablespace?: string
    
      // Sets the default TOAST compression method for columns of newly-created tables
      default_toast_compression?: string & "pglz" | "lz4"
    
      // Sets the default deferrable status of new transactions.
      default_transaction_deferrable?: bool & false | true
    
      // Sets the transaction isolation level of each new transaction.
      default_transaction_isolation?: string & "serializable" | "repeatable read" | "read committed" | "read uncommitted"
    
      // Sets the default read-only status of new transactions.
      default_transaction_read_only?: bool & false | true
    
      // (8kB) Sets the planners assumption about the size of the disk cache.
      effective_cache_size?: int & >=1 & <=2147483647 @storeResource(8KB)
    
      // Number of simultaneous requests that can be handled efficiently by the disk subsystem.
      effective_io_concurrency?: int & >=0 & <=1000
    
      // Enables or disables the query planner's use of async-aware append plan types
      enable_async_append?: bool & false | true
    
      // Enables the planners use of bitmap-scan plans.
      enable_bitmapscan?: bool & false | true
    
      // Enables the planner's use of gather merge plans.
      enable_gathermerge?: bool & false | true
    
      // Enables the planners use of hashed aggregation plans.
      enable_hashagg?: bool & false | true
    
      // Enables the planners use of hash join plans.
      enable_hashjoin?: bool & false | true
    
      // Enables the planner's use of incremental sort steps.
      enable_incremental_sort?: bool & false | true
    
      // Enables the planner's use of index-only-scan plans.
      enable_indexonlyscan?: bool & false | true
    
      // Enables the planners use of index-scan plans.
      enable_indexscan?: bool & false | true
    
      // Enables the planners use of materialization.
      enable_material?: bool & false | true
    
      // Enables the planner's use of memoization
      enable_memoize?: bool & false | true
    
      // Enables the planners use of merge join plans.
      enable_mergejoin?: bool & false | true
    
      // Enables the planners use of nested-loop join plans.
      enable_nestloop?: bool & false | true
    
      // Enables the planner's use of parallel append plans.
      enable_parallel_append?: bool & false | true
    
      // Enables the planner's user of parallel hash plans.
      enable_parallel_hash?: bool & false | true
    
      // Enable plan-time and run-time partition pruning.
      enable_partition_pruning?: bool & false | true
    
      // Enables partitionwise aggregation and grouping.
      enable_partitionwise_aggregate?: bool & false | true
    
      // Enables partitionwise join.
      enable_partitionwise_join?: bool & false | true
    
      // Enables the planners use of sequential-scan plans.
      enable_seqscan?: bool & false | true
    
      // Enables the planners use of explicit sort steps.
      enable_sort?: bool & false | true
    
      // Enables the planners use of TID scan plans.
      enable_tidscan?: bool & false | true
    
      // Warn about backslash escapes in ordinary string literals.
      escape_string_warning?: bool & false | true
    
      // Terminate session on any error.
      exit_on_error?: bool & false | true
    
      // Sets the number of digits displayed for floating-point values.
      extra_float_digits?: int & >=-15 & <=3
    
      // Forces use of parallel query facilities.
      force_parallel_mode?: bool & false | true
    
      // Sets the FROM-list size beyond which subqueries are not collapsed.
      from_collapse_limit?: int & >=1 & <=2147483647
    
      // Forces synchronization of updates to disk.
      fsync: bool & false | true | *true
    
      // Writes full pages to WAL when first modified after a checkpoint.
      full_page_writes: bool & false | true | *true
    
      // Enables genetic query optimization.
      geqo?: bool & false | true
    
      // GEQO: effort is used to set the default for other GEQO parameters.
      geqo_effort?: int & >=1 & <=10
    
      // GEQO: number of iterations of the algorithm.
      geqo_generations?: int & >=0 & <=2147483647
    
      // GEQO: number of individuals in the population.
      geqo_pool_size?: int & >=0 & <=2147483647 @storeResource()
    
      // GEQO: seed for random path selection.
      geqo_seed?: float & >=0 & <=1
    
      // GEQO: selective pressure within the population.
      geqo_selection_bias?: float & >=1.5 & <=2
    
      // Sets the threshold of FROM items beyond which GEQO is used.
      geqo_threshold?: int & >=2 & <=2147483647
    
      // Sets the maximum allowed result for exact search by GIN.
      gin_fuzzy_search_limit?: int & >=0 & <=2147483647
    
      // (kB) Sets the maximum size of the pending list for GIN index.
      gin_pending_list_limit?: int & >=64 & <=2147483647 @storeResource(1KB)
    
      // Multiple of work_mem to use for hash tables.
      hash_mem_multiplier?: float & >=1 & <=1000
    
      // Sets the servers hba configuration file.
      hba_file?: string
    
      // Force group aggregation for hll
      "hll.force_groupagg"?: bool & false | true
    
      // Allows feedback from a hot standby to the primary that will avoid query conflicts.
      hot_standby_feedback?: bool & false | true
    
      // Use of huge pages on Linux.
      huge_pages?: string & "on" | "off" | "try"
    
      // Sets the servers ident configuration file.
      ident_file?: string
    
      // (ms) Sets the maximum allowed duration of any idling transaction.
      idle_in_transaction_session_timeout: int & >=0 & <=2147483647 | *86400000 @timeDurationResource()
    
      // Terminate any session that has been idle (that is, waiting for a client query), but not within an open transaction, for longer than the specified amount of time
      idle_session_timeout?: int & >=0 & <=2147483647 @timeDurationResource()
    
      // Continues recovery after an invalid pages failure.
      ignore_invalid_pages: bool & false | true | *false
    
      // Sets the display format for interval values.
      intervalstyle?: string & "postgres" | "postgres_verbose" | "sql_standard" | "iso_8601"
    
      // Allow JIT compilation.
      jit: bool & false | true | *false
    
      // Perform JIT compilation if query is more expensive.
      jit_above_cost?: float & >=-1 & <=1.79769
    
      // Perform JIT inlining if query is more expensive.
      jit_inline_above_cost?: float & >=-1 & <=1.79769
    
      // Optimize JITed functions if query is more expensive.
      jit_optimize_above_cost?: float & >=-1 & <=1.79769
    
      // Sets the FROM-list size beyond which JOIN constructs are not flattened.
      join_collapse_limit?: int & >=1 & <=2147483647
    
      // Sets the language in which messages are displayed.
      lc_messages?: string
    
      // Sets the locale for formatting monetary amounts.
      lc_monetary?: string
    
      // Sets the locale for formatting numbers.
      lc_numeric?: string
    
      // Sets the locale for formatting date and time values.
      lc_time?: string
    
      // Sets the host name or IP address(es) to listen to.
      listen_addresses?: string
    
      // Enables backward compatibility mode for privilege checks on large objects.
      lo_compat_privileges: bool & false | true | *false
    
      // (ms) Sets the minimum execution time above which autovacuum actions will be logged.
      log_autovacuum_min_duration: int & >=-1 & <=2147483647 | *10000 @timeDurationResource()
    
      // Logs each checkpoint.
      log_checkpoints: bool & false | true | *true
    
      // Logs each successful connection.
      log_connections?: bool & false | true
    
      // Sets the destination for server log output.
      log_destination?: string & "stderr" | "csvlog"
    
      // Sets the destination directory for log files.
      log_directory?: string
    
      // Logs end of a session, including duration.
      log_disconnections?: bool & false | true
    
      // Logs the duration of each completed SQL statement.
      log_duration?: bool & false | true
    
      // Sets the verbosity of logged messages.
      log_error_verbosity?: string & "terse" | "default" | "verbose"
    
      // Writes executor performance statistics to the server log.
      log_executor_stats?: bool & false | true
    
      // Sets the file permissions for log files.
      log_file_mode?: string
    
      // Sets the file name pattern for log files.
      log_filename?: string
    
      // Start a subprocess to capture stderr output and/or csvlogs into log files.
      logging_collector: bool & false | true | *true
    
      // Logs the host name in the connection logs.
      log_hostname?: bool & false | true
    
      // (kB) Sets the maximum memory to be used for logical decoding.
      logical_decoding_work_mem?: int & >=64 & <=2147483647 @storeResource(1KB)
    
      // Controls information prefixed to each log line.
      log_line_prefix?: string
    
      // Logs long lock waits.
      log_lock_waits?: bool & false | true
    
      // (ms) Sets the minimum execution time above which a sample of statements will be logged. Sampling is determined by log_statement_sample_rate.
      log_min_duration_sample?: int & >=-1 & <=2147483647 @timeDurationResource()
    
      // (ms) Sets the minimum execution time above which statements will be logged.
      log_min_duration_statement?: int & >=-1 & <=2147483647 @timeDurationResource()
    
      // Causes all statements generating error at or above this level to be logged.
      log_min_error_statement?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "info" | "notice" | "warning" | "error" | "log" | "fatal" | "panic"
    
      // Sets the message levels that are logged.
      log_min_messages?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "info" | "notice" | "warning" | "error" | "log" | "fatal"
    
      // When logging statements, limit logged parameter values to first N bytes.
      log_parameter_max_length?: int & >=-1 & <=1073741823
    
      // When reporting an error, limit logged parameter values to first N bytes.
      log_parameter_max_length_on_error?: int & >=-1 & <=1073741823
    
      // Writes parser performance statistics to the server log.
      log_parser_stats?: bool & false | true
    
      // Writes planner performance statistics to the server log.
      log_planner_stats?: bool & false | true
    
      // Controls whether a log message is produced when the startup process waits longer than deadlock_timeout for recovery conflicts
      log_recovery_conflict_waits?: bool & false | true
    
      // Logs each replication command.
      log_replication_commands?: bool & false | true
    
      // (min) Automatic log file rotation will occur after N minutes.
      log_rotation_age: int & >=1 & <=1440 | *60 @timeDurationResource(1min)
    
      // (kB) Automatic log file rotation will occur after N kilobytes.
      log_rotation_size?: int & >=0 & <=2097151 @storeResource(1KB)
    
      // Sets the type of statements logged.
      log_statement?: string & "none" | "ddl" | "mod" | "all"
    
      // Fraction of statements exceeding log_min_duration_sample to be logged.
      log_statement_sample_rate?: float & >=0 & <=1
    
      // Writes cumulative performance statistics to the server log.
      log_statement_stats?: bool & false | true
    
      // (kB) Log the use of temporary files larger than this number of kilobytes.
      log_temp_files?: int & >=-1 & <=2147483647 @storeResource(1KB)
    
      // Sets the time zone to use in log messages.
      log_timezone?: string
    
      // Set the fraction of transactions to log for new transactions.
      log_transaction_sample_rate?: float & >=0 & <=1
    
      // Truncate existing log files of same name during log rotation.
      log_truncate_on_rotation: bool & false | true | *false
    
      // A variant of effective_io_concurrency that is used for maintenance work.
      maintenance_io_concurrency?: int & >=0 & <=1000
    
      // (kB) Sets the maximum memory to be used for maintenance operations.
      maintenance_work_mem?: int & >=1024 & <=2147483647 @storeResource(1KB)
    
      // Sets the maximum number of concurrent connections.
      max_connections?: int & >=6 & <=8388607
    
      // Sets the maximum number of simultaneously open files for each server process.
      max_files_per_process?: int & >=64 & <=2147483647
    
      // Sets the maximum number of locks per transaction.
      max_locks_per_transaction: int & >=10 & <=2147483647 | *64
    
      // Maximum number of logical replication worker processes.
      max_logical_replication_workers?: int & >=0 & <=262143
    
      // Sets the maximum number of parallel processes per maintenance operation.
      max_parallel_maintenance_workers?: int & >=0 & <=1024
    
      // Sets the maximum number of parallel workers than can be active at one time.
      max_parallel_workers?: int & >=0 & <=1024
    
      // Sets the maximum number of parallel processes per executor node.
      max_parallel_workers_per_gather?: int & >=0 & <=1024
    
      // Sets the maximum number of predicate-locked tuples per page.
      max_pred_locks_per_page?: int & >=0 & <=2147483647
    
      // Sets the maximum number of predicate-locked pages and tuples per relation.
      max_pred_locks_per_relation?: int & >=-2147483648 & <=2147483647
    
      // Sets the maximum number of predicate locks per transaction.
      max_pred_locks_per_transaction?: int & >=10 & <=2147483647
    
      // Sets the maximum number of simultaneously prepared transactions.
      max_prepared_transactions: int & >=0 & <=8388607 | *0
    
      // Sets the maximum number of replication slots that the server can support.
      max_replication_slots: int & >=5 & <=8388607 | *20
    
      // (MB) Sets the maximum WAL size that can be reserved by replication slots.
      max_slot_wal_keep_size?: int & >=-1 & <=2147483647 @storeResource(1MB)
    
      // (kB) Sets the maximum stack depth, in kilobytes.
      max_stack_depth: int & >=100 & <=2147483647 | *6144 @storeResource(1KB)
    
      // (ms) Sets the maximum delay before canceling queries when a hot standby server is processing archived WAL data.
      max_standby_archive_delay?: int & >=-1 & <=2147483647 @timeDurationResource()
    
      // (ms) Sets the maximum delay before canceling queries when a hot standby server is processing streamed WAL data.
      max_standby_streaming_delay?: int & >=-1 & <=2147483647 @timeDurationResource()
    
      // Maximum number of synchronization workers per subscription
      max_sync_workers_per_subscription?: int & >=0 & <=262143
    
      // Sets the maximum number of simultaneously running WAL sender processes.
      max_wal_senders: int & >=5 & <=8388607 | *20
    
      // (MB) Sets the WAL size that triggers a checkpoint.
      max_wal_size: int & >=128 & <=201326592 | *2048 @storeResource(1MB)
    
      // Sets the maximum number of concurrent worker processes.
      max_worker_processes?: int & >=0 & <=262143
    
      // Specifies the amount of memory that should be allocated at server startup for use by parallel queries
      min_dynamic_shared_memory?: int & >=0 & <=715827882 @storeResource()
    
      // (8kB) Sets the minimum amount of index data for a parallel scan.
      min_parallel_index_scan_size?: int & >=0 & <=715827882 @storeResource(8KB)
    
      // (8kB) Sets the minimum amount of table data for a parallel scan.
      min_parallel_table_scan_size?: int & >=0 & <=715827882 @storeResource(8KB)
    
      // (MB) Sets the minimum size to shrink the WAL to.
      min_wal_size: int & >=128 & <=201326592 | *192 @storeResource(1MB)
    
      // (min) Time before a snapshot is too old to read pages changed after the snapshot was taken.
      old_snapshot_threshold?: int & >=-1 & <=86400
    
      // Emulate oracle's date output behaviour.
      "orafce.nls_date_format"?: string
    
      // Specify timezone used for sysdate function.
      "orafce.timezone"?: string
    
      // Controls whether Gather and Gather Merge also run subplans.
      parallel_leader_participation?: bool & false | true
    
      // Sets the planner's estimate of the cost of starting up worker processes for parallel query.
      parallel_setup_cost?: float & >=0 & <=1.79769
    
      // Sets the planner's estimate of the cost of passing each tuple (row) from worker to master backend.
      parallel_tuple_cost?: float & >=0 & <=1.79769
    
      // Encrypt passwords.
      password_encryption?: string & "md5" | "scram-sha-256"
    
      // Specifies which classes of statements will be logged by session audit logging.
      "pgaudit.log"?: string & "ddl" | "function" | "misc" | "read" | "role" | "write" | "none" | "all" | "-ddl" | "-function" | "-misc" | "-read" | "-role" | "-write"
    
      // Specifies that session logging should be enabled in the case where all relations in a statement are in pg_catalog.
      "pgaudit.log_catalog"?: bool & false | true
    
      // Specifies the log level that will be used for log entries.
      "pgaudit.log_level"?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "info" | "notice" | "warning" | "log"
    
      // Specifies that audit logging should include the parameters that were passed with the statement.
      "pgaudit.log_parameter"?: bool & false | true
    
      // Specifies whether session audit logging should create a separate log entry for each relation (TABLE, VIEW, etc.) referenced in a SELECT or DML statement.
      "pgaudit.log_relation"?: bool & false | true
    
      // Specifies that audit logging should include the rows retrieved or affected by a statement.
      "pgaudit.log_rows": bool & false | true | *false
    
      // Specifies whether logging will include the statement text and parameters (if enabled).
      "pgaudit.log_statement": bool & false | true | *true
    
      // Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry.
      "pgaudit.log_statement_once"?: bool & false | true
    
      // Specifies the master role to use for object audit logging.
      "pgaudit.role"?: string & "rds_pgaudit"
    
      // It specifies whether to perform Recheck which is an internal process of full text search.
      "pg_bigm.enable_recheck"?: string & "on" | "off"
    
      // It specifies the maximum number of 2-grams of the search keyword to be used for full text search.
      "pg_bigm.gin_key_limit": int & >=0 & <=2147483647 | *0
    
      // It specifies the minimum threshold used by the similarity search.
      "pg_bigm.similarity_limit": float & >=0 & <=1 | *0.3
    
      // Logs results of hint parsing.
      "pg_hint_plan.debug_print"?: string & "off" | "on" | "detailed" | "verbose"
    
      // Force planner to use plans specified in the hint comment preceding to the query.
      "pg_hint_plan.enable_hint"?: bool & false | true
    
      // Force planner to not get hint by using table lookups.
      "pg_hint_plan.enable_hint_table"?: bool & false | true
    
      // Message level of debug messages.
      "pg_hint_plan.message_level"?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "log" | "info" | "notice" | "warning" | "error"
    
      // Message level of parse errors.
      "pg_hint_plan.parse_messages"?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "log" | "info" | "notice" | "warning" | "error"
    
      // Batch inserts if possible
      "pglogical.batch_inserts"?: bool & false | true
    
      // Sets log level used for logging resolved conflicts.
      "pglogical.conflict_log_level"?: string & "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "info" | "notice" | "warning" | "error" | "log" | "fatal" | "panic"
    
      // Sets method used for conflict resolution for resolvable conflicts.
      "pglogical.conflict_resolution"?: string & "error" | "apply_remote" | "keep_local" | "last_update_wins" | "first_update_wins"
    
      // connection options to add to all peer node connections
      "pglogical.extra_connection_options"?: string
    
      // pglogical specific synchronous commit value
      "pglogical.synchronous_commit"?: bool & false | true
    
      // Use SPI instead of low-level API for applying changes
      "pglogical.use_spi"?: bool & false | true
    
      // Starts the autoprewarm worker.
      "pg_prewarm.autoprewarm"?: bool & false | true
    
      // Sets the interval between dumps of shared buffers
      "pg_prewarm.autoprewarm_interval"?: int & >=0 & <=2147483
    
      // Sets if the result value is normalized or not.
      "pg_similarity.block_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Block similarity function.
      "pg_similarity.block_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Block similarity function.
      "pg_similarity.block_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.cosine_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Cosine similarity function.
      "pg_similarity.cosine_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Cosine similarity function.
      "pg_similarity.cosine_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.dice_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Dice similarity measure.
      "pg_similarity.dice_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Dice similarity measure.
      "pg_similarity.dice_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.euclidean_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Euclidean similarity measure.
      "pg_similarity.euclidean_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Euclidean similarity measure.
      "pg_similarity.euclidean_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.hamming_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Block similarity metric.
      "pg_similarity.hamming_threshold"?: float & >=0 & <=1
    
      // Sets if the result value is normalized or not.
      "pg_similarity.jaccard_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Jaccard similarity measure.
      "pg_similarity.jaccard_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Jaccard similarity measure.
      "pg_similarity.jaccard_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.jaro_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Jaro similarity measure.
      "pg_similarity.jaro_threshold"?: float & >=0 & <=1
    
      // Sets if the result value is normalized or not.
      "pg_similarity.jarowinkler_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Jarowinkler similarity measure.
      "pg_similarity.jarowinkler_threshold"?: float & >=0 & <=1
    
      // Sets if the result value is normalized or not.
      "pg_similarity.levenshtein_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Levenshtein similarity measure.
      "pg_similarity.levenshtein_threshold"?: float & >=0 & <=1
    
      // Sets if the result value is normalized or not.
      "pg_similarity.matching_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Matching Coefficient similarity measure.
      "pg_similarity.matching_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Matching Coefficient similarity measure.
      "pg_similarity.matching_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.mongeelkan_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Monge-Elkan similarity measure.
      "pg_similarity.mongeelkan_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Monge-Elkan similarity measure.
      "pg_similarity.mongeelkan_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets the gap penalty used by the Needleman-Wunsch similarity measure.
      "pg_similarity.nw_gap_penalty"?: float & >=-9.22337e+18 & <=9.22337e+18
    
      // Sets if the result value is normalized or not.
      "pg_similarity.nw_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Needleman-Wunsch similarity measure.
      "pg_similarity.nw_threshold"?: float & >=0 & <=1
    
      // Sets if the result value is normalized or not.
      "pg_similarity.overlap_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Overlap Coefficient similarity measure.
      "pg_similarity.overlap_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Overlap Coefficientsimilarity measure.
      "pg_similarity.overlap_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.qgram_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Q-Gram similarity measure.
      "pg_similarity.qgram_threshold"?: float & >=0 & <=1
    
      // Sets the tokenizer for Q-Gram measure.
      "pg_similarity.qgram_tokenizer"?: string & "alnum" | "gram" | "word" | "camelcase"
    
      // Sets if the result value is normalized or not.
      "pg_similarity.swg_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Smith-Waterman-Gotoh similarity measure.
      "pg_similarity.swg_threshold"?: float & >=0 & <=1
    
      // Sets if the result value is normalized or not.
      "pg_similarity.sw_is_normalized"?: bool & false | true
    
      // Sets the threshold used by the Smith-Waterman similarity measure.
      "pg_similarity.sw_threshold"?: float & >=0 & <=1
    
      // Sets the maximum number of statements tracked by pg_stat_statements.
      "pg_stat_statements.max"?: int & >=100 & <=2147483647
    
      // Save pg_stat_statements statistics across server shutdowns.
      "pg_stat_statements.save"?: bool & false | true
    
      // Selects which statements are tracked by pg_stat_statements.
      "pg_stat_statements.track"?: string & "none" | "top" | "all"
    
      // Selects whether planning duration is tracked by pg_stat_statements.
      "pg_stat_statements.track_planning"?: bool & false | true
    
      // Selects whether utility commands are tracked by pg_stat_statements.
      "pg_stat_statements.track_utility"?: bool & false | true
    
      // Sets the behavior for interacting with passcheck feature.
      "pgtle.enable_password_check"?: string & "on" | "off" | "require"
    
      // Number of workers to use for a physical transport.
      "pg_transport.num_workers"?: int & >=1 & <=32
    
      // Specifies whether to report timing information during transport.
      "pg_transport.timing"?: bool & false | true
    
      // (kB) Amount of memory each worker can allocate for a physical transport.
      "pg_transport.work_mem"?: int & >=65536 & <=2147483647 @storeResource(1KB)
    
      // Controls the planner selection of custom or generic plan.
      plan_cache_mode?: string & "auto" | "force_generic_plan" | "force_custom_plan"
    
      // Sets the TCP port the server listens on.
      port?: int & >=1 & <=65535
    
      // Enable for disable GDAL drivers used with PostGIS in Postgres 9.3.5 and above.
      "postgis.gdal_enabled_drivers"?: string & "ENABLE_ALL" | "DISABLE_ALL"
    
      // When generating SQL fragments, quote all identifiers.
      quote_all_identifiers?: bool & false | true
    
      // Sets the planners estimate of the cost of a nonsequentially fetched disk page.
      random_page_cost?: float & >=0 & <=1.79769
    
      // Lower threshold of Dice similarity. Molecules with similarity lower than threshold are not similar by # operation.
      "rdkit.dice_threshold"?: float & >=0 & <=1
    
      // Should stereochemistry be taken into account in substructure matching. If false, no stereochemistry information is used in substructure matches.
      "rdkit.do_chiral_sss"?: bool & false | true
    
      // Should enhanced stereochemistry be taken into account in substructure matching.
      "rdkit.do_enhanced_stereo_sss"?: bool & false | true
    
      // Lower threshold of Tanimoto similarity. Molecules with similarity lower than threshold are not similar by % operation.
      "rdkit.tanimoto_threshold"?: float & >=0 & <=1
    
      // Force authentication for connections with password stored locally
      "rds.accepted_password_auth_method"?: string & "md5+scram" | "scram"
    
      // RDS parameter to enable/disable adaptive autovacuum.
      "rds.adaptive_autovacuum": bool & false | true | *true
    
      // Comma-delimited list of extensions that may be installed.
      "rds.allowed_extensions"?: string
    
      // Allow DNS resolution in Customer VPC.
      "rds.custom_dns_resolution": bool & false | true | *false
    
      // See log messages for RDS admin user actions in customer databases.
      "rds.force_admin_logging_level"?: string & "disabled" | "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "info" | "notice" | "warning" | "error" | "log" | "fatal" | "panic"
    
      // See log messages related to autovacuum operations.
      "rds.force_autovacuum_logging_level"?: string & "disabled" | "debug5" | "debug4" | "debug3" | "debug2" | "debug1" | "info" | "notice" | "warning" | "error" | "log" | "fatal" | "panic"
    
      // Force SSL connections.
      "rds.force_ssl": bool & false | true | *false
    
      // Enables logical decoding.
      "rds.logical_replication": bool & false | true | *false
    
      // Amazon RDS will delete PostgreSQL log that are older than N minutes.
      "rds.log_retention_period": int & >=1440 & <=10080 | *4320
    
      // Sets the maximum size for tcp buffers.
      "rds.max_tcp_buffers": int & >=4096 & <=1000000000 | *33554432
    
      // Size of the stats ramdisk in MB. A nonzero value signals HM to set up the ramdisk.
      "rds.pg_stat_ramdisk_size": int & >=0 & <=8196 | *0
    
      // Sets the number of connection slots reserved for rds_superusers.
      "rds.rds_superuser_reserved_connections": int & >=0 & <=8388607 | *2
    
      // restricts password-related commands to members of rds_password
      "rds.restrict_password_commands"?: bool & false | true
    
      // When set to fsync, PostgreSQL will recursively open and synchronize all files in the data directory before crash recovery begins
      recovery_init_sync_method?: string & "fsync" | "syncfs"
    
      // When set to on, which is the default, PostgreSQL will automatically remove temporary files after a backend crash
      remove_temp_files_after_crash: float & >=0 & <=1 | *0
    
      // Reinitialize server after backend crash.
      restart_after_crash?: bool & false | true
    
      // Enable row security.
      row_security?: bool & false | true
    
      // Sets the schema search order for names that are not schema-qualified.
      search_path?: string
    
      // Sets the planners estimate of the cost of a sequentially fetched disk page.
      seq_page_cost?: float & >=0 & <=1.79769
    
      // Lists shared libraries to preload into each backend.
      session_preload_libraries?: string & "auto_explain" | "orafce" | "pg_bigm" | "pg_hint_plan" | "pg_prewarm" | "pg_similarity" | "pg_stat_statements" | "pg_transport" | "plprofiler"
    
      // Sets the sessions behavior for triggers and rewrite rules.
      session_replication_role?: string & "origin" | "replica" | "local"
    
      // (8kB) Sets the number of shared memory buffers used by the server.
      shared_buffers?: int & >=16 & <=1073741823 @storeResource(8KB)
    
      // Lists shared libraries to preload into server.
      shared_preload_libraries?: string & "auto_explain" | "orafce" | "pgaudit" | "pglogical" | "pg_bigm" | "pg_cron" | "pg_hint_plan" | "pg_prewarm" | "pg_similarity" | "pg_stat_statements" | "pg_tle" | "pg_transport" | "plprofiler"
    
      // Enables SSL connections.
      ssl: bool & false | true | *true
    
      // Location of the SSL server authority file.
      ssl_ca_file?: string
    
      // Location of the SSL server certificate file.
      ssl_cert_file?: string
    
      // Sets the list of allowed SSL ciphers.
      ssl_ciphers?: string
    
      // Location of the SSL server private key file
      ssl_key_file?: string
    
      // Sets the maximum SSL/TLS protocol version to use.
      ssl_max_protocol_version?: string & "TLSv1" | "TLSv1.1" | "TLSv1.2"
    
      // Sets the minimum SSL/TLS protocol version to use.
      ssl_min_protocol_version?: string & "TLSv1" | "TLSv1.1" | "TLSv1.2"
    
      // Causes ... strings to treat backslashes literally.
      standard_conforming_strings?: bool & false | true
    
      // (ms) Sets the maximum allowed duration of any statement.
      statement_timeout?: int & >=0 & <=2147483647 @timeDurationResource()
    
      // Writes temporary statistics files to the specified directory.
      stats_temp_directory?: string
    
      // Sets the number of connection slots reserved for superusers.
      superuser_reserved_connections: int & >=0 & <=8388607 | *3
    
      // Enable synchronized sequential scans.
      synchronize_seqscans?: bool & false | true
    
      // Sets the current transactions synchronization level.
      synchronous_commit?: string & "local" | "on" | "off"
    
      // Maximum number of TCP keepalive retransmits.
      tcp_keepalives_count?: int & >=0 & <=2147483647
    
      // (s) Time between issuing TCP keepalives.
      tcp_keepalives_idle?: int & >=0 & <=2147483647 @timeDurationResource(1s)
    
      // (s) Time between TCP keepalive retransmits.
      tcp_keepalives_interval?: int & >=0 & <=2147483647 @timeDurationResource(1s)
    
      // (8kB) Sets the maximum number of temporary buffers used by each session.
      temp_buffers?: int & >=100 & <=1073741823 @storeResource(8KB)
    
      // (kB) Limits the total size of all temporary files used by each process.
      temp_file_limit?: int & >=-1 & <=2147483647 @storeResource(8KB)
    
      // Sets the tablespace(s) to use for temporary tables and sort files.
      temp_tablespaces?: string
    
      // Sets the time zone for displaying and interpreting time stamps.
      timezone?: string
    
      // Collects information about executing commands.
      track_activities?: bool & false | true
    
      // Sets the size reserved for pg_stat_activity.current_query, in bytes.
      track_activity_query_size: int & >=100 & <=1048576 | *4096
    
      // Collects transaction commit time.
      track_commit_timestamp?: bool & false | true
    
      // Collects statistics on database activity.
      track_counts?: bool & false | true
    
      // Collects function-level statistics on database activity.
      track_functions?: string & "none" | "pl" | "all"
    
      // Collects timing statistics on database IO activity.
      track_io_timing: bool & false | true | *true
    
      // Enables timing of WAL I/O calls.
      track_wal_io_timing?: bool & false | true
    
      // Treats expr=NULL as expr IS NULL.
      transform_null_equals?: bool & false | true
    
      // Sets the directory where the Unix-domain socket will be created.
      unix_socket_directories?: string
    
      // Sets the owning group of the Unix-domain socket.
      unix_socket_group?: string
    
      // Sets the access permissions of the Unix-domain socket.
      unix_socket_permissions?: int & >=0 & <=511
    
      // Updates the process title to show the active SQL command.
      update_process_title: bool & false | true | *true
    
      // (ms) Vacuum cost delay in milliseconds.
      vacuum_cost_delay?: int & >=0 & <=100 @timeDurationResource()
    
      // Vacuum cost amount available before napping.
      vacuum_cost_limit?: int & >=1 & <=10000
    
      // Vacuum cost for a page dirtied by vacuum.
      vacuum_cost_page_dirty?: int & >=0 & <=10000
    
      // Vacuum cost for a page found in the buffer cache.
      vacuum_cost_page_hit?: int & >=0 & <=10000
    
      // Vacuum cost for a page not found in the buffer cache.
      vacuum_cost_page_miss: int & >=0 & <=10000 | *5
    
      // Number of transactions by which VACUUM and HOT cleanup should be deferred, if any.
      vacuum_defer_cleanup_age?: int & >=0 & <=1000000
    
      // Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before VACUUM takes extraordinary measures to avoid system-wide transaction ID wraparound failure
      vacuum_failsafe_age: int & >=0 & <=1200000000 | *1200000000
    
      // Minimum age at which VACUUM should freeze a table row.
      vacuum_freeze_min_age?: int & >=0 & <=1000000000
    
      // Age at which VACUUM should scan whole table to freeze tuples.
      vacuum_freeze_table_age?: int & >=0 & <=2000000000
    
      // Specifies the maximum age (in transactions) that a table's pg_class.relminmxid field can attain before VACUUM takes extraordinary measures to avoid system-wide multixact ID wraparound failure
      vacuum_multixact_failsafe_age: int & >=0 & <=1200000000 | *1200000000
    
      // Minimum age at which VACUUM should freeze a MultiXactId in a table row.
      vacuum_multixact_freeze_min_age?: int & >=0 & <=1000000000
    
      // Multixact age at which VACUUM should scan whole table to freeze tuples.
      vacuum_multixact_freeze_table_age?: int & >=0 & <=2000000000
    
      // (8kB) Sets the number of disk-page buffers in shared memory for WAL.
      wal_buffers?: int & >=-1 & <=262143 @storeResource(8KB)
    
      // Compresses full-page writes written in WAL file.
      wal_compression: bool & false | true | *true
    
      // (MB) Sets the size of WAL files held for standby servers.
      wal_keep_size: int & >=0 & <=2147483647 | *2048 @storeResource(1MB)
    
      // Sets whether a WAL receiver should create a temporary replication slot if no permanent slot is configured.
      wal_receiver_create_temp_slot: bool & false | true | *false
    
      // (s) Sets the maximum interval between WAL receiver status reports to the primary.
      wal_receiver_status_interval?: int & >=0 & <=2147483 @timeDurationResource(1s)
    
      // (ms) Sets the maximum wait time to receive data from the primary.
      wal_receiver_timeout: int & >=0 & <=3600000 | *30000 @timeDurationResource()
    
      // (ms) Sets the maximum time to wait for WAL replication.
      wal_sender_timeout: int & >=0 & <=3600000 | *30000 @timeDurationResource()
    
      // (kB) Size of new file to fsync instead of writing WAL.
      wal_skip_threshold?: int & >=0 & <=2147483647 @storeResource(1KB)
    
      // Selects the method used for forcing WAL updates to disk.
      wal_sync_method?: string & "fsync" | "fdatasync" | "open_sync" | "open_datasync"
    
      // (ms) WAL writer sleep time between WAL flushes.
      wal_writer_delay?: int & >=1 & <=10000 @timeDurationResource()
    
      // (8Kb) Amount of WAL written out by WAL writer triggering a flush.
      wal_writer_flush_after?: int & >=0 & <=2147483647 @storeResource(8KB)
    
      // (kB) Sets the maximum memory to be used for query workspaces.
      work_mem?: int & >=64 & <=2147483647 @storeResource(1KB)
    
      // Sets how binary values are to be encoded in XML.
      xmlbinary?: string & "base64" | "hex"
    
      // Sets whether XML data in implicit parsing and serialization operations is to be considered as documents or content fragments.
      xmloption?: string & "content" | "document"
  
      ...
    }
    
    configuration: #PGParameter & {
    }

  staticParameters:
    - autovacuum_freeze_max_age
    - autovacuum_max_workers
    - autovacuum_multixact_freeze_max_age
    - config_file
    - cron.database_name
    - cron.log_run
    - cron.log_statement
    - cron.max_running_jobs
    - cron.use_background_workers
    - data_directory
    - hba_file
    - huge_pages
    - ident_file
    - ignore_invalid_pages
    - listen_addresses
    - logging_collector
    - max_connections
    - max_files_per_process
    - max_locks_per_transaction
    - max_logical_replication_workers
    - max_pred_locks_per_transaction
    - max_prepared_transactions
    - max_replication_slots
    - max_wal_senders
    - max_worker_processes
    - min_dynamic_shared_memory
    - old_snapshot_threshold
    - pglogical.batch_inserts
    - pglogical.synchronous_commit
    - pglogical.use_spi
    - pg_prewarm.autoprewarm
    - pg_stat_statements.max
    - port
    - postgis.gdal_enabled_drivers
    - rds.custom_dns_resolution
    - rds.logical_replication
    - rds.pg_stat_ramdisk_size
    - rds.rds_superuser_reserved_connections
    - rds.restrict_password_commands
    - recovery_init_sync_method
    - session_preload_libraries
    - shared_buffers
    - shared_preload_libraries
    - superuser_reserved_connections
    - track_activity_query_size
    - track_commit_timestamp
    - unix_socket_directories
    - unix_socket_group
    - unix_socket_permissions
    - wal_buffers
    - wal_compression

## @section Metrics Parameters
metrics:
  ## @param metrics.image.registry PostgreSQL Prometheus Exporter image registry
  ## @param metrics.image.repository PostgreSQL Prometheus Exporter image repository
  ## @param metrics.image.tag PostgreSQL Prometheus Exporter image tag (immutable tags are recommended)
  ## @param metrics.image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param metrics.image.pullPolicy PostgreSQL Prometheus Exporter image pull policy
  ## @param metrics.image.pullSecrets Specify image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.11.1-debian-11-r49
    digest: ""
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: [ ]