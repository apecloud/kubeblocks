apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pulsar.name" . }}-scripts
  labels:
    {{- include "pulsar.labels" . | nindent 4 }}
data:
  init-proxy.sh: |-
    #!/bin/bash
    set -e
    while [ "$(curl -s -o /dev/null -w '%{http_code}' ${brokerSVC}:8080/status.html)"
        -ne "200" ]; do echo "pulsar cluster isn't initialized yet..."; sleep 3;
    done
  start-proxy.sh: |-
    #!/bin/bash
    set -e
    bin/apply-config-from-env.py conf/proxy.conf && echo 'OK' > status && exec bin/pulsar proxy
  init-broker.sh: |-
    #!/bin/bash
    set -e
    set -x
    echo "INFO: wait for zookeeper ready..."
    until bin/pulsar zookeeper-shell -server ${zookeeperServers} --run-once "ls /"; do
      sleep 3;
    done;
    idx=${KB_POD_NAME##*-}
    if [ $idx -ne 0 ]; then
      # if not the first pod, do it
      until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server ${zookeeperServers} get /admin/clusters/${clusterName}; do
        echo "INFO: wait for init the meta cluster..."
        sleep 3;
      done
      echo "INFO: cluster already initialized" && exit 0
    fi
    # if the pod is the first pod, do it
    if bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server ${zookeeperServers} get /admin/clusters/${clusterName}; then
      echo "INFO: cluster already initialized" && exit 0
    fi
    echo "INFO: init cluster metadata for cluster: ${clusterName}"
    bin/pulsar initialize-cluster-metadata \
    --cluster ${clusterName} \
    --zookeeper ${zookeeperServers} \
    --configuration-store ${zookeeperServers} \
    --web-service-url ${webServiceUrl}
    # --web-service-url-tls https://pulsar-mini-broker.pulsar.svc.cluster.local:8443/ \
    # --broker-service-url ${brokerServiceUrl} \
    # --broker-service-url-tls pulsar+ssl://pulsar-mini-broker.pulsar.svc.cluster.local:6651/

    (curl -sf -XPOST http://127.0.0.1:15020/quitquitquit || true) && exit 0
  init-broker-sysctl.sh: |-
    #!/bin/bash
    set -e
    sysctl -w net.ipv4.tcp_keepalive_time=1 &&\n\t\t\tsysctl -w net.ipv4.tcp_keepalive_intvl=11 &&\n\t\t\t sysctl -w net.ipv4.tcp_keepalive_probes=3
  start-broker.sh: |-
    #!/bin/bash
    set -e
    bin/apply-config-from-env.py conf/broker.conf && bin/apply-config-from-env.py
      conf/client.conf && echo 'OK' > status;exec bin/pulsar broker
  init-bookies.sh: |-
    #!/bin/bash
    set -e

    echo "waiting zookeeper ready..."
    zkDomain="${zkServers%%:*}"
    until nslookup $zkDomain; do
      sleep 3;
    done;
    echo "zk is ready, start to config bookkeeper..."
    bin/apply-config-from-env.py conf/bookkeeper.conf;
    if bin/bookkeeper shell whatisinstanceid; then
      echo "bookkeeper cluster already initialized";
    else
      echo "bookkeeper init new cluster."
      bin/bookkeeper shell initnewcluster;
    fi
    echo "verify bookkeeper cluster id"
    bin/apply-config-from-env.py conf/bookkeeper.conf;until bin/bookkeeper shell whatisinstanceid; do
      sleep 3;
    done; bin/bookkeeper shell bookieformat -nonInteractive -force -deleteCookie || true
  start-bookies.sh: |-
    #!/bin/bash
    set -e

    bin/apply-config-from-env.py conf/bookkeeper.conf;
    OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar bookie;
  start-zookeeper.sh: |-
    #!/bin/bash
    set -e

    bin/apply-config-from-env.py conf/zookeeper.conf;
    bin/generate-zookeeper-config.sh conf/zookeeper.conf; exec bin/pulsar zookeeper;
  check-bookies.sh: |-
    #!/bin/bash
    bin/apply-config-from-env.py conf/bookkeeper.conf
    until bin/bookkeeper shell whatisinstanceid; do
      sleep 3;
    done;
    sysctl -w net.ipv4.tcp_keepalive_time=1 && sysctl -w net.ipv4.tcp_keepalive_intvl=11 && sysctl -w net.ipv4.tcp_keepalive_probes=3
  start-bookies-recovery.sh: |-
    #!/bin/bash
    set -e
    bin/apply-config-from-env.py conf/bookkeeper.conf
    exec bin/bookkeeper autorecovery