apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pulsar.name" . }}-scripts
  labels:
    {{- include "pulsar.labels" . | nindent 4 }}
data:
  init-proxy.sh: |-
    #!/bin/sh
    while [ "$(curl -s -o /dev/null -w '%{http_code}' http://${brokerSVC}:80/status.html)" -ne "200" ]; do
      echo "pulsar cluster isn't initialized yet..."; sleep 1;
    done
  start-proxy.sh: |-
    #!/bin/sh
    bin/apply-config-from-env.py conf/proxy.conf && echo 'OK' > status && exec bin/pulsar proxy
  init-broker.sh: |-
    #!/bin/sh
    set -x
    echo "INFO: wait for zookeeper ready..."
    zkDomain="${zookeeperServers%%:*}"
    until zkURL=${zookeeperServers} python3 /kb-scripts/zookeeper.py get /; do
      sleep 1;
    done;
    idx=${KB_POD_NAME##*-}
    if [ $idx -ne 0 ]; then
      # if not the first pod, do it
      until zkURL=${zookeeperServers} python3 /kb-scripts/zookeeper.py get /admin/clusters/${clusterName}; do
        echo "INFO: wait for init the meta cluster..."
        sleep 1;
      done
      echo "INFO: cluster already initialized" && exit 0
    fi
    # if the pod is the first pod, do it
    if zkURL=${zookeeperServers} python3 /kb-scripts/zookeeper.py get /admin/clusters/${clusterName}; then
      echo "INFO: cluster already initialized" && exit 0
    fi
    echo "INFO: init cluster metadata for cluster: ${clusterName}"
    bin/pulsar initialize-cluster-metadata \
    --cluster ${clusterName} \
    --zookeeper ${zookeeperServers} \
    --configuration-store ${zookeeperServers} \
    --web-service-url ${webServiceUrl} \
    --broker-service-url ${brokerServiceUrl}

    (curl -sf -XPOST http://127.0.0.1:15020/quitquitquit || true) && exit 0
  init-broker-sysctl.sh: |-
    #!/bin/sh
    sysctl -w net.ipv4.tcp_keepalive_time=1 && sysctl -w net.ipv4.tcp_keepalive_intvl=11 && sysctl -w net.ipv4.tcp_keepalive_probes=3
  init-bookies.sh: |-
    #!/bin/bash
    echo "waiting zookeeper ready..."
    zkDomain="${zkServers%%:*}"
    until echo ruok | nc -q 1 ${zkDomain} 2181 | grep imok; do
      sleep 1;
    done;
    echo "zk is ready, start to config bookkeeper..."
    bin/apply-config-from-env.py conf/bookkeeper.conf;
    if bin/bookkeeper shell whatisinstanceid; then
      echo "bookkeeper cluster already initialized";
    else
      echo "bookkeeper init new cluster."
      bin/bookkeeper shell initnewcluster;
    fi
  prestop-bookies.sh: |-
    #!/bin/bash
    current_component_replicas=`cat /etc/annotations/component-replicas`
    idx=${KB_POD_NAME##*-}
    if [[ $idx -ge $current_component_replicas && $current_component_replicas -ne 0 ]]; then
       bin/bookkeeper shell bookieformat -nonInteractive -force -deleteCookie || true
    fi
  start-bookies.sh: |-
    #!/bin/bash
    set -x
    mkdir -p ${journalDirectories}/current && mkdir -p ${ledgerDirectories}/current
    journalRes=`ls -A ${journalDirectories}/current`
    ledgerRes=`ls -A ${ledgerDirectories}/current`
    if [[ -z $journalRes && -z $ledgerRes ]]; then
       host_ip_port="${KB_POD_FQDN}${cluster_domain}:3181"
       zNode="${zkLedgersRootPath}/cookies/${host_ip_port}"
       # if current dir are empty but bookieId exists in zookeeper, delete it
       if zkURL=${zkServers} python3 /kb-scripts/zookeeper.py get ${zNode}; then
         echo "Warning: exist redundant bookieID ${zNode}"
         zkURL=${zkServers} python3 /kb-scripts/zookeeper.py delete ${zNode};
       fi
    fi
    bin/apply-config-from-env.py conf/bookkeeper.conf;
    OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar bookie;
  start-zookeeper.sh: |-
    #!/bin/bash
    set -e

    bin/apply-config-from-env.py conf/zookeeper.conf;
    bin/generate-zookeeper-config.sh conf/zookeeper.conf; exec bin/pulsar zookeeper;
  check-bookies.sh: |-
    #!/bin/bash
    set -x
    bin/apply-config-from-env.py conf/bookkeeper.conf
    until bin/bookkeeper shell whatisinstanceid; do
      sleep 3;
    done;
    sysctl -w net.ipv4.tcp_keepalive_time=1 && sysctl -w net.ipv4.tcp_keepalive_intvl=11 && sysctl -w net.ipv4.tcp_keepalive_probes=3
  start-bookies-recovery.sh: |-
    #!/bin/sh
    bin/apply-config-from-env.py conf/bookkeeper.conf
    exec bin/bookkeeper autorecovery
  zookeeper.py: |-
    #!/usr/bin/python3
    from kazoo.client import KazooClient
    from kazoo.exceptions import NodeExistsError, NoNodeError
    import os
    import sys
    import logging
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                        datefmt='%a, %d %b %Y %H:%M:%S',)
    logger = logging.getLogger()

    class ZKClient(object):
        def __init__(self, zk_url):
            self.client = KazooClient(hosts=zk_url)
            self.client.start()

        def create_node(self, path, data=None):
            try:
                self.client.create(path, data.encode() if data else None)
                logger.info(f"Node {path} created successfully.")
            except NodeExistsError:
                self.stop_with_error(f"Node {path} already exists.")
            except Exception as e:
                self.stop_with_error(f"Failed to create node {path}: {e}")

        def get_node(self, path):
            try:
                data, _ = self.client.get(path)
                logger.info(f"Data at {path}: {data.decode()}")
            except NoNodeError:
                self.stop_with_error(f"Node {path} does not exist.")
            except Exception as e:
                self.stop_with_error(f"Failed to read node {path}: {e}")

        def update_node(self, path, data):
            try:
                self.client.set(path, data.encode())
                logger.info(f"Node {path} updated successfully.")
            except NoNodeError:
                self.stop_with_error(f"Node {path} does not exist.")
            except Exception as e:
                self.stop_with_error(f"Failed to update node {path}: {e}")

        def delete_node(self, path):
            try:
                self.client.delete(path)
                logger.info(f"Node {path} deleted successfully.")
            except NoNodeError:
                self.stop_with_error(f"Node {path} does not exist.")
            except Exception as e:
                self.stop_with_error(f"Failed to delete node {path}: {e}")

        def stop(self):
            self.client.stop()

        def stop_with_error(self,message):
            logger.error(message)
            self.client.stop()
            exit(1)


    if __name__ == '__main__':
        args = sys.argv[1:]
        if len(args) != 2:
            raise Exception("requires 2 arguments.")
        op = args[0]
        path = args[1]
        zk_url = os.environ.get('zkURL')
        zk_client = ZKClient(zk_url)
        if op == "delete":
            zk_client.delete_node(path)
        elif op == "create":
            zk_client.create_node(path)
        elif op == "get":
            zk_client.get_node(path)
        else:
            zk_client.stop_with_error(f"Unknown operation: {op}")
        zk_client.stop()