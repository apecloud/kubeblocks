apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: redis
  labels:
    {{- include "redis.labels" . | nindent 4 }}
spec:
  type: redis
  connectionCredential:
    username: ""
    password: ""
    endpoint: "$(SVC_FQDN):$(SVC_PORT_redis)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_redis)"
  componentDefs:
    - name: redis
      workloadType: Replication
      characterType: redis
      probes:
        roleProbe:
          failureThreshold: 2
          periodSeconds: 2
          timeoutSeconds: 1
      replicationSpec:
        switchPolicies:
          - type: MaximumAvailability
            switchStatements:
              demote:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
              promote:
                - replicaof no one
              follow:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
          - type: MaximumDataProtection
            switchStatements:
              demote:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
              promote:
                - replicaof no one
              follow:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
        switchCmdExecutorConfig:
          image: redis:7.0.5
          switchSteps:
          - role: NewPrimary
            command:
              - /bin/sh
              - -c
            args:
              - redis-cli -h $(KB_SWITCH_ROLE_ENDPOINT) -p 6379 $(KB_SWITCH_PROMOTE_STATEMENT)
          - role: Secondaries
            command:
              - /bin/sh
              - -c
            args:
              - redis-cli -h $(KB_SWITCH_ROLE_ENDPOINT) -p 6379 $(KB_SWITCH_FOLLOW_STATEMENT)
          - role: OldPrimary
            command:
              - /bin/sh
              - -c
            args:
              - redis-cli -h $(KB_SWITCH_ROLE_ENDPOINT) -p 6379 $(KB_SWITCH_DEMOTE_STATEMENT)
      service:
        ports:
          - name: redis
            port: 6379
            targetPort: redis
          - name: metrics
            port: 9121
            targetPort: metrics
      configSpecs:
        - name: redis-replication-config
          templateRef: redis7-config-template
          constraintRef: redis7-config-constraints
          namespace: {{ .Release.Namespace }}
          volumeName: redis-config
      scriptSpecs:
        - name: redis-scripts
          templateRef: redis-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      monitor:
        builtIn: false
        exporterConfig:
          scrapePort: 9121
          scrapePath: "/metrics"
      logConfigs:
        {{- range $name,$pattern := .Values.logConfigs }}
        - name: {{ $name }}
          filePathPattern: {{ $pattern }}
        {{- end }}
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: redis
            ports:
              - name: redis
                containerPort: 6379
            volumeMounts:
              - name: data
                mountPath: /data
              - name: redis-config
                mountPath: /etc/conf
              - name: scripts
                mountPath: /scripts
              - name: redis-conf
                mountPath: /etc/redis
            command: ["/scripts/redis-start.sh"]
            lifecycle:
              postStart:
                exec:
                  command: ["/scripts/setup.sh"]
          - name: redis-exporter
            image: oliver006/redis_exporter:latest
            imagePullPolicy: IfNotPresent
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
            ports:
              - name: metrics
                containerPort: 9121
            livenessProbe:
              httpGet:
                path: /
                port: metrics
            readinessProbe:
              httpGet:
                path: /
                port: metrics
      systemAccounts:
# Seems redis-cli has its own mechanism to parse input tokens and there is no elegent way
# to pass $(KB_ACCOUNT_STATEMENT) to redis-cli without causing parsing error.
# Instead, using a shell script to wrap redis-cli and pass $(KB_ACCOUNT_STATEMENT) to it will do.
        cmdExecutorConfig:
          image: docker.io/redis:7.0.5
          command:
          - sh
          - -c
          args:
          - "redis-cli -h $(KB_ACCOUNT_ENDPOINT) $(KB_ACCOUNT_STATEMENT)"
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allcommands allkeys
                update: ACL SETUSER $(USERNAME) ON \>$(PASSWD)
          - name: kbdataprotection
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allcommands allkeys
                update: ACL SETUSER $(USERNAME) ON \>$(PASSWD)
          - name: kbmonitoring
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allkeys +get
                update: ACL SETUSER $(USERNAME) ON \>$(PASSWD)
          - name: kbprobe
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allkeys +get
                update: ACL SETUSER $(USERNAME) ON \>$(PASSWD)
          - name: kbreplicator
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) +psync +replconf +ping
                update: ACL SETUSER $(USERNAME) ON \>$(PASSWD)
    - name: redis-sentinel
      workloadType: Stateful
      characterType: redis
      service:
        ports:
          - name: redis-sentinel
            targetPort: redis-sentinel
            port: 26379
      configSpecs:
        - name: redis-replication-config
          templateRef: redis7-config-template
          constraintRef: redis7-config-constraints
          namespace: {{ .Release.Namespace }}
          volumeName: redis-config
      scriptSpecs:
        - name: redis-scripts
          templateRef: redis-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 493
      volumeTypes:
        - name: data
          type: data
      podSpec:
        initContainers:
        - name: init-redis-sentinel
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/conf
            - name: sentinel-conf
              mountPath: /etc/sentinel
            - name: scripts
              mountPath: /scripts
          command: [ "/scripts/redis-sentinel-setup.sh" ]
        containers:
        - name: redis-sentinel
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 26379
              name: redis-sentinel
          volumeMounts:
            - name: data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/conf
            - name: sentinel-conf
              mountPath: /etc/sentinel
            - name: scripts
              mountPath: /scripts
          command:
            - /bin/bash
          args:
            - -c
            - |
              set -ex
              /scripts/redis-sentinel-start.sh
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /scripts/redis-sentinel-ping.sh 5
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /scripts/redis-sentinel-ping.sh 1
