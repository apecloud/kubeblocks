apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: zookeeper
  labels:
    {{- include "zookeeper.labels" . | nindent 4 }}
spec:
  type: zookeeper
  connectionCredential:
    username: ""
    password: ""
    endpoint: "$(SVC_FQDN)"
    port: "$(SVC_PORT_client)"
  componentDefs:
    - name: zookeeper
      workloadType: Stateful
      characterType: zookeeper
      statefulSpec:
        updateStrategy: BestEffortParallel
{{/*      monitor:*/}}
{{/*        builtIn: false*/}}
{{/*        exporterConfig:*/}}
{{/*          scrapePath: /metrics*/}}
{{/*          scrapePort: {{ .Values.metrics.service.port }}*/}}
      configSpecs:
        - name: zookeeper-config
          templateRef: zookeeper-config-template
          namespace: {{ .Release.Namespace }}
          volumeName: configs
          defaultMode: 0755
{{/*          keys:*/}}
{{/*            - zoo1.cfg*/}}
{{/*      scriptSpecs:*/}}
{{/*        - name: pulsar-scripts*/}}
{{/*          templateRef: {{ include "pulsar.name" . }}-scripts*/}}
{{/*          namespace: {{ .Release.Namespace }}*/}}
{{/*          volumeName: scripts*/}}
{{/*          defaultMode: 0555*/}}
      service:
        ports:
          - name: client
            port: 2181
            targetPort: client
      podSpec:
        securityContext:
          fsGroup: 0
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 10000
        containers:
          - name: zookeeper
            env:
              - name: K8S_REPLICAS
                value: "$(KB_REPLICA_COUNT)"
              - name: STANDALONE_ENABLE
                value: "false"
              - name: RE_CONFIG_ENABLE
                value: "true"
              - name: ZOO_4LW_COMMANDS_WHITELIST
                value: "srvr, mntr, ruok"
              - name: DEBUG_MODEL
                value: "true"
            ports:
              - name: client
                containerPort: {{ .Values.containerPorts.client }}
              - name: tcp-quorum
                containerPort: {{ .Values.containerPorts.quorum }}
              - name: tcp-election
                containerPort: {{ .Values.containerPorts.election }}
              - name: http
                containerPort: {{ .Values.containerPorts.http }}
            livenessProbe:
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              exec:
                command: [ '/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost {{ .Values.containerPorts.client }} | grep imok' ]
            readinessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              exec:
                command: [ '/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost {{ .Values.containerPorts.client }} | grep imok' ]
            resources:
              requests:
                cpu: 50m
                memory: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - ALL
              privileged: false
              runAsGroup: 0
              runAsNonRoot: true
              runAsUser: 10000
{{/*            terminationMessagePath: /dev/termination-log*/}}
{{/*            terminationMessagePolicy: File*/}}
            volumeMounts:
              - mountPath: /zookeeper/data
                name: data
              - mountPath: /zookeeper/log
                name: data-log
              - name: configs
                mountPath: /opt/zookeeper/conf/zoo.cfg
                subPath: zoo.cfg
{{/*          - name: metrics*/}}
{{/*            image: {{ .Values.images.metrics.repository }}:{{ .Values.images.metrics.tag }}*/}}
{{/*            imagePullPolicy: {{ default "IfNotPresent" .Values.images.metrics.pullPolicy }}*/}}
{{/*            securityContext:*/}}
{{/*              runAsNonRoot: false*/}}
{{/*              runAsUser: 0*/}}
{{/*            env:*/}}
{{/*              - name: JOB_NAME*/}}
{{/*                value: zookeeper*/}}
{{/*              - name: SERVICE_PORT*/}}
{{/*                value: "8000"*/}}
{{/*              - name: POD_NAME*/}}
{{/*                value: $(KB_POD_NAME)*/}}
{{/*              - name: POD_NAMESPACE*/}}
{{/*                value: $(KB_NAMESPACE)*/}}
{{/*              {{- if .Values.debugEnabled }}*/}}
{{/*              - name: LOG_LEVEL*/}}
{{/*                value: debug*/}}
{{/*              {{- else }}*/}}
{{/*              - name: LOG_LEVEL*/}}
{{/*                value: info*/}}
{{/*              {{- end }}*/}}
{{/*            command:*/}}
{{/*              - "/bin/agamo tto"*/}}
{{/*              - "--config=/opt/agamotto/agamotto-config.yaml"*/}}
{{/*              - "--feature-gates=-pkg.translator.prometheus.NormalizeName"*/}}
{{/*            ports:*/}}
{{/*              - name: http-metrics*/}}
{{/*                containerPort: {{ .Values.metrics.service.port }}*/}}
{{/*            volumeMounts:*/}}
{{/*              - name: agamotto-configuration*/}}
{{/*                mountPath: /opt/agamotto*/}}