# Build the kubeblocks debug binaries
# includes kbcli, kubectl, and manager tools.
FROM --platform=${BUILDPLATFORM} golang:1.19 as builder

## docker buildx buid injected build-args:
#BUILDPLATFORM — matches the current machine. (e.g. linux/amd64)
#BUILDOS — os component of BUILDPLATFORM, e.g. linux
#BUILDARCH — e.g. amd64, arm64, riscv64
#BUILDVARIANT — used to set ARM variant, e.g. v7
#TARGETPLATFORM — The value set with --platform flag on build
#TARGETOS - OS component from --platform, e.g. linux
#TARGETARCH - Architecture from --platform, e.g. arm64
#TARGETVARIANT

ARG TARGETOS
ARG TARGETARCH

ARG GOPROXY=https://goproxy.cn
ARG LD_FLAGS="-s -w"

ENV GONOPROXY=github.com/apecloud
ENV GONOSUMDB=github.com/apecloud
ENV GOPRIVATE=github.com/apecloud
ENV GOPROXY=${GOPROXY}

WORKDIR /workspace

# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
# RUN go mod download

# Copy the go source
COPY internal/ internal/
COPY controllers/ controllers/
COPY cmd/reloader/ cmd/reloader/
COPY cmd/probe/ cmd/probe/
COPY externalapis/ externalapis/
COPY version/ version/
COPY cmd/cli/ cmd/cli/
COPY apis/ apis/

# Download binaries
RUN curl -fsSL https://dl.k8s.io/v1.25.7/kubernetes-client-${TARGETOS}-${TARGETARCH}.tar.gz | tar -zxv
RUN curl -L https://get.helm.sh/helm-v3.11.1-${TARGETOS}-${TARGETARCH}.tar.gz -o helm.tar.gz && \
    tar xvf helm.tar.gz && \
    mv ./${TARGETOS}-${TARGETARCH}/helm ./helm

# Build
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o reloader cmd/reloader/main.go
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o killer cmd/reloader/container_killer/killer.go
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o probe cmd/probe/main.go
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o kbcli cmd/cli/main.go

# curl binary layer
FROM --platform=${TARGETPLATFORM} tarampampam/curl:7.85.0 as binary-downloader

# Use alpine
FROM docker.io/alpine:3.17

COPY --from=binary-downloader /bin/curl /bin
COPY --from=builder /workspace/kubernetes/client/bin/kubectl /bin
COPY --from=builder /workspace/helm /bin
COPY config/probe config/probe
COPY --from=builder /workspace/probe /bin
COPY --from=builder /workspace/reloader /bin
COPY --from=builder /workspace/killer /bin
COPY --from=builder /workspace/kbcli /bin

WORKDIR /
RUN mkdir /.kbcli && chown -R 65532:65532 /.kbcli
USER 65532:65532
