# Build the kubeblocks tools binaries
# includes kbcli, kubectl, and manager tools.

## docker buildx build injected build-args:
#BUILDPLATFORM — matches the current machine. (e.g. linux/amd64)
#BUILDOS — os component of BUILDPLATFORM, e.g. linux
#BUILDARCH — e.g. amd64, arm64, riscv64
#BUILDVARIANT — used to set build ARM variant, e.g. v7
#TARGETPLATFORM — The value set with --platform flag on build
#TARGETOS - OS component from --platform, e.g. linux
#TARGETARCH - Architecture from --platform, e.g. arm64
#TARGETVARIANT - used to set target ARM variant, e.g. v7

ARG GO_VERSION=1.21-alpine

FROM --platform=${BUILDPLATFORM} golang:${GO_VERSION} as builder
ARG TARGETOS
ARG TARGETARCH
ARG GOPROXY
#ARG GOPROXY=https://goproxy.cn
ARG LD_FLAGS="-s -w"

ENV GONOPROXY=github.com/apecloud
ENV GONOSUMDB=github.com/apecloud
ENV GOPRIVATE=github.com/apecloud
ENV GOPROXY=${GOPROXY}

WORKDIR /src

# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
# RUN go mod download

# Copy the go source
#COPY pkg/ pkg/
#COPY controllers/ controllers/
#COPY cmd/reloader/ cmd/reloader/
#COPY cmd/lorry/ cmd/lorry/
#COPY externalapis/ externalapis/
#COPY version/ version/
#COPY cmd/cli/ cmd/cli/
#COPY apis/ apis/
#COPY test/testdata/testdata.go test/testdata/testdata.go
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download

# Build
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    go env && \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o /out/helm_hook cmd/helmhook/main.go

# Build
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    go env && \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o /out/killer cmd/reloader/container_killer/killer.go

RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o /out/reloader cmd/reloader/main.go

RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o /out/config_render cmd/reloader/template/*.go

RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o /out/lorry cmd/lorry/main.go

RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -ldflags="${LD_FLAGS}" -a -o /out/lorryctl cmd/lorry/ctl/main.go


RUN GRPC_HEALTH_PROBE_VERSION=v0.4.13  GOOS=${TARGETOS} GOARCH=${TARGETARCH} &&  \
    wget -qO/bin/grpc_health_probe https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/${GRPC_HEALTH_PROBE_VERSION}/grpc_health_probe-${GOOS}-${GOARCH}


# Use alpine with tag 20230329 is corresponding to "edge" tag (latest release to date is 3.18) as of 20230625
FROM docker.io/alpine:3.19.1 as dist
ARG APK_MIRROR

# install tools via apk
ENV APK_MIRROR=${APK_MIRROR}
RUN if [ -n "${APK_MIRROR}" ]; then sed -i "s/dl-cdn.alpinelinux.org/${APK_MIRROR}/g" /etc/apk/repositories; fi
RUN apk add --no-cache curl kubectl helm jq --allow-untrusted \
    && rm -rf /var/cache/apk/*

# copy kubeblocks tools
COPY config/lorry config/lorry
COPY config/crd/bases /kubeblocks/crd
COPY --from=builder /out/killer /bin
COPY --from=builder /out/reloader /bin
COPY --from=builder /out/config_render /bin
COPY --from=builder /out/lorry /bin
COPY --from=builder /out/lorryctl /bin
COPY --from=builder /bin/grpc_health_probe /bin
COPY --from=builder /out/helm_hook /bin

# make breaking change compatible
RUN ln -s /bin/lorry /bin/probe
RUN ln -s /config/lorry /config/probe

# enable grpc_health_probe binary
RUN chmod +x /bin/grpc_health_probe

# mkdir kbcli config dir and helm cache dir.
RUN mkdir /.cache && chown -R 65532:65532 /.cache
USER 65532:65532

