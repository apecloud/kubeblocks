apiVersion: dbaas.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: mongodb-cluster-definition
spec:
  type: mongodb
  components:
    - typeName: mongos
      defaultReplicas: 1
      componentType: Stateless
      service:
        ports:
          - protocol: TCP
            port: 27017
      podSpec:
        containers:
          - name: mongos
            ports:
              - protocol: TCP
                name: mongos
                containerPort: 27017
            command:
              - bin/sh
              - -c
              - |
                PORT=27018 
                CONFIG_SVR_NAME=$KB_CLUSTER_NAME"-configsvr"
                DOMAIN=$CONFIG_SVR_NAME"-headless."$KB_NAMESPACE".svc.cluster.local"
                mongos --bind_ip_all --configdb $CONFIG_SVR_NAME/$CONFIG_SVR_NAME"-0."$DOMAIN:$PORT,$CONFIG_SVR_NAME"-1."$DOMAIN:$PORT,$CONFIG_SVR_NAME"-2."$DOMAIN:$PORT
    - typeName: configsvr
      defaultReplicas: 3
      characterType: mongodb
      componentType: Consensus
      consensusSpec:
        leader:
          name: "primary"
          accessMode: ReadWrite
        followers:
          - name: "secondary"
            accessMode: ReadWrite
        updateStrategy: Serial
      probes:
        roleChangedProbe:
          periodSeconds: 2
      service:
        ports:
          - protocol: TCP
            port: 27018
      podSpec:
        containers:
          - name: configsvr
            ports:
              - name: configsvr
                protocol: TCP
                containerPort: 27018
            command:
              - bin/sh
              - -c
              - |
                RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
                RPL_SET_NAME=${RPL_SET_NAME%-};
                mongod --configsvr --bind_ip_all --replSet $RPL_SET_NAME
            lifecycle:
              postStart:
                exec:
                  command:
                    - bin/sh
                    - -c
                    - |
                      INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+");
                      INDEX=${INDEX#-};
                      if [ $INDEX -ne 0 ]; then exit 0; fi
                      
                      PORT=27018
                      until mongosh --port $PORT --eval "print('ready')"; do sleep 1; done
                      
                      RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
                      RPL_SET_NAME=${RPL_SET_NAME%-};
                      
                      MEMBERS=""
                      i=0
                      while [ $i -lt $KB_CONFIGSVR_N ]; do
                        if [ $i -ne 0 ]; then MEMBERS="$MEMBERS,"; fi
                        host=$(eval echo \$KB_CONFIGSVR_"$i"_HOSTNAME)
                        host=$host"."$KB_NAMESPACE".svc.cluster.local"
                        until mongosh --port $PORT --host $host --eval "print('peer is ready')"; do sleep 1; done
                        MEMBERS="$MEMBERS{_id: $i, host: \"$host:$PORT\"}"
                        i=$(( i + 1))
                      done
                      mongosh --port $PORT --eval "rs.initiate({_id: \"$RPL_SET_NAME\", configsvr: true, members: [$MEMBERS]})"
    - typeName: shard
      defaultReplicas: 3
      characterType: mongodb
      componentType: Consensus
      consensusSpec:
        leader:
          name: "primary"
          accessMode: ReadWrite
        followers:
          - name: "secondary"
            accessMode: ReadWrite
        updateStrategy: BestEffortParallel
      probes:
        roleChangedProbe:
          periodSeconds: 2
      service:
        ports:
          - protocol: TCP
            port: 27018
      podSpec:
        containers:
          - name: shard
            ports:
              - name: shard
                protocol: TCP
                containerPort: 27018
            command:
              - bin/sh
              - -c
              - |
                RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
                RPL_SET_NAME=${RPL_SET_NAME%-};
                mongod --shardsvr --bind_ip_all --replSet $RPL_SET_NAME
            lifecycle:
              postStart:
                exec:
                  command:
                    - bin/sh
                    - -c
                    - |
                      INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+");
                      INDEX=${INDEX#-};
                      if [ $INDEX -ne 0 ]; then exit 0; fi

                      PORT=27018
                      until mongosh --port $PORT --eval "print('ready')"; do sleep 1; done

                      RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
                      RPL_SET_NAME=${RPL_SET_NAME%-};

                      MEMBERS=""
                      i=0
                      while [ $i -lt $KB_SHARD_N ]; do
                        if [ $i -ne 0 ]; then MEMBERS="$MEMBERS,"; fi
                        host=$(eval echo \$KB_SHARD_"$i"_HOSTNAME)
                        host=$host"."$KB_NAMESPACE".svc.cluster.local"
                        until mongosh --port $PORT --host $host --eval "print('peer is ready')"; do sleep 1; done
                        MEMBERS="$MEMBERS{_id: $i, host: \"$host:$PORT\"}"
                        i=$(( i + 1))
                      done
                      mongosh --port $PORT --eval "rs.initiate({_id: \"$RPL_SET_NAME\", members: [$MEMBERS]})"
          - name: agent
            command:
              - bin/sh
              - -c
              - |
                INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+");
                INDEX=${INDEX#-};
                if [ $INDEX -ne 0 ]; then
                  trap : TERM INT; (while true; do sleep 1000; done) & wait
                fi

                # wait main container ready
                PORT=27018
                until mongosh --port $PORT --eval "rs.status().ok"; do sleep 1; done
                # add shard to mongos
                SHARD_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
                SHARD_NAME=${SHARD_NAME%-};
                DOMAIN=$SHARD_NAME"-headless."$KB_NAMESPACE".svc.cluster.local"
                MONGOS_HOST=$KB_CLUSTER_NAME"-mongos"
                MONGOS_PORT=27017
                SHARD_CONFIG=$SHARD_NAME/$SHARD_NAME"-0."$DOMAIN:$PORT,$SHARD_NAME"-1."$DOMAIN:$PORT,$SHARD_NAME"-2."$DOMAIN:$PORT
                until mongosh --host $MONGOS_HOST --port $MONGOS_PORT --eval "print('service is ready')"; do sleep 1; done
                mongosh --host $MONGOS_HOST --port $MONGOS_PORT --eval "sh.addShard(\"$SHARD_CONFIG\")"
                
                trap : TERM INT; (while true; do sleep 1000; done) & wait