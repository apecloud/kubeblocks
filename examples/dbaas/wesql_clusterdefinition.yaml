apiVersion: dbaas.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: apecloud-wesql2
spec:
  type: state.mysql-8
  components:
    - typeName: wesql
      characterType: mysql
      componentType: Consensus
      consensusSpec:
        leader:
          name: "leader"
          accessMode: ReadWrite
        followers:
          - name: "follower"
            accessMode: Readonly
        updateStrategy: BestEffortParallel
      probes:
        roleChangedProbe:
          periodSeconds: 2
      service:
        ports:
          - protocol: TCP
            port: 3306
      defaultReplicas: 3
      podSpec:
        containers:
          - name: mysql
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 3306
                protocol: TCP
                name: mysql
              - containerPort: 13306
                protocol: TCP
                name: paxos
            env:
              - name: MYSQL_ROOT_HOST
                value: '%'
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "yes"
              - name: MYSQL_DATABASE
                value: mydb
              - name: MYSQL_USER
                value: u1
              - name: MYSQL_PASSWORD
                value: u1
              - name: CLUSTER_ID
                value: "1"
              - name: CLUSTER_START_INDEX
                value: "1"
              - name: REPLICATIONUSER
                value: replicator
              - name: REPLICATION_PASSWORD
              - name: MYSQL_TEMPLATE_CONFIG
              - name: MYSQL_CUSTOM_CONFIG
              - name: MYSQL_DYNAMIC_CONFIG
            command: [ "/bin/bash", "-c" ]
            args:
              - >
                cluster_info="";
                for (( i=0; i<$KB_REPLICASETS_N; i++ )); do
                  if [ $i -ne 0 ]; then
                    cluster_info="$cluster_info;";
                  fi;
                  host=$(eval echo \$KB_REPLICASETS_"$i"_HOSTNAME)
                  cluster_info="$cluster_info$host:13306";
                done;
                idx=0;
                while IFS='-' read -ra ADDR; do
                  for i in "${ADDR[@]}"; do
                    idx=$i;
                  done;
                done <<< "$KB_POD_NAME";
                echo $idx;
                cluster_info="$cluster_info@$(($idx+1))";
                echo $cluster_info;
                docker-entrypoint.sh mysqld --cluster-start-index=1 --cluster-info="$cluster_info" --cluster-id=1
      systemAccounts:
        cmdExecutorConfig:
          image: docker.io/mysql:8.0.30
          command: 
          - mysql
          args:
          - -h$(KB_ACCOUNT_ENDPOINT) 
          - -u$(MYSQL_USER) 
          - -p$(MYSQL_PASSWORD)        
          - -e $(KB_ACCOUNT_STATEMENT)
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: username
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: password   
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
        - name: kbadmin
          provisionPolicy:
            type: CreateByStmt
            scope: AnyPods
            statements:
              creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY "$(PASSWD)"; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
              deletion: DROP USER IF EXISTS $(USERNAME);
        - name: kbdataprotection
          provisionPolicy:
            type: CreateByStmt
            scope: AnyPods
            statements:
              creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY "$(PASSWD)";GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO $(USERNAME); GRANT LOCK TABLES,RELOAD,PROCESS,REPLICATION CLIENT, SUPER,SELECT,EVENT,TRIGGER,SHOW VIEW ON *.* TO $(USERNAME);
              deletion: DROP USER IF EXISTS $(USERNAME);
        - name: kbmonitoring
          provisionPolicy:
            type: CreateByStmt
            scope: AnyPods
            statements:        
              creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY "$(PASSWD)"; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
              deletion: DROP USER IF EXISTS $(USERNAME);
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
