apiVersion: troubleshoot.sh/v1beta2
kind: Preflight
metadata:
  name: kubeblocks_preflight
spec:
  collectors:
    - clusterInfo: {}
  analyzers:
    - clusterVersion:
        checkName: EKS-Version
        outcomes:
          - fail:
              when: "< 1.22.0"
              message: This application requires at least Kubernetes 1.22.0 or later
              uri: https://www.kubernetes.io
          - pass:
              when: ">= 1.22.0"
              message: Your cluster meets the recommended and required versions（>= 1.22.0） of Kubernetes
              uri: https://www.kubernetes.io
    - nodeResources:
        checkName: At-Least-3-Nodes
        outcomes:
          - warn:
              when: "count() < 3"
              message: This application requires at least 3 nodes
          - pass:
              message: This cluster has enough nodes.
    - deploymentStatus:
        checkName: AWS-Load-Balancer-Check
        name: aws-load-balancer-controller
        namespace: kube-system
        outcomes:
          - warn:
              when: "absent" # note that the "absent" failure state must be listed first if used.
              message: The aws-load-balancer-controller deployment is not present
          - warn:
              when: "< 1"
              message: The aws-load-balancer-controller deployment does not have any ready replicas
          - warn:
              when: "= 1"
              message: The aws-load-balancer-controller deployment has only a single ready replica
          - pass:
              message: There are multiple replicas of the aws-load-balancer-controller deployment ready
  extendAnalyzers:
    - clusterAccess:
        checkName: Check-K8S-Access
        outcomes:
          - fail:
              message: K8s cluster access fail
          - pass:
              message: K8s cluster access ok
    - taint:
        checkName: Required-Taint-Match
        outcomes:
          - fail:
              message: All nodes had taints that the pod didn't tolerate
          - pass:
              message: The taint matching succeeded
    - storageClass:
        checkName: Required-Default-SC
        outcomes:
          - warn:
              message: The default storage class was not found. To learn more details, please check https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/storage-classes.html; Alternatively use option --set storageClass=<storageClassName> when creating cluster
          - pass:
              message: Default storage class is the presence, and all good on storage classes