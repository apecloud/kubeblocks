/*
Copyright ApeCloud, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/internal/configuration/proto (interfaces: ReconfigureClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	proto "github.com/apecloud/kubeblocks/internal/configuration/proto"
)

// MockReconfigureClient is a mock of ReconfigureClient interface.
type MockReconfigureClient struct {
	ctrl     *gomock.Controller
	recorder *MockReconfigureClientMockRecorder
}

// MockReconfigureClientMockRecorder is the mock recorder for MockReconfigureClient.
type MockReconfigureClientMockRecorder struct {
	mock *MockReconfigureClient
}

// NewMockReconfigureClient creates a new mock instance.
func NewMockReconfigureClient(ctrl *gomock.Controller) *MockReconfigureClient {
	mock := &MockReconfigureClient{ctrl: ctrl}
	mock.recorder = &MockReconfigureClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconfigureClient) EXPECT() *MockReconfigureClientMockRecorder {
	return m.recorder
}

// OnlineUpgradeParams mocks base method.
func (m *MockReconfigureClient) OnlineUpgradeParams(arg0 context.Context, arg1 *proto.OnlineUpgradeParamsRequest, arg2 ...grpc.CallOption) (*proto.OnlineUpgradeParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnlineUpgradeParams", varargs...)
	ret0, _ := ret[0].(*proto.OnlineUpgradeParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnlineUpgradeParams indicates an expected call of OnlineUpgradeParams.
func (mr *MockReconfigureClientMockRecorder) OnlineUpgradeParams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlineUpgradeParams", reflect.TypeOf((*MockReconfigureClient)(nil).OnlineUpgradeParams), varargs...)
}

// StopContainer mocks base method.
func (m *MockReconfigureClient) StopContainer(arg0 context.Context, arg1 *proto.StopContainerRequest, arg2 ...grpc.CallOption) (*proto.StopContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContainer", varargs...)
	ret0, _ := ret[0].(*proto.StopContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockReconfigureClientMockRecorder) StopContainer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockReconfigureClient)(nil).StopContainer), varargs...)
}
