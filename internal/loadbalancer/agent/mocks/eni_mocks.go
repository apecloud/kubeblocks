/*
Copyright 2022 The KubeBlocks Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// /*
// Copyright 2022 The Kubeblocks Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/internal/loadbalancer/agent (interfaces: ENIManager)

// Package mock_agent is a generated GoMock package.
package mock_agent

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	cloud "github.com/apecloud/kubeblocks/internal/loadbalancer/cloud"
)

// MockENIManager is a mock of ENIManager interface.
type MockENIManager struct {
	ctrl     *gomock.Controller
	recorder *MockENIManagerMockRecorder
}

// MockENIManagerMockRecorder is the mock recorder for MockENIManager.
type MockENIManagerMockRecorder struct {
	mock *MockENIManager
}

// NewMockENIManager creates a new mock instance.
func NewMockENIManager(ctrl *gomock.Controller) *MockENIManager {
	mock := &MockENIManager{ctrl: ctrl}
	mock.recorder = &MockENIManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockENIManager) EXPECT() *MockENIManagerMockRecorder {
	return m.recorder
}

// ChooseBusiestENI mocks base method.
func (m *MockENIManager) ChooseBusiestENI() (*cloud.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseENI")
	ret0, _ := ret[0].(*cloud.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseBusiestENI indicates an expected call of ChooseBusiestENI.
func (mr *MockENIManagerMockRecorder) ChooseBusiestENI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseENI", reflect.TypeOf((*MockENIManager)(nil).ChooseBusiestENI))
}

// GetManagedENIs mocks base method.
func (m *MockENIManager) GetManagedENIs() ([]*cloud.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedENIs")
	ret0, _ := ret[0].([]*cloud.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedENIs indicates an expected call of GetManagedENIs.
func (mr *MockENIManagerMockRecorder) GetManagedENIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedENIs", reflect.TypeOf((*MockENIManager)(nil).GetManagedENIs))
}
