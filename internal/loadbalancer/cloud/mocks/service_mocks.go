// /*
// Copyright 2022 The Kubeblocks Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/internal/loadbalancer/cloud (interfaces: Service)

// Package mock_cloud is a generated GoMock package.
package mock_cloud

import (
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"

	cloud "github.com/apecloud/kubeblocks/internal/loadbalancer/cloud"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AllocENI mocks base method.
func (m *MockService) AllocENI() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocENI")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocENI indicates an expected call of AllocENI.
func (mr *MockServiceMockRecorder) AllocENI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocENI", reflect.TypeOf((*MockService)(nil).AllocENI))
}

// AllocIPAddresses mocks base method.
func (m *MockService) AllocIPAddresses(arg0 string) (*ec2.AssignPrivateIpAddressesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocIPAddresses", arg0)
	ret0, _ := ret[0].(*ec2.AssignPrivateIpAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocIPAddresses indicates an expected call of AllocIPAddresses.
func (mr *MockServiceMockRecorder) AllocIPAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocIPAddresses", reflect.TypeOf((*MockService)(nil).AllocIPAddresses), arg0)
}

// AssignPrivateIpAddresses mocks base method.
func (m *MockService) AssignPrivateIpAddresses(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPrivateIpAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPrivateIpAddresses indicates an expected call of AssignPrivateIpAddresses.
func (mr *MockServiceMockRecorder) AssignPrivateIpAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPrivateIpAddresses", reflect.TypeOf((*MockService)(nil).AssignPrivateIpAddresses), arg0, arg1)
}

// DeallocIPAddresses mocks base method.
func (m *MockService) DeallocIPAddresses(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocIPAddresses", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocIPAddresses indicates an expected call of DeallocIPAddresses.
func (mr *MockServiceMockRecorder) DeallocIPAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocIPAddresses", reflect.TypeOf((*MockService)(nil).DeallocIPAddresses), arg0, arg1)
}

// DescribeAllENIs mocks base method.
func (m *MockService) DescribeAllENIs() (map[string]*cloud.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAllENIs")
	ret0, _ := ret[0].(map[string]*cloud.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAllENIs indicates an expected call of DescribeAllENIs.
func (mr *MockServiceMockRecorder) DescribeAllENIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAllENIs", reflect.TypeOf((*MockService)(nil).DescribeAllENIs))
}

// FreeENI mocks base method.
func (m *MockService) FreeENI(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeENI", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeENI indicates an expected call of FreeENI.
func (mr *MockServiceMockRecorder) FreeENI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeENI", reflect.TypeOf((*MockService)(nil).FreeENI), arg0)
}

// GetENIIPv4Limit mocks base method.
func (m *MockService) GetENIIPv4Limit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENIIPv4Limit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetENIIPv4Limit indicates an expected call of GetENIIPv4Limit.
func (mr *MockServiceMockRecorder) GetENIIPv4Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENIIPv4Limit", reflect.TypeOf((*MockService)(nil).GetENIIPv4Limit))
}

// GetENILimit mocks base method.
func (m *MockService) GetENILimit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetENILimit")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetENILimit indicates an expected call of GetENILimit.
func (mr *MockServiceMockRecorder) GetENILimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetENILimit", reflect.TypeOf((*MockService)(nil).GetENILimit))
}

// ModifySourceDestCheck mocks base method.
func (m *MockService) ModifySourceDestCheck(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySourceDestCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifySourceDestCheck indicates an expected call of ModifySourceDestCheck.
func (mr *MockServiceMockRecorder) ModifySourceDestCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySourceDestCheck", reflect.TypeOf((*MockService)(nil).ModifySourceDestCheck), arg0, arg1)
}

// WaitForENIAndIPsAttached mocks base method.
func (m *MockService) WaitForENIAndIPsAttached(arg0 string) (cloud.ENIMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForENIAndIPsAttached", arg0)
	ret0, _ := ret[0].(cloud.ENIMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForENIAndIPsAttached indicates an expected call of WaitForENIAndIPsAttached.
func (mr *MockServiceMockRecorder) WaitForENIAndIPsAttached(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForENIAndIPsAttached", reflect.TypeOf((*MockService)(nil).WaitForENIAndIPsAttached), arg0)
}
