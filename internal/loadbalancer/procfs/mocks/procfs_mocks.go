/*
Copyright ApeCloud, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/internal/loadbalancer/procfs (interfaces: ProcFS)

// Package mock_procfs is a generated GoMock package.
package mock_procfs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProcFS is a mock of ProcFS interface.
type MockProcFS struct {
	ctrl     *gomock.Controller
	recorder *MockProcFSMockRecorder
}

// MockProcFSMockRecorder is the mock recorder for MockProcFS.
type MockProcFSMockRecorder struct {
	mock *MockProcFS
}

// NewMockProcFS creates a new mock instance.
func NewMockProcFS(ctrl *gomock.Controller) *MockProcFS {
	mock := &MockProcFS{ctrl: ctrl}
	mock.recorder = &MockProcFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcFS) EXPECT() *MockProcFSMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProcFS) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProcFSMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProcFS)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockProcFS) Set(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockProcFSMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockProcFS)(nil).Set), arg0, arg1)
}
