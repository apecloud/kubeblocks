// /*
// Copyright 2022 The Kubeblocks Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/internal/loadbalancer/protocol (interfaces: NodeCache)

// Package mock_protocol is a generated GoMock package.
package mock_protocol

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	protocol "github.com/apecloud/kubeblocks/internal/loadbalancer/protocol"
)

// MockNodeCache is a mock of NodeCache interface.
type MockNodeCache struct {
	ctrl     *gomock.Controller
	recorder *MockNodeCacheMockRecorder
}

// MockNodeCacheMockRecorder is the mock recorder for MockNodeCache.
type MockNodeCacheMockRecorder struct {
	mock *MockNodeCache
}

// NewMockNodeCache creates a new mock instance.
func NewMockNodeCache(ctrl *gomock.Controller) *MockNodeCache {
	mock := &MockNodeCache{ctrl: ctrl}
	mock.recorder = &MockNodeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeCache) EXPECT() *MockNodeCacheMockRecorder {
	return m.recorder
}

// GetNode mocks base method.
func (m *MockNodeCache) GetNode(arg0 string) (protocol.NodeClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0)
	ret0, _ := ret[0].(protocol.NodeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeCacheMockRecorder) GetNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeCache)(nil).GetNode), arg0)
}
