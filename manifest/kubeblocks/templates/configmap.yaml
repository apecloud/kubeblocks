---
# Source: kubeblocks/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeblocks-manager-config
  labels:
    helm.sh/chart: kubeblocks-0.6.0-beta.21
    app.kubernetes.io/name: kubeblocks
    app.kubernetes.io/instance: kubeblocks
    app.kubernetes.io/version: "0.6.0-beta.21"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    # the global pvc name which persistent volume claim to store the backup data.
    # will replace the pvc name when it is empty in the backup policy.
    BACKUP_PVC_NAME: ""

    # the init capacity of pvc for creating the pvc, e.g. 10Gi.
    # will replace the init capacity when it is empty in the backup policy.
    BACKUP_PVC_INIT_CAPACITY: ""

    # the pvc storage class name.
    # will replace the storageClassName when it is nil in the backup policy.
    BACKUP_PVC_STORAGE_CLASS: ""

    # the pvc create policy.
    # if the storageClass supports dynamic provisioning, recommend "IfNotPresent" policy.
    # otherwise, using "Never" policy.
    # only affect the backupPolicy automatically created by KubeBs-locks.
    BACKUP_PVC_CREATE_POLICY: ""

    # the configmap name of the pv template. if the csi-driver not support dynamic provisioning,
    # you can provide a configmap which contains key "persistentVolume" and value of the persistentVolume struct.
    # only effective when storageClass is empty.
    BACKUP_PV_CONFIGMAP_NAME: ""

    # the configmap namespace of the pv template.
    BACKUP_PV_CONFIGMAP_NAMESPACE: ""
    # data plane tolerations
    DATA_PLANE_TOLERATIONS: '[{"effect":"NoSchedule","key":"kb-data","operator":"Equal","value":"true"}]'

    # data plane affinity
    DATA_PLANE_AFFINITY: '{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kb-data","operator":"In","values":["true"]}]},"weight":100}]}}'

    # the default storage class name.
    DEFAULT_STORAGE_CLASS: ""
