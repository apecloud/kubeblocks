/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// ClusterComponentDefinitionApplyConfiguration represents an declarative configuration of the ClusterComponentDefinition type for use
// with apply.
type ClusterComponentDefinitionApplyConfiguration struct {
	Name                   *string                                    `json:"name,omitempty"`
	Description            *string                                    `json:"description,omitempty"`
	WorkloadType           *v1alpha1.WorkloadType                     `json:"workloadType,omitempty"`
	CharacterType          *string                                    `json:"characterType,omitempty"`
	ConfigSpecs            []ComponentConfigSpecApplyConfiguration    `json:"configSpecs,omitempty"`
	ScriptSpecs            []ComponentTemplateSpecApplyConfiguration  `json:"scriptSpecs,omitempty"`
	Probes                 *ClusterDefinitionProbesApplyConfiguration `json:"probes,omitempty"`
	Monitor                *MonitorConfigApplyConfiguration           `json:"monitor,omitempty"`
	LogConfigs             []LogConfigApplyConfiguration              `json:"logConfigs,omitempty"`
	PodSpec                *v1.PodSpec                                `json:"podSpec,omitempty"`
	Service                *ServiceSpecApplyConfiguration             `json:"service,omitempty"`
	StatelessSpec          *StatelessSetSpecApplyConfiguration        `json:"statelessSpec,omitempty"`
	StatefulSpec           *StatefulSetSpecApplyConfiguration         `json:"statefulSpec,omitempty"`
	ConsensusSpec          *ConsensusSetSpecApplyConfiguration        `json:"consensusSpec,omitempty"`
	ReplicationSpec        *ReplicationSetSpecApplyConfiguration      `json:"replicationSpec,omitempty"`
	RSMSpec                *RSMSpecApplyConfiguration                 `json:"rsmSpec,omitempty"`
	HorizontalScalePolicy  *HorizontalScalePolicyApplyConfiguration   `json:"horizontalScalePolicy,omitempty"`
	SystemAccounts         *SystemAccountSpecApplyConfiguration       `json:"systemAccounts,omitempty"`
	VolumeTypes            []VolumeTypeSpecApplyConfiguration         `json:"volumeTypes,omitempty"`
	CustomLabelSpecs       []CustomLabelSpecApplyConfiguration        `json:"customLabelSpecs,omitempty"`
	SwitchoverSpec         *SwitchoverSpecApplyConfiguration          `json:"switchoverSpec,omitempty"`
	VolumeProtectionSpec   *VolumeProtectionSpecApplyConfiguration    `json:"volumeProtectionSpec,omitempty"`
	ComponentDefRef        []ComponentDefRefApplyConfiguration        `json:"componentDefRef,omitempty"`
	ServiceRefDeclarations []ServiceRefDeclarationApplyConfiguration  `json:"serviceRefDeclarations,omitempty"`
}

// ClusterComponentDefinitionApplyConfiguration constructs an declarative configuration of the ClusterComponentDefinition type for use with
// apply.
func ClusterComponentDefinition() *ClusterComponentDefinitionApplyConfiguration {
	return &ClusterComponentDefinitionApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithName(value string) *ClusterComponentDefinitionApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithDescription(value string) *ClusterComponentDefinitionApplyConfiguration {
	b.Description = &value
	return b
}

// WithWorkloadType sets the WorkloadType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadType field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithWorkloadType(value v1alpha1.WorkloadType) *ClusterComponentDefinitionApplyConfiguration {
	b.WorkloadType = &value
	return b
}

// WithCharacterType sets the CharacterType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CharacterType field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithCharacterType(value string) *ClusterComponentDefinitionApplyConfiguration {
	b.CharacterType = &value
	return b
}

// WithConfigSpecs adds the given value to the ConfigSpecs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConfigSpecs field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithConfigSpecs(values ...*ComponentConfigSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConfigSpecs")
		}
		b.ConfigSpecs = append(b.ConfigSpecs, *values[i])
	}
	return b
}

// WithScriptSpecs adds the given value to the ScriptSpecs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ScriptSpecs field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithScriptSpecs(values ...*ComponentTemplateSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithScriptSpecs")
		}
		b.ScriptSpecs = append(b.ScriptSpecs, *values[i])
	}
	return b
}

// WithProbes sets the Probes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Probes field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithProbes(value *ClusterDefinitionProbesApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.Probes = value
	return b
}

// WithMonitor sets the Monitor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitor field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithMonitor(value *MonitorConfigApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.Monitor = value
	return b
}

// WithLogConfigs adds the given value to the LogConfigs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LogConfigs field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithLogConfigs(values ...*LogConfigApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLogConfigs")
		}
		b.LogConfigs = append(b.LogConfigs, *values[i])
	}
	return b
}

// WithPodSpec sets the PodSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithPodSpec(value v1.PodSpec) *ClusterComponentDefinitionApplyConfiguration {
	b.PodSpec = &value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithService(value *ServiceSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.Service = value
	return b
}

// WithStatelessSpec sets the StatelessSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StatelessSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithStatelessSpec(value *StatelessSetSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.StatelessSpec = value
	return b
}

// WithStatefulSpec sets the StatefulSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StatefulSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithStatefulSpec(value *StatefulSetSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.StatefulSpec = value
	return b
}

// WithConsensusSpec sets the ConsensusSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConsensusSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithConsensusSpec(value *ConsensusSetSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.ConsensusSpec = value
	return b
}

// WithReplicationSpec sets the ReplicationSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicationSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithReplicationSpec(value *ReplicationSetSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.ReplicationSpec = value
	return b
}

// WithRSMSpec sets the RSMSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RSMSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithRSMSpec(value *RSMSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.RSMSpec = value
	return b
}

// WithHorizontalScalePolicy sets the HorizontalScalePolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HorizontalScalePolicy field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithHorizontalScalePolicy(value *HorizontalScalePolicyApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.HorizontalScalePolicy = value
	return b
}

// WithSystemAccounts sets the SystemAccounts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SystemAccounts field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithSystemAccounts(value *SystemAccountSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.SystemAccounts = value
	return b
}

// WithVolumeTypes adds the given value to the VolumeTypes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeTypes field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithVolumeTypes(values ...*VolumeTypeSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumeTypes")
		}
		b.VolumeTypes = append(b.VolumeTypes, *values[i])
	}
	return b
}

// WithCustomLabelSpecs adds the given value to the CustomLabelSpecs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CustomLabelSpecs field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithCustomLabelSpecs(values ...*CustomLabelSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCustomLabelSpecs")
		}
		b.CustomLabelSpecs = append(b.CustomLabelSpecs, *values[i])
	}
	return b
}

// WithSwitchoverSpec sets the SwitchoverSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SwitchoverSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithSwitchoverSpec(value *SwitchoverSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.SwitchoverSpec = value
	return b
}

// WithVolumeProtectionSpec sets the VolumeProtectionSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeProtectionSpec field is set to the value of the last call.
func (b *ClusterComponentDefinitionApplyConfiguration) WithVolumeProtectionSpec(value *VolumeProtectionSpecApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	b.VolumeProtectionSpec = value
	return b
}

// WithComponentDefRef adds the given value to the ComponentDefRef field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ComponentDefRef field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithComponentDefRef(values ...*ComponentDefRefApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponentDefRef")
		}
		b.ComponentDefRef = append(b.ComponentDefRef, *values[i])
	}
	return b
}

// WithServiceRefDeclarations adds the given value to the ServiceRefDeclarations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceRefDeclarations field.
func (b *ClusterComponentDefinitionApplyConfiguration) WithServiceRefDeclarations(values ...*ServiceRefDeclarationApplyConfiguration) *ClusterComponentDefinitionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServiceRefDeclarations")
		}
		b.ServiceRefDeclarations = append(b.ServiceRefDeclarations, *values[i])
	}
	return b
}
