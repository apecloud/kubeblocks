/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ClusterComponentServiceApplyConfiguration represents an declarative configuration of the ClusterComponentService type for use
// with apply.
type ClusterComponentServiceApplyConfiguration struct {
	Name        *string           `json:"name,omitempty"`
	ServiceType *v1.ServiceType   `json:"serviceType,omitempty"`
	Annotations map[string]string `json:"annotations,omitempty"`
}

// ClusterComponentServiceApplyConfiguration constructs an declarative configuration of the ClusterComponentService type for use with
// apply.
func ClusterComponentService() *ClusterComponentServiceApplyConfiguration {
	return &ClusterComponentServiceApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ClusterComponentServiceApplyConfiguration) WithName(value string) *ClusterComponentServiceApplyConfiguration {
	b.Name = &value
	return b
}

// WithServiceType sets the ServiceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceType field is set to the value of the last call.
func (b *ClusterComponentServiceApplyConfiguration) WithServiceType(value v1.ServiceType) *ClusterComponentServiceApplyConfiguration {
	b.ServiceType = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *ClusterComponentServiceApplyConfiguration) WithAnnotations(entries map[string]string) *ClusterComponentServiceApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}
