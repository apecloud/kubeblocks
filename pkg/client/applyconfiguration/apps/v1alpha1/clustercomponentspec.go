/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ClusterComponentSpecApplyConfiguration represents an declarative configuration of the ClusterComponentSpec type for use
// with apply.
type ClusterComponentSpecApplyConfiguration struct {
	Name                 *string                                                 `json:"name,omitempty"`
	ComponentDefRef      *string                                                 `json:"componentDefRef,omitempty"`
	ClassDefRef          *ClassDefRefApplyConfiguration                          `json:"classDefRef,omitempty"`
	ServiceRefs          []ServiceRefApplyConfiguration                          `json:"serviceRefs,omitempty"`
	Monitor              *bool                                                   `json:"monitor,omitempty"`
	EnabledLogs          []string                                                `json:"enabledLogs,omitempty"`
	Replicas             *int32                                                  `json:"replicas,omitempty"`
	Affinity             *AffinityApplyConfiguration                             `json:"affinity,omitempty"`
	Tolerations          []v1.Toleration                                         `json:"tolerations,omitempty"`
	Resources            *v1.ResourceRequirements                                `json:"resources,omitempty"`
	VolumeClaimTemplates []ClusterComponentVolumeClaimTemplateApplyConfiguration `json:"volumeClaimTemplates,omitempty"`
	Services             []ClusterComponentServiceApplyConfiguration             `json:"services,omitempty"`
	SwitchPolicy         *ClusterSwitchPolicyApplyConfiguration                  `json:"switchPolicy,omitempty"`
	TLS                  *bool                                                   `json:"tls,omitempty"`
	Issuer               *IssuerApplyConfiguration                               `json:"issuer,omitempty"`
	ServiceAccountName   *string                                                 `json:"serviceAccountName,omitempty"`
	NoCreatePDB          *bool                                                   `json:"noCreatePDB,omitempty"`
}

// ClusterComponentSpecApplyConfiguration constructs an declarative configuration of the ClusterComponentSpec type for use with
// apply.
func ClusterComponentSpec() *ClusterComponentSpecApplyConfiguration {
	return &ClusterComponentSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithName(value string) *ClusterComponentSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithComponentDefRef sets the ComponentDefRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComponentDefRef field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithComponentDefRef(value string) *ClusterComponentSpecApplyConfiguration {
	b.ComponentDefRef = &value
	return b
}

// WithClassDefRef sets the ClassDefRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClassDefRef field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithClassDefRef(value *ClassDefRefApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	b.ClassDefRef = value
	return b
}

// WithServiceRefs adds the given value to the ServiceRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceRefs field.
func (b *ClusterComponentSpecApplyConfiguration) WithServiceRefs(values ...*ServiceRefApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServiceRefs")
		}
		b.ServiceRefs = append(b.ServiceRefs, *values[i])
	}
	return b
}

// WithMonitor sets the Monitor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitor field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithMonitor(value bool) *ClusterComponentSpecApplyConfiguration {
	b.Monitor = &value
	return b
}

// WithEnabledLogs adds the given value to the EnabledLogs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EnabledLogs field.
func (b *ClusterComponentSpecApplyConfiguration) WithEnabledLogs(values ...string) *ClusterComponentSpecApplyConfiguration {
	for i := range values {
		b.EnabledLogs = append(b.EnabledLogs, values[i])
	}
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithReplicas(value int32) *ClusterComponentSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithAffinity(value *AffinityApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	b.Affinity = value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *ClusterComponentSpecApplyConfiguration) WithTolerations(values ...v1.Toleration) *ClusterComponentSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *ClusterComponentSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithVolumeClaimTemplates adds the given value to the VolumeClaimTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaimTemplates field.
func (b *ClusterComponentSpecApplyConfiguration) WithVolumeClaimTemplates(values ...*ClusterComponentVolumeClaimTemplateApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumeClaimTemplates")
		}
		b.VolumeClaimTemplates = append(b.VolumeClaimTemplates, *values[i])
	}
	return b
}

// WithServices adds the given value to the Services field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Services field.
func (b *ClusterComponentSpecApplyConfiguration) WithServices(values ...*ClusterComponentServiceApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServices")
		}
		b.Services = append(b.Services, *values[i])
	}
	return b
}

// WithSwitchPolicy sets the SwitchPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SwitchPolicy field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithSwitchPolicy(value *ClusterSwitchPolicyApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	b.SwitchPolicy = value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithTLS(value bool) *ClusterComponentSpecApplyConfiguration {
	b.TLS = &value
	return b
}

// WithIssuer sets the Issuer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Issuer field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithIssuer(value *IssuerApplyConfiguration) *ClusterComponentSpecApplyConfiguration {
	b.Issuer = value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithServiceAccountName(value string) *ClusterComponentSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithNoCreatePDB sets the NoCreatePDB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NoCreatePDB field is set to the value of the last call.
func (b *ClusterComponentSpecApplyConfiguration) WithNoCreatePDB(value bool) *ClusterComponentSpecApplyConfiguration {
	b.NoCreatePDB = &value
	return b
}
