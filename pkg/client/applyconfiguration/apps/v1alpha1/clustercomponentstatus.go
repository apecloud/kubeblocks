/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	workloadsv1alpha1 "github.com/apecloud/kubeblocks/pkg/client/applyconfiguration/workloads/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterComponentStatusApplyConfiguration represents an declarative configuration of the ClusterComponentStatus type for use
// with apply.
type ClusterComponentStatusApplyConfiguration struct {
	Phase                *v1alpha1.ClusterComponentPhase                    `json:"phase,omitempty"`
	Message              *v1alpha1.ComponentMessageMap                      `json:"message,omitempty"`
	PodsReady            *bool                                              `json:"podsReady,omitempty"`
	PodsReadyTime        *v1.Time                                           `json:"podsReadyTime,omitempty"`
	ConsensusSetStatus   *ConsensusSetStatusApplyConfiguration              `json:"consensusSetStatus,omitempty"`
	ReplicationSetStatus *ReplicationSetStatusApplyConfiguration            `json:"replicationSetStatus,omitempty"`
	MembersStatus        []workloadsv1alpha1.MemberStatusApplyConfiguration `json:"membersStatus,omitempty"`
}

// ClusterComponentStatusApplyConfiguration constructs an declarative configuration of the ClusterComponentStatus type for use with
// apply.
func ClusterComponentStatus() *ClusterComponentStatusApplyConfiguration {
	return &ClusterComponentStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ClusterComponentStatusApplyConfiguration) WithPhase(value v1alpha1.ClusterComponentPhase) *ClusterComponentStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *ClusterComponentStatusApplyConfiguration) WithMessage(value v1alpha1.ComponentMessageMap) *ClusterComponentStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithPodsReady sets the PodsReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodsReady field is set to the value of the last call.
func (b *ClusterComponentStatusApplyConfiguration) WithPodsReady(value bool) *ClusterComponentStatusApplyConfiguration {
	b.PodsReady = &value
	return b
}

// WithPodsReadyTime sets the PodsReadyTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodsReadyTime field is set to the value of the last call.
func (b *ClusterComponentStatusApplyConfiguration) WithPodsReadyTime(value v1.Time) *ClusterComponentStatusApplyConfiguration {
	b.PodsReadyTime = &value
	return b
}

// WithConsensusSetStatus sets the ConsensusSetStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConsensusSetStatus field is set to the value of the last call.
func (b *ClusterComponentStatusApplyConfiguration) WithConsensusSetStatus(value *ConsensusSetStatusApplyConfiguration) *ClusterComponentStatusApplyConfiguration {
	b.ConsensusSetStatus = value
	return b
}

// WithReplicationSetStatus sets the ReplicationSetStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicationSetStatus field is set to the value of the last call.
func (b *ClusterComponentStatusApplyConfiguration) WithReplicationSetStatus(value *ReplicationSetStatusApplyConfiguration) *ClusterComponentStatusApplyConfiguration {
	b.ReplicationSetStatus = value
	return b
}

// WithMembersStatus adds the given value to the MembersStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MembersStatus field.
func (b *ClusterComponentStatusApplyConfiguration) WithMembersStatus(values ...*workloadsv1alpha1.MemberStatusApplyConfiguration) *ClusterComponentStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMembersStatus")
		}
		b.MembersStatus = append(b.MembersStatus, *values[i])
	}
	return b
}
