/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ClusterDefinitionSpecApplyConfiguration represents an declarative configuration of the ClusterDefinitionSpec type for use
// with apply.
type ClusterDefinitionSpecApplyConfiguration struct {
	Type                 *string                                        `json:"type,omitempty"`
	ComponentDefs        []ClusterComponentDefinitionApplyConfiguration `json:"componentDefs,omitempty"`
	ConnectionCredential map[string]string                              `json:"connectionCredential,omitempty"`
}

// ClusterDefinitionSpecApplyConfiguration constructs an declarative configuration of the ClusterDefinitionSpec type for use with
// apply.
func ClusterDefinitionSpec() *ClusterDefinitionSpecApplyConfiguration {
	return &ClusterDefinitionSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ClusterDefinitionSpecApplyConfiguration) WithType(value string) *ClusterDefinitionSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithComponentDefs adds the given value to the ComponentDefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ComponentDefs field.
func (b *ClusterDefinitionSpecApplyConfiguration) WithComponentDefs(values ...*ClusterComponentDefinitionApplyConfiguration) *ClusterDefinitionSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponentDefs")
		}
		b.ComponentDefs = append(b.ComponentDefs, *values[i])
	}
	return b
}

// WithConnectionCredential puts the entries into the ConnectionCredential field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ConnectionCredential field,
// overwriting an existing map entries in ConnectionCredential field with the same key.
func (b *ClusterDefinitionSpecApplyConfiguration) WithConnectionCredential(entries map[string]string) *ClusterDefinitionSpecApplyConfiguration {
	if b.ConnectionCredential == nil && len(entries) > 0 {
		b.ConnectionCredential = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ConnectionCredential[k] = v
	}
	return b
}
