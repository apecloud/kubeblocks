/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// ClusterSpecApplyConfiguration represents an declarative configuration of the ClusterSpec type for use
// with apply.
type ClusterSpecApplyConfiguration struct {
	ClusterDefRef      *string                                  `json:"clusterDefinitionRef,omitempty"`
	ClusterVersionRef  *string                                  `json:"clusterVersionRef,omitempty"`
	TerminationPolicy  *v1alpha1.TerminationPolicyType          `json:"terminationPolicy,omitempty"`
	ComponentSpecs     []ClusterComponentSpecApplyConfiguration `json:"componentSpecs,omitempty"`
	Tenancy            *v1alpha1.TenancyType                    `json:"tenancy,omitempty"`
	AvailabilityPolicy *v1alpha1.AvailabilityPolicyType         `json:"availabilityPolicy,omitempty"`
	Affinity           *AffinityApplyConfiguration              `json:"affinity,omitempty"`
	Tolerations        []v1.Toleration                          `json:"tolerations,omitempty"`
	Replicas           *int32                                   `json:"replicas,omitempty"`
	Resources          *ClusterResourcesApplyConfiguration      `json:"resources,omitempty"`
	Storage            *ClusterStorageApplyConfiguration        `json:"storage,omitempty"`
	Monitor            *ClusterMonitorApplyConfiguration        `json:"monitor,omitempty"`
	Network            *ClusterNetworkApplyConfiguration        `json:"network,omitempty"`
	Backup             *ClusterBackupApplyConfiguration         `json:"backup,omitempty"`
}

// ClusterSpecApplyConfiguration constructs an declarative configuration of the ClusterSpec type for use with
// apply.
func ClusterSpec() *ClusterSpecApplyConfiguration {
	return &ClusterSpecApplyConfiguration{}
}

// WithClusterDefRef sets the ClusterDefRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDefRef field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithClusterDefRef(value string) *ClusterSpecApplyConfiguration {
	b.ClusterDefRef = &value
	return b
}

// WithClusterVersionRef sets the ClusterVersionRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterVersionRef field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithClusterVersionRef(value string) *ClusterSpecApplyConfiguration {
	b.ClusterVersionRef = &value
	return b
}

// WithTerminationPolicy sets the TerminationPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TerminationPolicy field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithTerminationPolicy(value v1alpha1.TerminationPolicyType) *ClusterSpecApplyConfiguration {
	b.TerminationPolicy = &value
	return b
}

// WithComponentSpecs adds the given value to the ComponentSpecs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ComponentSpecs field.
func (b *ClusterSpecApplyConfiguration) WithComponentSpecs(values ...*ClusterComponentSpecApplyConfiguration) *ClusterSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponentSpecs")
		}
		b.ComponentSpecs = append(b.ComponentSpecs, *values[i])
	}
	return b
}

// WithTenancy sets the Tenancy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tenancy field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithTenancy(value v1alpha1.TenancyType) *ClusterSpecApplyConfiguration {
	b.Tenancy = &value
	return b
}

// WithAvailabilityPolicy sets the AvailabilityPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AvailabilityPolicy field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithAvailabilityPolicy(value v1alpha1.AvailabilityPolicyType) *ClusterSpecApplyConfiguration {
	b.AvailabilityPolicy = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithAffinity(value *AffinityApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.Affinity = value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *ClusterSpecApplyConfiguration) WithTolerations(values ...v1.Toleration) *ClusterSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithReplicas(value int32) *ClusterSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithResources(value *ClusterResourcesApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.Resources = value
	return b
}

// WithStorage sets the Storage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Storage field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithStorage(value *ClusterStorageApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.Storage = value
	return b
}

// WithMonitor sets the Monitor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitor field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithMonitor(value *ClusterMonitorApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.Monitor = value
	return b
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithNetwork(value *ClusterNetworkApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.Network = value
	return b
}

// WithBackup sets the Backup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Backup field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithBackup(value *ClusterBackupApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.Backup = value
	return b
}
