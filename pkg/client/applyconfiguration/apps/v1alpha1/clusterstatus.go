/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterStatusApplyConfiguration represents an declarative configuration of the ClusterStatus type for use
// with apply.
type ClusterStatusApplyConfiguration struct {
	ObservedGeneration   *int64                                              `json:"observedGeneration,omitempty"`
	Phase                *v1alpha1.ClusterPhase                              `json:"phase,omitempty"`
	Message              *string                                             `json:"message,omitempty"`
	Components           map[string]ClusterComponentStatusApplyConfiguration `json:"components,omitempty"`
	ClusterDefGeneration *int64                                              `json:"clusterDefGeneration,omitempty"`
	Conditions           []v1.Condition                                      `json:"conditions,omitempty"`
}

// ClusterStatusApplyConfiguration constructs an declarative configuration of the ClusterStatus type for use with
// apply.
func ClusterStatus() *ClusterStatusApplyConfiguration {
	return &ClusterStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithObservedGeneration(value int64) *ClusterStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithPhase(value v1alpha1.ClusterPhase) *ClusterStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithMessage(value string) *ClusterStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithComponents puts the entries into the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Components field,
// overwriting an existing map entries in Components field with the same key.
func (b *ClusterStatusApplyConfiguration) WithComponents(entries map[string]ClusterComponentStatusApplyConfiguration) *ClusterStatusApplyConfiguration {
	if b.Components == nil && len(entries) > 0 {
		b.Components = make(map[string]ClusterComponentStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Components[k] = v
	}
	return b
}

// WithClusterDefGeneration sets the ClusterDefGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDefGeneration field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithClusterDefGeneration(value int64) *ClusterStatusApplyConfiguration {
	b.ClusterDefGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ClusterStatusApplyConfiguration) WithConditions(values ...v1.Condition) *ClusterStatusApplyConfiguration {
	for i := range values {
		b.Conditions = append(b.Conditions, values[i])
	}
	return b
}
