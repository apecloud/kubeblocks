/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// ComponentClassApplyConfiguration represents an declarative configuration of the ComponentClass type for use
// with apply.
type ComponentClassApplyConfiguration struct {
	Name   *string            `json:"name,omitempty"`
	Args   []string           `json:"args,omitempty"`
	CPU    *resource.Quantity `json:"cpu,omitempty"`
	Memory *resource.Quantity `json:"memory,omitempty"`
}

// ComponentClassApplyConfiguration constructs an declarative configuration of the ComponentClass type for use with
// apply.
func ComponentClass() *ComponentClassApplyConfiguration {
	return &ComponentClassApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ComponentClassApplyConfiguration) WithName(value string) *ComponentClassApplyConfiguration {
	b.Name = &value
	return b
}

// WithArgs adds the given value to the Args field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Args field.
func (b *ComponentClassApplyConfiguration) WithArgs(values ...string) *ComponentClassApplyConfiguration {
	for i := range values {
		b.Args = append(b.Args, values[i])
	}
	return b
}

// WithCPU sets the CPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CPU field is set to the value of the last call.
func (b *ComponentClassApplyConfiguration) WithCPU(value resource.Quantity) *ComponentClassApplyConfiguration {
	b.CPU = &value
	return b
}

// WithMemory sets the Memory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Memory field is set to the value of the last call.
func (b *ComponentClassApplyConfiguration) WithMemory(value resource.Quantity) *ComponentClassApplyConfiguration {
	b.Memory = &value
	return b
}
