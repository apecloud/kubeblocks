/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ConfigConstraintSpecApplyConfiguration represents an declarative configuration of the ConfigConstraintSpec type for use
// with apply.
type ConfigConstraintSpecApplyConfiguration struct {
	ReloadOptions         *ReloadOptionsApplyConfiguration              `json:"reloadOptions,omitempty"`
	ToolsImageSpec        *ToolsImageSpecApplyConfiguration             `json:"toolsImageSpec,omitempty"`
	DownwardAPIOptions    []DownwardAPIOptionApplyConfiguration         `json:"downwardAPIOptions,omitempty"`
	ScriptConfigs         []ScriptConfigApplyConfiguration              `json:"scriptConfigs,omitempty"`
	CfgSchemaTopLevelName *string                                       `json:"cfgSchemaTopLevelName,omitempty"`
	ConfigurationSchema   *CustomParametersValidationApplyConfiguration `json:"configurationSchema,omitempty"`
	StaticParameters      []string                                      `json:"staticParameters,omitempty"`
	DynamicParameters     []string                                      `json:"dynamicParameters,omitempty"`
	ImmutableParameters   []string                                      `json:"immutableParameters,omitempty"`
	Selector              *v1.LabelSelector                             `json:"selector,omitempty"`
	FormatterConfig       *FormatterConfigApplyConfiguration            `json:"formatterConfig,omitempty"`
}

// ConfigConstraintSpecApplyConfiguration constructs an declarative configuration of the ConfigConstraintSpec type for use with
// apply.
func ConfigConstraintSpec() *ConfigConstraintSpecApplyConfiguration {
	return &ConfigConstraintSpecApplyConfiguration{}
}

// WithReloadOptions sets the ReloadOptions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReloadOptions field is set to the value of the last call.
func (b *ConfigConstraintSpecApplyConfiguration) WithReloadOptions(value *ReloadOptionsApplyConfiguration) *ConfigConstraintSpecApplyConfiguration {
	b.ReloadOptions = value
	return b
}

// WithToolsImageSpec sets the ToolsImageSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ToolsImageSpec field is set to the value of the last call.
func (b *ConfigConstraintSpecApplyConfiguration) WithToolsImageSpec(value *ToolsImageSpecApplyConfiguration) *ConfigConstraintSpecApplyConfiguration {
	b.ToolsImageSpec = value
	return b
}

// WithDownwardAPIOptions adds the given value to the DownwardAPIOptions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DownwardAPIOptions field.
func (b *ConfigConstraintSpecApplyConfiguration) WithDownwardAPIOptions(values ...*DownwardAPIOptionApplyConfiguration) *ConfigConstraintSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDownwardAPIOptions")
		}
		b.DownwardAPIOptions = append(b.DownwardAPIOptions, *values[i])
	}
	return b
}

// WithScriptConfigs adds the given value to the ScriptConfigs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ScriptConfigs field.
func (b *ConfigConstraintSpecApplyConfiguration) WithScriptConfigs(values ...*ScriptConfigApplyConfiguration) *ConfigConstraintSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithScriptConfigs")
		}
		b.ScriptConfigs = append(b.ScriptConfigs, *values[i])
	}
	return b
}

// WithCfgSchemaTopLevelName sets the CfgSchemaTopLevelName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CfgSchemaTopLevelName field is set to the value of the last call.
func (b *ConfigConstraintSpecApplyConfiguration) WithCfgSchemaTopLevelName(value string) *ConfigConstraintSpecApplyConfiguration {
	b.CfgSchemaTopLevelName = &value
	return b
}

// WithConfigurationSchema sets the ConfigurationSchema field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigurationSchema field is set to the value of the last call.
func (b *ConfigConstraintSpecApplyConfiguration) WithConfigurationSchema(value *CustomParametersValidationApplyConfiguration) *ConfigConstraintSpecApplyConfiguration {
	b.ConfigurationSchema = value
	return b
}

// WithStaticParameters adds the given value to the StaticParameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StaticParameters field.
func (b *ConfigConstraintSpecApplyConfiguration) WithStaticParameters(values ...string) *ConfigConstraintSpecApplyConfiguration {
	for i := range values {
		b.StaticParameters = append(b.StaticParameters, values[i])
	}
	return b
}

// WithDynamicParameters adds the given value to the DynamicParameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DynamicParameters field.
func (b *ConfigConstraintSpecApplyConfiguration) WithDynamicParameters(values ...string) *ConfigConstraintSpecApplyConfiguration {
	for i := range values {
		b.DynamicParameters = append(b.DynamicParameters, values[i])
	}
	return b
}

// WithImmutableParameters adds the given value to the ImmutableParameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImmutableParameters field.
func (b *ConfigConstraintSpecApplyConfiguration) WithImmutableParameters(values ...string) *ConfigConstraintSpecApplyConfiguration {
	for i := range values {
		b.ImmutableParameters = append(b.ImmutableParameters, values[i])
	}
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *ConfigConstraintSpecApplyConfiguration) WithSelector(value v1.LabelSelector) *ConfigConstraintSpecApplyConfiguration {
	b.Selector = &value
	return b
}

// WithFormatterConfig sets the FormatterConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FormatterConfig field is set to the value of the last call.
func (b *ConfigConstraintSpecApplyConfiguration) WithFormatterConfig(value *FormatterConfigApplyConfiguration) *ConfigConstraintSpecApplyConfiguration {
	b.FormatterConfig = value
	return b
}
