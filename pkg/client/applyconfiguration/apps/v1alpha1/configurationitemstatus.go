/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
)

// ConfigurationItemStatusApplyConfiguration represents an declarative configuration of the ConfigurationItemStatus type for use
// with apply.
type ConfigurationItemStatusApplyConfiguration struct {
	Name                     *string                              `json:"name,omitempty"`
	UpdatePolicy             *v1alpha1.UpgradePolicy              `json:"updatePolicy,omitempty"`
	Status                   *string                              `json:"status,omitempty"`
	SucceedCount             *int32                               `json:"succeedCount,omitempty"`
	ExpectedCount            *int32                               `json:"expectedCount,omitempty"`
	LastAppliedStatus        *string                              `json:"lastStatus,omitempty"`
	LastAppliedConfiguration map[string]string                    `json:"lastAppliedConfiguration,omitempty"`
	UpdatedParameters        *UpdatedParametersApplyConfiguration `json:"updatedParameters,omitempty"`
}

// ConfigurationItemStatusApplyConfiguration constructs an declarative configuration of the ConfigurationItemStatus type for use with
// apply.
func ConfigurationItemStatus() *ConfigurationItemStatusApplyConfiguration {
	return &ConfigurationItemStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithName(value string) *ConfigurationItemStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithUpdatePolicy sets the UpdatePolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdatePolicy field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithUpdatePolicy(value v1alpha1.UpgradePolicy) *ConfigurationItemStatusApplyConfiguration {
	b.UpdatePolicy = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithStatus(value string) *ConfigurationItemStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithSucceedCount sets the SucceedCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SucceedCount field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithSucceedCount(value int32) *ConfigurationItemStatusApplyConfiguration {
	b.SucceedCount = &value
	return b
}

// WithExpectedCount sets the ExpectedCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExpectedCount field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithExpectedCount(value int32) *ConfigurationItemStatusApplyConfiguration {
	b.ExpectedCount = &value
	return b
}

// WithLastAppliedStatus sets the LastAppliedStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastAppliedStatus field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithLastAppliedStatus(value string) *ConfigurationItemStatusApplyConfiguration {
	b.LastAppliedStatus = &value
	return b
}

// WithLastAppliedConfiguration puts the entries into the LastAppliedConfiguration field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the LastAppliedConfiguration field,
// overwriting an existing map entries in LastAppliedConfiguration field with the same key.
func (b *ConfigurationItemStatusApplyConfiguration) WithLastAppliedConfiguration(entries map[string]string) *ConfigurationItemStatusApplyConfiguration {
	if b.LastAppliedConfiguration == nil && len(entries) > 0 {
		b.LastAppliedConfiguration = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.LastAppliedConfiguration[k] = v
	}
	return b
}

// WithUpdatedParameters sets the UpdatedParameters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdatedParameters field is set to the value of the last call.
func (b *ConfigurationItemStatusApplyConfiguration) WithUpdatedParameters(value *UpdatedParametersApplyConfiguration) *ConfigurationItemStatusApplyConfiguration {
	b.UpdatedParameters = value
	return b
}
