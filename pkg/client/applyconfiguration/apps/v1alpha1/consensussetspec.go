/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	appsv1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	v1 "k8s.io/api/apps/v1"
)

// ConsensusSetSpecApplyConfiguration represents an declarative configuration of the ConsensusSetSpec type for use
// with apply.
type ConsensusSetSpecApplyConfiguration struct {
	StatefulSetSpecApplyConfiguration `json:",inline"`
	Leader                            *ConsensusMemberApplyConfiguration  `json:"leader,omitempty"`
	Followers                         []ConsensusMemberApplyConfiguration `json:"followers,omitempty"`
	Learner                           *ConsensusMemberApplyConfiguration  `json:"learner,omitempty"`
}

// ConsensusSetSpecApplyConfiguration constructs an declarative configuration of the ConsensusSetSpec type for use with
// apply.
func ConsensusSetSpec() *ConsensusSetSpecApplyConfiguration {
	return &ConsensusSetSpecApplyConfiguration{}
}

// WithUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateStrategy field is set to the value of the last call.
func (b *ConsensusSetSpecApplyConfiguration) WithUpdateStrategy(value appsv1alpha1.UpdateStrategy) *ConsensusSetSpecApplyConfiguration {
	b.UpdateStrategy = &value
	return b
}

// WithLLPodManagementPolicy sets the LLPodManagementPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LLPodManagementPolicy field is set to the value of the last call.
func (b *ConsensusSetSpecApplyConfiguration) WithLLPodManagementPolicy(value v1.PodManagementPolicyType) *ConsensusSetSpecApplyConfiguration {
	b.LLPodManagementPolicy = &value
	return b
}

// WithLLUpdateStrategy sets the LLUpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LLUpdateStrategy field is set to the value of the last call.
func (b *ConsensusSetSpecApplyConfiguration) WithLLUpdateStrategy(value v1.StatefulSetUpdateStrategy) *ConsensusSetSpecApplyConfiguration {
	b.LLUpdateStrategy = &value
	return b
}

// WithLeader sets the Leader field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Leader field is set to the value of the last call.
func (b *ConsensusSetSpecApplyConfiguration) WithLeader(value *ConsensusMemberApplyConfiguration) *ConsensusSetSpecApplyConfiguration {
	b.Leader = value
	return b
}

// WithFollowers adds the given value to the Followers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Followers field.
func (b *ConsensusSetSpecApplyConfiguration) WithFollowers(values ...*ConsensusMemberApplyConfiguration) *ConsensusSetSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFollowers")
		}
		b.Followers = append(b.Followers, *values[i])
	}
	return b
}

// WithLearner sets the Learner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Learner field is set to the value of the last call.
func (b *ConsensusSetSpecApplyConfiguration) WithLearner(value *ConsensusMemberApplyConfiguration) *ConsensusSetSpecApplyConfiguration {
	b.Learner = value
	return b
}
