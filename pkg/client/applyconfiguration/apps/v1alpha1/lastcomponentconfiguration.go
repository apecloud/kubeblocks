/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	appsv1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// LastComponentConfigurationApplyConfiguration represents an declarative configuration of the LastComponentConfiguration type for use
// with apply.
type LastComponentConfigurationApplyConfiguration struct {
	Replicas                *int32 `json:"replicas,omitempty"`
	v1.ResourceRequirements `json:",omitempty,inline"`
	ClassDefRef             *ClassDefRefApplyConfiguration                    `json:"classDefRef,omitempty"`
	VolumeClaimTemplates    []OpsRequestVolumeClaimTemplateApplyConfiguration `json:"volumeClaimTemplates,omitempty"`
	Services                []ClusterComponentServiceApplyConfiguration       `json:"services,omitempty"`
	TargetResources         map[appsv1alpha1.ComponentResourceKey][]string    `json:"targetResources,omitempty"`
}

// LastComponentConfigurationApplyConfiguration constructs an declarative configuration of the LastComponentConfiguration type for use with
// apply.
func LastComponentConfiguration() *LastComponentConfigurationApplyConfiguration {
	return &LastComponentConfigurationApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *LastComponentConfigurationApplyConfiguration) WithReplicas(value int32) *LastComponentConfigurationApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithLimits sets the Limits field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Limits field is set to the value of the last call.
func (b *LastComponentConfigurationApplyConfiguration) WithLimits(value v1.ResourceList) *LastComponentConfigurationApplyConfiguration {
	b.Limits = value
	return b
}

// WithRequests sets the Requests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requests field is set to the value of the last call.
func (b *LastComponentConfigurationApplyConfiguration) WithRequests(value v1.ResourceList) *LastComponentConfigurationApplyConfiguration {
	b.Requests = value
	return b
}

// WithClaims adds the given value to the Claims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Claims field.
func (b *LastComponentConfigurationApplyConfiguration) WithClaims(values ...v1.ResourceClaim) *LastComponentConfigurationApplyConfiguration {
	for i := range values {
		b.Claims = append(b.Claims, values[i])
	}
	return b
}

// WithClassDefRef sets the ClassDefRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClassDefRef field is set to the value of the last call.
func (b *LastComponentConfigurationApplyConfiguration) WithClassDefRef(value *ClassDefRefApplyConfiguration) *LastComponentConfigurationApplyConfiguration {
	b.ClassDefRef = value
	return b
}

// WithVolumeClaimTemplates adds the given value to the VolumeClaimTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaimTemplates field.
func (b *LastComponentConfigurationApplyConfiguration) WithVolumeClaimTemplates(values ...*OpsRequestVolumeClaimTemplateApplyConfiguration) *LastComponentConfigurationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumeClaimTemplates")
		}
		b.VolumeClaimTemplates = append(b.VolumeClaimTemplates, *values[i])
	}
	return b
}

// WithServices adds the given value to the Services field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Services field.
func (b *LastComponentConfigurationApplyConfiguration) WithServices(values ...*ClusterComponentServiceApplyConfiguration) *LastComponentConfigurationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServices")
		}
		b.Services = append(b.Services, *values[i])
	}
	return b
}

// WithTargetResources puts the entries into the TargetResources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the TargetResources field,
// overwriting an existing map entries in TargetResources field with the same key.
func (b *LastComponentConfigurationApplyConfiguration) WithTargetResources(entries map[appsv1alpha1.ComponentResourceKey][]string) *LastComponentConfigurationApplyConfiguration {
	if b.TargetResources == nil && len(entries) > 0 {
		b.TargetResources = make(map[appsv1alpha1.ComponentResourceKey][]string, len(entries))
	}
	for k, v := range entries {
		b.TargetResources[k] = v
	}
	return b
}
