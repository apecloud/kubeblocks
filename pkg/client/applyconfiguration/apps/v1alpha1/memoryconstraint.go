/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// MemoryConstraintApplyConfiguration represents an declarative configuration of the MemoryConstraint type for use
// with apply.
type MemoryConstraintApplyConfiguration struct {
	SizePerCPU *resource.Quantity `json:"sizePerCPU,omitempty"`
	MaxPerCPU  *resource.Quantity `json:"maxPerCPU,omitempty"`
	MinPerCPU  *resource.Quantity `json:"minPerCPU,omitempty"`
}

// MemoryConstraintApplyConfiguration constructs an declarative configuration of the MemoryConstraint type for use with
// apply.
func MemoryConstraint() *MemoryConstraintApplyConfiguration {
	return &MemoryConstraintApplyConfiguration{}
}

// WithSizePerCPU sets the SizePerCPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SizePerCPU field is set to the value of the last call.
func (b *MemoryConstraintApplyConfiguration) WithSizePerCPU(value resource.Quantity) *MemoryConstraintApplyConfiguration {
	b.SizePerCPU = &value
	return b
}

// WithMaxPerCPU sets the MaxPerCPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxPerCPU field is set to the value of the last call.
func (b *MemoryConstraintApplyConfiguration) WithMaxPerCPU(value resource.Quantity) *MemoryConstraintApplyConfiguration {
	b.MaxPerCPU = &value
	return b
}

// WithMinPerCPU sets the MinPerCPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinPerCPU field is set to the value of the last call.
func (b *MemoryConstraintApplyConfiguration) WithMinPerCPU(value resource.Quantity) *MemoryConstraintApplyConfiguration {
	b.MinPerCPU = &value
	return b
}
