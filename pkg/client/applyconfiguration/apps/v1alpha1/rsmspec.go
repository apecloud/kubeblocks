/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadsv1alpha1 "github.com/apecloud/kubeblocks/apis/workloads/v1alpha1"
	v1alpha1 "github.com/apecloud/kubeblocks/pkg/client/applyconfiguration/workloads/v1alpha1"
)

// RSMSpecApplyConfiguration represents an declarative configuration of the RSMSpec type for use
// with apply.
type RSMSpecApplyConfiguration struct {
	Roles                     []v1alpha1.ReplicaRoleApplyConfiguration              `json:"roles,omitempty"`
	RoleProbe                 *v1alpha1.RoleProbeApplyConfiguration                 `json:"roleProbe,omitempty"`
	MembershipReconfiguration *v1alpha1.MembershipReconfigurationApplyConfiguration `json:"membershipReconfiguration,omitempty"`
	MemberUpdateStrategy      *workloadsv1alpha1.MemberUpdateStrategy               `json:"memberUpdateStrategy,omitempty"`
}

// RSMSpecApplyConfiguration constructs an declarative configuration of the RSMSpec type for use with
// apply.
func RSMSpec() *RSMSpecApplyConfiguration {
	return &RSMSpecApplyConfiguration{}
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *RSMSpecApplyConfiguration) WithRoles(values ...*v1alpha1.ReplicaRoleApplyConfiguration) *RSMSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}

// WithRoleProbe sets the RoleProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RoleProbe field is set to the value of the last call.
func (b *RSMSpecApplyConfiguration) WithRoleProbe(value *v1alpha1.RoleProbeApplyConfiguration) *RSMSpecApplyConfiguration {
	b.RoleProbe = value
	return b
}

// WithMembershipReconfiguration sets the MembershipReconfiguration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MembershipReconfiguration field is set to the value of the last call.
func (b *RSMSpecApplyConfiguration) WithMembershipReconfiguration(value *v1alpha1.MembershipReconfigurationApplyConfiguration) *RSMSpecApplyConfiguration {
	b.MembershipReconfiguration = value
	return b
}

// WithMemberUpdateStrategy sets the MemberUpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemberUpdateStrategy field is set to the value of the last call.
func (b *RSMSpecApplyConfiguration) WithMemberUpdateStrategy(value workloadsv1alpha1.MemberUpdateStrategy) *RSMSpecApplyConfiguration {
	b.MemberUpdateStrategy = &value
	return b
}
