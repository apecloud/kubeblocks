/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// UpdatedParametersApplyConfiguration represents an declarative configuration of the UpdatedParameters type for use
// with apply.
type UpdatedParametersApplyConfiguration struct {
	AddedKeys   map[string]string `json:"addedKeys,omitempty"`
	DeletedKeys map[string]string `json:"deletedKeys,omitempty"`
	UpdatedKeys map[string]string `json:"updatedKeys,omitempty"`
}

// UpdatedParametersApplyConfiguration constructs an declarative configuration of the UpdatedParameters type for use with
// apply.
func UpdatedParameters() *UpdatedParametersApplyConfiguration {
	return &UpdatedParametersApplyConfiguration{}
}

// WithAddedKeys puts the entries into the AddedKeys field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AddedKeys field,
// overwriting an existing map entries in AddedKeys field with the same key.
func (b *UpdatedParametersApplyConfiguration) WithAddedKeys(entries map[string]string) *UpdatedParametersApplyConfiguration {
	if b.AddedKeys == nil && len(entries) > 0 {
		b.AddedKeys = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AddedKeys[k] = v
	}
	return b
}

// WithDeletedKeys puts the entries into the DeletedKeys field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DeletedKeys field,
// overwriting an existing map entries in DeletedKeys field with the same key.
func (b *UpdatedParametersApplyConfiguration) WithDeletedKeys(entries map[string]string) *UpdatedParametersApplyConfiguration {
	if b.DeletedKeys == nil && len(entries) > 0 {
		b.DeletedKeys = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.DeletedKeys[k] = v
	}
	return b
}

// WithUpdatedKeys puts the entries into the UpdatedKeys field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the UpdatedKeys field,
// overwriting an existing map entries in UpdatedKeys field with the same key.
func (b *UpdatedParametersApplyConfiguration) WithUpdatedKeys(entries map[string]string) *UpdatedParametersApplyConfiguration {
	if b.UpdatedKeys == nil && len(entries) > 0 {
		b.UpdatedKeys = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.UpdatedKeys[k] = v
	}
	return b
}
