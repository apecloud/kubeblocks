/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// BackupPolicySpecApplyConfiguration represents an declarative configuration of the BackupPolicySpec type for use
// with apply.
type BackupPolicySpecApplyConfiguration struct {
	Retention *RetentionSpecApplyConfiguration      `json:"retention,omitempty"`
	Schedule  *ScheduleApplyConfiguration           `json:"schedule,omitempty"`
	Snapshot  *SnapshotPolicyApplyConfiguration     `json:"snapshot,omitempty"`
	Datafile  *CommonBackupPolicyApplyConfiguration `json:"datafile,omitempty"`
	Logfile   *CommonBackupPolicyApplyConfiguration `json:"logfile,omitempty"`
}

// BackupPolicySpecApplyConfiguration constructs an declarative configuration of the BackupPolicySpec type for use with
// apply.
func BackupPolicySpec() *BackupPolicySpecApplyConfiguration {
	return &BackupPolicySpecApplyConfiguration{}
}

// WithRetention sets the Retention field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Retention field is set to the value of the last call.
func (b *BackupPolicySpecApplyConfiguration) WithRetention(value *RetentionSpecApplyConfiguration) *BackupPolicySpecApplyConfiguration {
	b.Retention = value
	return b
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *BackupPolicySpecApplyConfiguration) WithSchedule(value *ScheduleApplyConfiguration) *BackupPolicySpecApplyConfiguration {
	b.Schedule = value
	return b
}

// WithSnapshot sets the Snapshot field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Snapshot field is set to the value of the last call.
func (b *BackupPolicySpecApplyConfiguration) WithSnapshot(value *SnapshotPolicyApplyConfiguration) *BackupPolicySpecApplyConfiguration {
	b.Snapshot = value
	return b
}

// WithDatafile sets the Datafile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Datafile field is set to the value of the last call.
func (b *BackupPolicySpecApplyConfiguration) WithDatafile(value *CommonBackupPolicyApplyConfiguration) *BackupPolicySpecApplyConfiguration {
	b.Datafile = value
	return b
}

// WithLogfile sets the Logfile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logfile field is set to the value of the last call.
func (b *BackupPolicySpecApplyConfiguration) WithLogfile(value *CommonBackupPolicyApplyConfiguration) *BackupPolicySpecApplyConfiguration {
	b.Logfile = value
	return b
}
