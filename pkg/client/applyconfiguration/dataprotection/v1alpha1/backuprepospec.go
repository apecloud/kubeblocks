/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// BackupRepoSpecApplyConfiguration represents an declarative configuration of the BackupRepoSpec type for use
// with apply.
type BackupRepoSpecApplyConfiguration struct {
	StorageProviderRef *string                           `json:"storageProviderRef,omitempty"`
	VolumeCapacity     *resource.Quantity                `json:"volumeCapacity,omitempty"`
	PVReclaimPolicy    *v1.PersistentVolumeReclaimPolicy `json:"pvReclaimPolicy,omitempty"`
	Config             map[string]string                 `json:"config,omitempty"`
	Credential         *v1.SecretReference               `json:"credential,omitempty"`
}

// BackupRepoSpecApplyConfiguration constructs an declarative configuration of the BackupRepoSpec type for use with
// apply.
func BackupRepoSpec() *BackupRepoSpecApplyConfiguration {
	return &BackupRepoSpecApplyConfiguration{}
}

// WithStorageProviderRef sets the StorageProviderRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageProviderRef field is set to the value of the last call.
func (b *BackupRepoSpecApplyConfiguration) WithStorageProviderRef(value string) *BackupRepoSpecApplyConfiguration {
	b.StorageProviderRef = &value
	return b
}

// WithVolumeCapacity sets the VolumeCapacity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeCapacity field is set to the value of the last call.
func (b *BackupRepoSpecApplyConfiguration) WithVolumeCapacity(value resource.Quantity) *BackupRepoSpecApplyConfiguration {
	b.VolumeCapacity = &value
	return b
}

// WithPVReclaimPolicy sets the PVReclaimPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PVReclaimPolicy field is set to the value of the last call.
func (b *BackupRepoSpecApplyConfiguration) WithPVReclaimPolicy(value v1.PersistentVolumeReclaimPolicy) *BackupRepoSpecApplyConfiguration {
	b.PVReclaimPolicy = &value
	return b
}

// WithConfig puts the entries into the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Config field,
// overwriting an existing map entries in Config field with the same key.
func (b *BackupRepoSpecApplyConfiguration) WithConfig(entries map[string]string) *BackupRepoSpecApplyConfiguration {
	if b.Config == nil && len(entries) > 0 {
		b.Config = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Config[k] = v
	}
	return b
}

// WithCredential sets the Credential field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Credential field is set to the value of the last call.
func (b *BackupRepoSpecApplyConfiguration) WithCredential(value v1.SecretReference) *BackupRepoSpecApplyConfiguration {
	b.Credential = &value
	return b
}
