/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/dataprotection/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// BackupToolSpecApplyConfiguration represents an declarative configuration of the BackupToolSpec type for use
// with apply.
type BackupToolSpecApplyConfiguration struct {
	Image                     *string                           `json:"image,omitempty"`
	DeployKind                *v1alpha1.DeployKind              `json:"deployKind,omitempty"`
	Type                      *string                           `json:"type,omitempty"`
	Resources                 *v1.ResourceRequirements          `json:"resources,omitempty"`
	Env                       []v1.EnvVar                       `json:"env,omitempty"`
	EnvFrom                   []v1.EnvFromSource                `json:"envFrom,omitempty"`
	BackupCommands            []string                          `json:"backupCommands,omitempty"`
	IncrementalBackupCommands []string                          `json:"incrementalBackupCommands,omitempty"`
	Physical                  *PhysicalConfigApplyConfiguration `json:"physical,omitempty"`
	Logical                   *LogicalConfigApplyConfiguration  `json:"logical,omitempty"`
}

// BackupToolSpecApplyConfiguration constructs an declarative configuration of the BackupToolSpec type for use with
// apply.
func BackupToolSpec() *BackupToolSpecApplyConfiguration {
	return &BackupToolSpecApplyConfiguration{}
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *BackupToolSpecApplyConfiguration) WithImage(value string) *BackupToolSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithDeployKind sets the DeployKind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeployKind field is set to the value of the last call.
func (b *BackupToolSpecApplyConfiguration) WithDeployKind(value v1alpha1.DeployKind) *BackupToolSpecApplyConfiguration {
	b.DeployKind = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *BackupToolSpecApplyConfiguration) WithType(value string) *BackupToolSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *BackupToolSpecApplyConfiguration) WithResources(value v1.ResourceRequirements) *BackupToolSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *BackupToolSpecApplyConfiguration) WithEnv(values ...v1.EnvVar) *BackupToolSpecApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}

// WithEnvFrom adds the given value to the EnvFrom field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EnvFrom field.
func (b *BackupToolSpecApplyConfiguration) WithEnvFrom(values ...v1.EnvFromSource) *BackupToolSpecApplyConfiguration {
	for i := range values {
		b.EnvFrom = append(b.EnvFrom, values[i])
	}
	return b
}

// WithBackupCommands adds the given value to the BackupCommands field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BackupCommands field.
func (b *BackupToolSpecApplyConfiguration) WithBackupCommands(values ...string) *BackupToolSpecApplyConfiguration {
	for i := range values {
		b.BackupCommands = append(b.BackupCommands, values[i])
	}
	return b
}

// WithIncrementalBackupCommands adds the given value to the IncrementalBackupCommands field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IncrementalBackupCommands field.
func (b *BackupToolSpecApplyConfiguration) WithIncrementalBackupCommands(values ...string) *BackupToolSpecApplyConfiguration {
	for i := range values {
		b.IncrementalBackupCommands = append(b.IncrementalBackupCommands, values[i])
	}
	return b
}

// WithPhysical sets the Physical field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Physical field is set to the value of the last call.
func (b *BackupToolSpecApplyConfiguration) WithPhysical(value *PhysicalConfigApplyConfiguration) *BackupToolSpecApplyConfiguration {
	b.Physical = value
	return b
}

// WithLogical sets the Logical field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logical field is set to the value of the last call.
func (b *BackupToolSpecApplyConfiguration) WithLogical(value *LogicalConfigApplyConfiguration) *BackupToolSpecApplyConfiguration {
	b.Logical = value
	return b
}
