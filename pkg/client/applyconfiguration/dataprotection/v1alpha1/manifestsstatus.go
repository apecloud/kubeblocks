/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ManifestsStatusApplyConfiguration represents an declarative configuration of the ManifestsStatus type for use
// with apply.
type ManifestsStatusApplyConfiguration struct {
	BackupLog   *BackupLogStatusApplyConfiguration           `json:"backupLog,omitempty"`
	Target      *string                                      `json:"target,omitempty"`
	Snapshot    *BackupSnapshotStatusApplyConfiguration      `json:"backupSnapshot,omitempty"`
	BackupTool  *BackupToolManifestsStatusApplyConfiguration `json:"backupTool,omitempty"`
	UserContext map[string]string                            `json:"userContext,omitempty"`
}

// ManifestsStatusApplyConfiguration constructs an declarative configuration of the ManifestsStatus type for use with
// apply.
func ManifestsStatus() *ManifestsStatusApplyConfiguration {
	return &ManifestsStatusApplyConfiguration{}
}

// WithBackupLog sets the BackupLog field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupLog field is set to the value of the last call.
func (b *ManifestsStatusApplyConfiguration) WithBackupLog(value *BackupLogStatusApplyConfiguration) *ManifestsStatusApplyConfiguration {
	b.BackupLog = value
	return b
}

// WithTarget sets the Target field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Target field is set to the value of the last call.
func (b *ManifestsStatusApplyConfiguration) WithTarget(value string) *ManifestsStatusApplyConfiguration {
	b.Target = &value
	return b
}

// WithSnapshot sets the Snapshot field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Snapshot field is set to the value of the last call.
func (b *ManifestsStatusApplyConfiguration) WithSnapshot(value *BackupSnapshotStatusApplyConfiguration) *ManifestsStatusApplyConfiguration {
	b.Snapshot = value
	return b
}

// WithBackupTool sets the BackupTool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupTool field is set to the value of the last call.
func (b *ManifestsStatusApplyConfiguration) WithBackupTool(value *BackupToolManifestsStatusApplyConfiguration) *ManifestsStatusApplyConfiguration {
	b.BackupTool = value
	return b
}

// WithUserContext puts the entries into the UserContext field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the UserContext field,
// overwriting an existing map entries in UserContext field with the same key.
func (b *ManifestsStatusApplyConfiguration) WithUserContext(entries map[string]string) *ManifestsStatusApplyConfiguration {
	if b.UserContext == nil && len(entries) > 0 {
		b.UserContext = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.UserContext[k] = v
	}
	return b
}
