/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/extensions/v1alpha1"
)

// AddonSpecApplyConfiguration represents an declarative configuration of the AddonSpec type for use
// with apply.
type AddonSpecApplyConfiguration struct {
	Description          *string                                         `json:"description,omitempty"`
	Type                 *v1alpha1.AddonType                             `json:"type,omitempty"`
	Helm                 *HelmTypeInstallSpecApplyConfiguration          `json:"helm,omitempty"`
	DefaultInstallValues []AddonDefaultInstallSpecItemApplyConfiguration `json:"defaultInstallValues,omitempty"`
	InstallSpec          *AddonInstallSpecApplyConfiguration             `json:"install,omitempty"`
	Installable          *InstallableSpecApplyConfiguration              `json:"installable,omitempty"`
	CliPlugins           []CliPluginApplyConfiguration                   `json:"cliPlugins,omitempty"`
}

// AddonSpecApplyConfiguration constructs an declarative configuration of the AddonSpec type for use with
// apply.
func AddonSpec() *AddonSpecApplyConfiguration {
	return &AddonSpecApplyConfiguration{}
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *AddonSpecApplyConfiguration) WithDescription(value string) *AddonSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *AddonSpecApplyConfiguration) WithType(value v1alpha1.AddonType) *AddonSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithHelm sets the Helm field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Helm field is set to the value of the last call.
func (b *AddonSpecApplyConfiguration) WithHelm(value *HelmTypeInstallSpecApplyConfiguration) *AddonSpecApplyConfiguration {
	b.Helm = value
	return b
}

// WithDefaultInstallValues adds the given value to the DefaultInstallValues field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DefaultInstallValues field.
func (b *AddonSpecApplyConfiguration) WithDefaultInstallValues(values ...*AddonDefaultInstallSpecItemApplyConfiguration) *AddonSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDefaultInstallValues")
		}
		b.DefaultInstallValues = append(b.DefaultInstallValues, *values[i])
	}
	return b
}

// WithInstallSpec sets the InstallSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstallSpec field is set to the value of the last call.
func (b *AddonSpecApplyConfiguration) WithInstallSpec(value *AddonInstallSpecApplyConfiguration) *AddonSpecApplyConfiguration {
	b.InstallSpec = value
	return b
}

// WithInstallable sets the Installable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Installable field is set to the value of the last call.
func (b *AddonSpecApplyConfiguration) WithInstallable(value *InstallableSpecApplyConfiguration) *AddonSpecApplyConfiguration {
	b.Installable = value
	return b
}

// WithCliPlugins adds the given value to the CliPlugins field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CliPlugins field.
func (b *AddonSpecApplyConfiguration) WithCliPlugins(values ...*CliPluginApplyConfiguration) *AddonSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCliPlugins")
		}
		b.CliPlugins = append(b.CliPlugins, *values[i])
	}
	return b
}
