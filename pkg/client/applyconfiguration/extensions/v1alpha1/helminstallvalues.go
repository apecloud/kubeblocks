/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// HelmInstallValuesApplyConfiguration represents an declarative configuration of the HelmInstallValues type for use
// with apply.
type HelmInstallValuesApplyConfiguration struct {
	URLs          []string                                  `json:"urls,omitempty"`
	ConfigMapRefs []DataObjectKeySelectorApplyConfiguration `json:"configMapRefs,omitempty"`
	SecretRefs    []DataObjectKeySelectorApplyConfiguration `json:"secretRefs,omitempty"`
	SetValues     []string                                  `json:"setValues,omitempty"`
	SetJSONValues []string                                  `json:"setJSONValues,omitempty"`
}

// HelmInstallValuesApplyConfiguration constructs an declarative configuration of the HelmInstallValues type for use with
// apply.
func HelmInstallValues() *HelmInstallValuesApplyConfiguration {
	return &HelmInstallValuesApplyConfiguration{}
}

// WithURLs adds the given value to the URLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the URLs field.
func (b *HelmInstallValuesApplyConfiguration) WithURLs(values ...string) *HelmInstallValuesApplyConfiguration {
	for i := range values {
		b.URLs = append(b.URLs, values[i])
	}
	return b
}

// WithConfigMapRefs adds the given value to the ConfigMapRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConfigMapRefs field.
func (b *HelmInstallValuesApplyConfiguration) WithConfigMapRefs(values ...*DataObjectKeySelectorApplyConfiguration) *HelmInstallValuesApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConfigMapRefs")
		}
		b.ConfigMapRefs = append(b.ConfigMapRefs, *values[i])
	}
	return b
}

// WithSecretRefs adds the given value to the SecretRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecretRefs field.
func (b *HelmInstallValuesApplyConfiguration) WithSecretRefs(values ...*DataObjectKeySelectorApplyConfiguration) *HelmInstallValuesApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSecretRefs")
		}
		b.SecretRefs = append(b.SecretRefs, *values[i])
	}
	return b
}

// WithSetValues adds the given value to the SetValues field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SetValues field.
func (b *HelmInstallValuesApplyConfiguration) WithSetValues(values ...string) *HelmInstallValuesApplyConfiguration {
	for i := range values {
		b.SetValues = append(b.SetValues, values[i])
	}
	return b
}

// WithSetJSONValues adds the given value to the SetJSONValues field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SetJSONValues field.
func (b *HelmInstallValuesApplyConfiguration) WithSetJSONValues(values ...string) *HelmInstallValuesApplyConfiguration {
	for i := range values {
		b.SetJSONValues = append(b.SetJSONValues, values[i])
	}
	return b
}
