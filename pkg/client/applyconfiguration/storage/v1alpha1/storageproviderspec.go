/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// StorageProviderSpecApplyConfiguration represents an declarative configuration of the StorageProviderSpec type for use
// with apply.
type StorageProviderSpecApplyConfiguration struct {
	CSIDriverName                 *string                             `json:"csiDriverName,omitempty"`
	CSIDriverSecretTemplate       *string                             `json:"csiDriverSecretTemplate,omitempty"`
	StorageClassTemplate          *string                             `json:"storageClassTemplate,omitempty"`
	PersistentVolumeClaimTemplate *string                             `json:"persistentVolumeClaimTemplate,omitempty"`
	ParametersSchema              *ParametersSchemaApplyConfiguration `json:"parametersSchema,omitempty"`
}

// StorageProviderSpecApplyConfiguration constructs an declarative configuration of the StorageProviderSpec type for use with
// apply.
func StorageProviderSpec() *StorageProviderSpecApplyConfiguration {
	return &StorageProviderSpecApplyConfiguration{}
}

// WithCSIDriverName sets the CSIDriverName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSIDriverName field is set to the value of the last call.
func (b *StorageProviderSpecApplyConfiguration) WithCSIDriverName(value string) *StorageProviderSpecApplyConfiguration {
	b.CSIDriverName = &value
	return b
}

// WithCSIDriverSecretTemplate sets the CSIDriverSecretTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSIDriverSecretTemplate field is set to the value of the last call.
func (b *StorageProviderSpecApplyConfiguration) WithCSIDriverSecretTemplate(value string) *StorageProviderSpecApplyConfiguration {
	b.CSIDriverSecretTemplate = &value
	return b
}

// WithStorageClassTemplate sets the StorageClassTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageClassTemplate field is set to the value of the last call.
func (b *StorageProviderSpecApplyConfiguration) WithStorageClassTemplate(value string) *StorageProviderSpecApplyConfiguration {
	b.StorageClassTemplate = &value
	return b
}

// WithPersistentVolumeClaimTemplate sets the PersistentVolumeClaimTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PersistentVolumeClaimTemplate field is set to the value of the last call.
func (b *StorageProviderSpecApplyConfiguration) WithPersistentVolumeClaimTemplate(value string) *StorageProviderSpecApplyConfiguration {
	b.PersistentVolumeClaimTemplate = &value
	return b
}

// WithParametersSchema sets the ParametersSchema field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ParametersSchema field is set to the value of the last call.
func (b *StorageProviderSpecApplyConfiguration) WithParametersSchema(value *ParametersSchemaApplyConfiguration) *StorageProviderSpecApplyConfiguration {
	b.ParametersSchema = value
	return b
}
