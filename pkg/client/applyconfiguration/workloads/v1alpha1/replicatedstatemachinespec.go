/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadsv1alpha1 "github.com/apecloud/kubeblocks/apis/workloads/v1alpha1"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ReplicatedStateMachineSpecApplyConfiguration represents an declarative configuration of the ReplicatedStateMachineSpec type for use
// with apply.
type ReplicatedStateMachineSpecApplyConfiguration struct {
	Replicas                  *int32                                       `json:"replicas,omitempty"`
	Selector                  *v1.LabelSelector                            `json:"selector,omitempty"`
	ServiceName               *string                                      `json:"serviceName,omitempty"`
	Service                   *corev1.Service                              `json:"service,omitempty"`
	AlternativeServices       []corev1.Service                             `json:"alternativeServices,omitempty"`
	Template                  *corev1.PodTemplateSpec                      `json:"template,omitempty"`
	VolumeClaimTemplates      []corev1.PersistentVolumeClaim               `json:"volumeClaimTemplates,omitempty"`
	PodManagementPolicy       *appsv1.PodManagementPolicyType              `json:"podManagementPolicy,omitempty"`
	UpdateStrategy            *appsv1.StatefulSetUpdateStrategy            `json:"updateStrategy,omitempty"`
	Roles                     []ReplicaRoleApplyConfiguration              `json:"roles,omitempty"`
	RoleProbe                 *RoleProbeApplyConfiguration                 `json:"roleProbe,omitempty"`
	MembershipReconfiguration *MembershipReconfigurationApplyConfiguration `json:"membershipReconfiguration,omitempty"`
	MemberUpdateStrategy      *workloadsv1alpha1.MemberUpdateStrategy      `json:"memberUpdateStrategy,omitempty"`
	Credential                *CredentialApplyConfiguration                `json:"credential,omitempty"`
}

// ReplicatedStateMachineSpecApplyConfiguration constructs an declarative configuration of the ReplicatedStateMachineSpec type for use with
// apply.
func ReplicatedStateMachineSpec() *ReplicatedStateMachineSpecApplyConfiguration {
	return &ReplicatedStateMachineSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithReplicas(value int32) *ReplicatedStateMachineSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithSelector(value v1.LabelSelector) *ReplicatedStateMachineSpecApplyConfiguration {
	b.Selector = &value
	return b
}

// WithServiceName sets the ServiceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceName field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithServiceName(value string) *ReplicatedStateMachineSpecApplyConfiguration {
	b.ServiceName = &value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithService(value corev1.Service) *ReplicatedStateMachineSpecApplyConfiguration {
	b.Service = &value
	return b
}

// WithAlternativeServices adds the given value to the AlternativeServices field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AlternativeServices field.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithAlternativeServices(values ...corev1.Service) *ReplicatedStateMachineSpecApplyConfiguration {
	for i := range values {
		b.AlternativeServices = append(b.AlternativeServices, values[i])
	}
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithTemplate(value corev1.PodTemplateSpec) *ReplicatedStateMachineSpecApplyConfiguration {
	b.Template = &value
	return b
}

// WithVolumeClaimTemplates adds the given value to the VolumeClaimTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaimTemplates field.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithVolumeClaimTemplates(values ...corev1.PersistentVolumeClaim) *ReplicatedStateMachineSpecApplyConfiguration {
	for i := range values {
		b.VolumeClaimTemplates = append(b.VolumeClaimTemplates, values[i])
	}
	return b
}

// WithPodManagementPolicy sets the PodManagementPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodManagementPolicy field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithPodManagementPolicy(value appsv1.PodManagementPolicyType) *ReplicatedStateMachineSpecApplyConfiguration {
	b.PodManagementPolicy = &value
	return b
}

// WithUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateStrategy field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithUpdateStrategy(value appsv1.StatefulSetUpdateStrategy) *ReplicatedStateMachineSpecApplyConfiguration {
	b.UpdateStrategy = &value
	return b
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithRoles(values ...*ReplicaRoleApplyConfiguration) *ReplicatedStateMachineSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}

// WithRoleProbe sets the RoleProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RoleProbe field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithRoleProbe(value *RoleProbeApplyConfiguration) *ReplicatedStateMachineSpecApplyConfiguration {
	b.RoleProbe = value
	return b
}

// WithMembershipReconfiguration sets the MembershipReconfiguration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MembershipReconfiguration field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithMembershipReconfiguration(value *MembershipReconfigurationApplyConfiguration) *ReplicatedStateMachineSpecApplyConfiguration {
	b.MembershipReconfiguration = value
	return b
}

// WithMemberUpdateStrategy sets the MemberUpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemberUpdateStrategy field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithMemberUpdateStrategy(value workloadsv1alpha1.MemberUpdateStrategy) *ReplicatedStateMachineSpecApplyConfiguration {
	b.MemberUpdateStrategy = &value
	return b
}

// WithCredential sets the Credential field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Credential field is set to the value of the last call.
func (b *ReplicatedStateMachineSpecApplyConfiguration) WithCredential(value *CredentialApplyConfiguration) *ReplicatedStateMachineSpecApplyConfiguration {
	b.Credential = value
	return b
}
