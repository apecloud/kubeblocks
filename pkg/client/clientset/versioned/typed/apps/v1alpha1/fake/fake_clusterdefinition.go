/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterDefinitions implements ClusterDefinitionInterface
type FakeClusterDefinitions struct {
	Fake *FakeAppsV1alpha1
}

var clusterdefinitionsResource = schema.GroupVersionResource{Group: "apps.kubeblocks.io", Version: "v1alpha1", Resource: "clusterdefinitions"}

var clusterdefinitionsKind = schema.GroupVersionKind{Group: "apps.kubeblocks.io", Version: "v1alpha1", Kind: "ClusterDefinition"}

// Get takes name of the clusterDefinition, and returns the corresponding clusterDefinition object, and an error if there is any.
func (c *FakeClusterDefinitions) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ClusterDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusterdefinitionsResource, name), &v1alpha1.ClusterDefinition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterDefinition), err
}

// List takes label and field selectors, and returns the list of ClusterDefinitions that match those selectors.
func (c *FakeClusterDefinitions) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ClusterDefinitionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusterdefinitionsResource, clusterdefinitionsKind, opts), &v1alpha1.ClusterDefinitionList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterDefinitionList{ListMeta: obj.(*v1alpha1.ClusterDefinitionList).ListMeta}
	for _, item := range obj.(*v1alpha1.ClusterDefinitionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterDefinitions.
func (c *FakeClusterDefinitions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clusterdefinitionsResource, opts))
}

// Create takes the representation of a clusterDefinition and creates it.  Returns the server's representation of the clusterDefinition, and an error, if there is any.
func (c *FakeClusterDefinitions) Create(ctx context.Context, clusterDefinition *v1alpha1.ClusterDefinition, opts v1.CreateOptions) (result *v1alpha1.ClusterDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clusterdefinitionsResource, clusterDefinition), &v1alpha1.ClusterDefinition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterDefinition), err
}

// Update takes the representation of a clusterDefinition and updates it. Returns the server's representation of the clusterDefinition, and an error, if there is any.
func (c *FakeClusterDefinitions) Update(ctx context.Context, clusterDefinition *v1alpha1.ClusterDefinition, opts v1.UpdateOptions) (result *v1alpha1.ClusterDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clusterdefinitionsResource, clusterDefinition), &v1alpha1.ClusterDefinition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterDefinition), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeClusterDefinitions) UpdateStatus(ctx context.Context, clusterDefinition *v1alpha1.ClusterDefinition, opts v1.UpdateOptions) (*v1alpha1.ClusterDefinition, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(clusterdefinitionsResource, "status", clusterDefinition), &v1alpha1.ClusterDefinition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterDefinition), err
}

// Delete takes name of the clusterDefinition and deletes it. Returns an error if one occurs.
func (c *FakeClusterDefinitions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(clusterdefinitionsResource, name, opts), &v1alpha1.ClusterDefinition{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterDefinitions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clusterdefinitionsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterDefinitionList{})
	return err
}

// Patch applies the patch and returns the patched clusterDefinition.
func (c *FakeClusterDefinitions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ClusterDefinition, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clusterdefinitionsResource, name, pt, data, subresources...), &v1alpha1.ClusterDefinition{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterDefinition), err
}
