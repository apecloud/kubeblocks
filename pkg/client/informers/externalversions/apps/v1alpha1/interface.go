/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	internalinterfaces "github.com/apecloud/kubeblocks/pkg/client/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// BackupPolicyTemplates returns a BackupPolicyTemplateInformer.
	BackupPolicyTemplates() BackupPolicyTemplateInformer
	// Clusters returns a ClusterInformer.
	Clusters() ClusterInformer
	// ClusterDefinitions returns a ClusterDefinitionInformer.
	ClusterDefinitions() ClusterDefinitionInformer
	// ClusterVersions returns a ClusterVersionInformer.
	ClusterVersions() ClusterVersionInformer
	// ComponentClassDefinitions returns a ComponentClassDefinitionInformer.
	ComponentClassDefinitions() ComponentClassDefinitionInformer
	// ComponentResourceConstraints returns a ComponentResourceConstraintInformer.
	ComponentResourceConstraints() ComponentResourceConstraintInformer
	// ConfigConstraints returns a ConfigConstraintInformer.
	ConfigConstraints() ConfigConstraintInformer
	// OpsRequests returns a OpsRequestInformer.
	OpsRequests() OpsRequestInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// BackupPolicyTemplates returns a BackupPolicyTemplateInformer.
func (v *version) BackupPolicyTemplates() BackupPolicyTemplateInformer {
	return &backupPolicyTemplateInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// Clusters returns a ClusterInformer.
func (v *version) Clusters() ClusterInformer {
	return &clusterInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// ClusterDefinitions returns a ClusterDefinitionInformer.
func (v *version) ClusterDefinitions() ClusterDefinitionInformer {
	return &clusterDefinitionInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ClusterVersions returns a ClusterVersionInformer.
func (v *version) ClusterVersions() ClusterVersionInformer {
	return &clusterVersionInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ComponentClassDefinitions returns a ComponentClassDefinitionInformer.
func (v *version) ComponentClassDefinitions() ComponentClassDefinitionInformer {
	return &componentClassDefinitionInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ComponentResourceConstraints returns a ComponentResourceConstraintInformer.
func (v *version) ComponentResourceConstraints() ComponentResourceConstraintInformer {
	return &componentResourceConstraintInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// ConfigConstraints returns a ConfigConstraintInformer.
func (v *version) ConfigConstraints() ConfigConstraintInformer {
	return &configConstraintInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// OpsRequests returns a OpsRequestInformer.
func (v *version) OpsRequests() OpsRequestInformer {
	return &opsRequestInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
