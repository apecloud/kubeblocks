/*
Copyright (C) 2022-2024 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/apecloud/kubeblocks/apis/apps/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShardingDefinitionLister helps list ShardingDefinitions.
// All objects returned here must be treated as read-only.
type ShardingDefinitionLister interface {
	// List lists all ShardingDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ShardingDefinition, err error)
	// Get retrieves the ShardingDefinition from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ShardingDefinition, error)
	ShardingDefinitionListerExpansion
}

// shardingDefinitionLister implements the ShardingDefinitionLister interface.
type shardingDefinitionLister struct {
	indexer cache.Indexer
}

// NewShardingDefinitionLister returns a new ShardingDefinitionLister.
func NewShardingDefinitionLister(indexer cache.Indexer) ShardingDefinitionLister {
	return &shardingDefinitionLister{indexer: indexer}
}

// List lists all ShardingDefinitions in the indexer.
func (s *shardingDefinitionLister) List(selector labels.Selector) (ret []*v1.ShardingDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ShardingDefinition))
	})
	return ret, err
}

// Get retrieves the ShardingDefinition from the index for a given name.
func (s *shardingDefinitionLister) Get(name string) (*v1.ShardingDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("shardingdefinition"), name)
	}
	return obj.(*v1.ShardingDefinition), nil
}
