/*
Copyright (C) 2022-2023 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpsRequestLister helps list OpsRequests.
// All objects returned here must be treated as read-only.
type OpsRequestLister interface {
	// List lists all OpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpsRequest, err error)
	// OpsRequests returns an object that can list and get OpsRequests.
	OpsRequests(namespace string) OpsRequestNamespaceLister
	OpsRequestListerExpansion
}

// opsRequestLister implements the OpsRequestLister interface.
type opsRequestLister struct {
	indexer cache.Indexer
}

// NewOpsRequestLister returns a new OpsRequestLister.
func NewOpsRequestLister(indexer cache.Indexer) OpsRequestLister {
	return &opsRequestLister{indexer: indexer}
}

// List lists all OpsRequests in the indexer.
func (s *opsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.OpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpsRequest))
	})
	return ret, err
}

// OpsRequests returns an object that can list and get OpsRequests.
func (s *opsRequestLister) OpsRequests(namespace string) OpsRequestNamespaceLister {
	return opsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpsRequestNamespaceLister helps list and get OpsRequests.
// All objects returned here must be treated as read-only.
type OpsRequestNamespaceLister interface {
	// List lists all OpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpsRequest, err error)
	// Get retrieves the OpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpsRequest, error)
	OpsRequestNamespaceListerExpansion
}

// opsRequestNamespaceLister implements the OpsRequestNamespaceLister
// interface.
type opsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpsRequests in the indexer for a given namespace.
func (s opsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpsRequest))
	})
	return ret, err
}

// Get retrieves the OpsRequest from the indexer for a given namespace and name.
func (s opsRequestNamespaceLister) Get(name string) (*v1alpha1.OpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("opsrequest"), name)
	}
	return obj.(*v1alpha1.OpsRequest), nil
}
