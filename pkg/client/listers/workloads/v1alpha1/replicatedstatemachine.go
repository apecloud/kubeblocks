/*
Copyright (C) 2022-2024 ApeCloud Co., Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apecloud/kubeblocks/apis/workloads/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicatedStateMachineLister helps list ReplicatedStateMachines.
// All objects returned here must be treated as read-only.
type ReplicatedStateMachineLister interface {
	// List lists all ReplicatedStateMachines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStateMachine, err error)
	// ReplicatedStateMachines returns an object that can list and get ReplicatedStateMachines.
	ReplicatedStateMachines(namespace string) ReplicatedStateMachineNamespaceLister
	ReplicatedStateMachineListerExpansion
}

// replicatedStateMachineLister implements the ReplicatedStateMachineLister interface.
type replicatedStateMachineLister struct {
	indexer cache.Indexer
}

// NewReplicatedStateMachineLister returns a new ReplicatedStateMachineLister.
func NewReplicatedStateMachineLister(indexer cache.Indexer) ReplicatedStateMachineLister {
	return &replicatedStateMachineLister{indexer: indexer}
}

// List lists all ReplicatedStateMachines in the indexer.
func (s *replicatedStateMachineLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStateMachine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicatedStateMachine))
	})
	return ret, err
}

// ReplicatedStateMachines returns an object that can list and get ReplicatedStateMachines.
func (s *replicatedStateMachineLister) ReplicatedStateMachines(namespace string) ReplicatedStateMachineNamespaceLister {
	return replicatedStateMachineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicatedStateMachineNamespaceLister helps list and get ReplicatedStateMachines.
// All objects returned here must be treated as read-only.
type ReplicatedStateMachineNamespaceLister interface {
	// List lists all ReplicatedStateMachines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStateMachine, err error)
	// Get retrieves the ReplicatedStateMachine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReplicatedStateMachine, error)
	ReplicatedStateMachineNamespaceListerExpansion
}

// replicatedStateMachineNamespaceLister implements the ReplicatedStateMachineNamespaceLister
// interface.
type replicatedStateMachineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicatedStateMachines in the indexer for a given namespace.
func (s replicatedStateMachineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStateMachine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicatedStateMachine))
	})
	return ret, err
}

// Get retrieves the ReplicatedStateMachine from the indexer for a given namespace and name.
func (s replicatedStateMachineNamespaceLister) Get(name string) (*v1alpha1.ReplicatedStateMachine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicatedstatemachine"), name)
	}
	return obj.(*v1alpha1.ReplicatedStateMachine), nil
}
