// /*
// Copyright (C) 2022-2023 ApeCloud Co., Ltd
//
// This file is part of KubeBlocks project
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/pkg/configuration/proto (interfaces: ReconfigureClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/apecloud/kubeblocks/pkg/configuration/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockReconfigureClient is a mock of ReconfigureClient interface.
type MockReconfigureClient struct {
	ctrl     *gomock.Controller
	recorder *MockReconfigureClientMockRecorder
}

// MockReconfigureClientMockRecorder is the mock recorder for MockReconfigureClient.
type MockReconfigureClientMockRecorder struct {
	mock *MockReconfigureClient
}

// NewMockReconfigureClient creates a new mock instance.
func NewMockReconfigureClient(ctrl *gomock.Controller) *MockReconfigureClient {
	mock := &MockReconfigureClient{ctrl: ctrl}
	mock.recorder = &MockReconfigureClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconfigureClient) EXPECT() *MockReconfigureClientMockRecorder {
	return m.recorder
}

// OnlineUpgradeParams mocks base method.
func (m *MockReconfigureClient) OnlineUpgradeParams(arg0 context.Context, arg1 *proto.OnlineUpgradeParamsRequest, arg2 ...grpc.CallOption) (*proto.OnlineUpgradeParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnlineUpgradeParams", varargs...)
	ret0, _ := ret[0].(*proto.OnlineUpgradeParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnlineUpgradeParams indicates an expected call of OnlineUpgradeParams.
func (mr *MockReconfigureClientMockRecorder) OnlineUpgradeParams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlineUpgradeParams", reflect.TypeOf((*MockReconfigureClient)(nil).OnlineUpgradeParams), varargs...)
}

// StopContainer mocks base method.
func (m *MockReconfigureClient) StopContainer(arg0 context.Context, arg1 *proto.StopContainerRequest, arg2 ...grpc.CallOption) (*proto.StopContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContainer", varargs...)
	ret0, _ := ret[0].(*proto.StopContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockReconfigureClientMockRecorder) StopContainer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockReconfigureClient)(nil).StopContainer), varargs...)
}
