/*
Copyright (C) 2022-2024 ApeCloud Co., Ltd

This file is part of KubeBlocks project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package configuration

import (
	"fmt"
	"strconv"

	corev1 "k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	appsv1alpha1 "github.com/apecloud/kubeblocks/apis/apps/v1alpha1"
	"github.com/apecloud/kubeblocks/pkg/controller/component"
)

// TODO: remove these after addons are migrated to the new API.

// DynamicComponentInfo records information dynamically generated by component controller
type DynamicComponentInfo struct {
	Name       string             `json:"name"`
	Containers []corev1.Container `json:"containers,omitempty"`
}

// buildDynamicCompInfos builds the dynamic comp infos which auto-generated by component controller.
// currently, only build components info with same componentDefinition.
func buildDynamicCompInfos(cache []client.Object, podSpec *corev1.PodSpec, synthesizeComp *component.SynthesizedComponent) *[]DynamicComponentInfo {
	if podSpec == nil {
		return nil
	}
	// HACK for hostNetwork
	// TODO: define the api to inject dynamic info of the cluster components
	var dyCompInfos []DynamicComponentInfo
	for _, v := range cache {
		comp, ok := v.(*appsv1alpha1.Component)
		if !ok {
			continue
		}
		if comp.Spec.CompDef == "" || comp.Spec.CompDef != synthesizeComp.CompDefName {
			continue
		}
		var containers []corev1.Container
		// build containers ports which generated by component controller.
		for _, container := range podSpec.Containers {
			var ports []corev1.ContainerPort
			for _, p := range container.Ports {
				generatePortName := fmt.Sprintf("%s-%s-%s", comp.Name, container.Name, p.Name)
				if hostPort, ok := comp.Annotations[generatePortName]; ok {
					// replace the hostPort with auto-allocation port
					hostPortInt, _ := strconv.ParseInt(hostPort, 10, 32)
					p.HostPort = int32(hostPortInt)
					ports = append(ports, p)
				}
			}
			if len(ports) > 0 {
				containers = append(containers, corev1.Container{Name: container.Name, Ports: ports})
			}
		}
		if len(containers) > 0 {
			dyCompInfos = append(dyCompInfos, DynamicComponentInfo{Name: comp.Name, Containers: containers})
		}
	}
	return &dyCompInfos
}
