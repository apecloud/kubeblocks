// /*
// Copyright (C) 2022-2023 ApeCloud Co., Ltd
//
// This file is part of KubeBlocks project
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apecloud/kubeblocks/pkg/lorry/dcs (interfaces: DCS)

// Package dcs is a generated GoMock package.
package dcs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDCS is a mock of DCS interface.
type MockDCS struct {
	ctrl     *gomock.Controller
	recorder *MockDCSMockRecorder
}

// MockDCSMockRecorder is the mock recorder for MockDCS.
type MockDCSMockRecorder struct {
	mock *MockDCS
}

// NewMockDCS creates a new mock instance.
func NewMockDCS(ctrl *gomock.Controller) *MockDCS {
	mock := &MockDCS{ctrl: ctrl}
	mock.recorder = &MockDCSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCS) EXPECT() *MockDCSMockRecorder {
	return m.recorder
}

// AddCurrentMember mocks base method.
func (m *MockDCS) AddCurrentMember() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCurrentMember")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCurrentMember indicates an expected call of AddCurrentMember.
func (mr *MockDCSMockRecorder) AddCurrentMember() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrentMember", reflect.TypeOf((*MockDCS)(nil).AddCurrentMember))
}

// AttemptAcquireLease mocks base method.
func (m *MockDCS) AttemptAcquireLease() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttemptAcquireLease")
	ret0, _ := ret[0].(error)
	return ret0
}

// AttemptAcquireLease indicates an expected call of AttemptAcquireLease.
func (mr *MockDCSMockRecorder) AttemptAcquireLease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttemptAcquireLease", reflect.TypeOf((*MockDCS)(nil).AttemptAcquireLease))
}

// CreateLease mocks base method.
func (m *MockDCS) CreateLease() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLease")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLease indicates an expected call of CreateLease.
func (mr *MockDCSMockRecorder) CreateLease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLease", reflect.TypeOf((*MockDCS)(nil).CreateLease))
}

// CreateSwitchover mocks base method.
func (m *MockDCS) CreateSwitchover(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwitchover", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSwitchover indicates an expected call of CreateSwitchover.
func (mr *MockDCSMockRecorder) CreateSwitchover(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwitchover", reflect.TypeOf((*MockDCS)(nil).CreateSwitchover), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockDCS) DeleteCluster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCluster")
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockDCSMockRecorder) DeleteCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockDCS)(nil).DeleteCluster))
}

// DeleteSwitchover mocks base method.
func (m *MockDCS) DeleteSwitchover() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSwitchover")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSwitchover indicates an expected call of DeleteSwitchover.
func (mr *MockDCSMockRecorder) DeleteSwitchover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwitchover", reflect.TypeOf((*MockDCS)(nil).DeleteSwitchover))
}

// GetCluster mocks base method.
func (m *MockDCS) GetCluster() (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster")
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockDCSMockRecorder) GetCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockDCS)(nil).GetCluster))
}

// GetClusterFromCache mocks base method.
func (m *MockDCS) GetClusterFromCache() *Cluster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterFromCache")
	ret0, _ := ret[0].(*Cluster)
	return ret0
}

// GetClusterFromCache indicates an expected call of GetClusterFromCache.
func (mr *MockDCSMockRecorder) GetClusterFromCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterFromCache", reflect.TypeOf((*MockDCS)(nil).GetClusterFromCache))
}

// GetClusterName mocks base method.
func (m *MockDCS) GetClusterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClusterName indicates an expected call of GetClusterName.
func (mr *MockDCSMockRecorder) GetClusterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterName", reflect.TypeOf((*MockDCS)(nil).GetClusterName))
}

// GetHaConfig mocks base method.
func (m *MockDCS) GetHaConfig() (*HaConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHaConfig")
	ret0, _ := ret[0].(*HaConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHaConfig indicates an expected call of GetHaConfig.
func (mr *MockDCSMockRecorder) GetHaConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHaConfig", reflect.TypeOf((*MockDCS)(nil).GetHaConfig))
}

// GetLeader mocks base method.
func (m *MockDCS) GetLeader() (*Leader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeader")
	ret0, _ := ret[0].(*Leader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeader indicates an expected call of GetLeader.
func (mr *MockDCSMockRecorder) GetLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeader", reflect.TypeOf((*MockDCS)(nil).GetLeader))
}

// GetMembers mocks base method.
func (m *MockDCS) GetMembers() ([]Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers")
	ret0, _ := ret[0].([]Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockDCSMockRecorder) GetMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockDCS)(nil).GetMembers))
}

// GetSwitchover mocks base method.
func (m *MockDCS) GetSwitchover() (*Switchover, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwitchover")
	ret0, _ := ret[0].(*Switchover)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitchover indicates an expected call of GetSwitchover.
func (mr *MockDCSMockRecorder) GetSwitchover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitchover", reflect.TypeOf((*MockDCS)(nil).GetSwitchover))
}

// HasLease mocks base method.
func (m *MockDCS) HasLease() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLease")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLease indicates an expected call of HasLease.
func (mr *MockDCSMockRecorder) HasLease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLease", reflect.TypeOf((*MockDCS)(nil).HasLease))
}

// Initialize mocks base method.
func (m *MockDCS) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDCSMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDCS)(nil).Initialize))
}

// IsLeaseExist mocks base method.
func (m *MockDCS) IsLeaseExist() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLeaseExist")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLeaseExist indicates an expected call of IsLeaseExist.
func (mr *MockDCSMockRecorder) IsLeaseExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeaseExist", reflect.TypeOf((*MockDCS)(nil).IsLeaseExist))
}

// ReleaseLease mocks base method.
func (m *MockDCS) ReleaseLease() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLease")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockDCSMockRecorder) ReleaseLease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockDCS)(nil).ReleaseLease))
}

// ResetCluster mocks base method.
func (m *MockDCS) ResetCluster() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetCluster")
}

// ResetCluster indicates an expected call of ResetCluster.
func (mr *MockDCSMockRecorder) ResetCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCluster", reflect.TypeOf((*MockDCS)(nil).ResetCluster))
}

// UpdateHaConfig mocks base method.
func (m *MockDCS) UpdateHaConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHaConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHaConfig indicates an expected call of UpdateHaConfig.
func (mr *MockDCSMockRecorder) UpdateHaConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHaConfig", reflect.TypeOf((*MockDCS)(nil).UpdateHaConfig))
}

// UpdateLease mocks base method.
func (m *MockDCS) UpdateLease() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLease")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLease indicates an expected call of UpdateLease.
func (mr *MockDCSMockRecorder) UpdateLease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLease", reflect.TypeOf((*MockDCS)(nil).UpdateLease))
}
