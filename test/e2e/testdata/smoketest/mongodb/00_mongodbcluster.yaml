---
# Source: mongodb/templates/configtemplate.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb5.0-config-template
  labels:
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
data:
  mongodb.conf: |-
    # mongod.conf
    # for documentation of all options, see:
    #   http://docs.mongodb.org/manual/reference/configuration-options/
    
    {{- $log_root := getVolumePathByName ( index $.podSpec.containers 0 ) "log" }}
    {{- $mongodb_root := getVolumePathByName ( index $.podSpec.containers 0 ) "data" }}
    {{- $mongodb_port_info := getPortByName ( index $.podSpec.containers 0 ) "mongodb" }}
    {{- $phy_memory := getContainerMemory ( index $.podSpec.containers 0 ) }}
    
    # require port
    {{- $mongodb_port := 27017 }}
    {{- if $mongodb_port_info }}
    {{- $mongodb_port = $mongodb_port_info.containerPort }}
    {{- end }}
    
    # where and how to store data.
    storage:
      dbPath: {{ $mongodb_root }}/db
      journal:
        enabled: true
      directoryPerDB: true
    
    # where to write logging data.
    systemLog:
      destination: file
      quiet: false
      logAppend: true
      logRotate: reopen
      path: {{ $mongodb_root }}/logs/mongodb.log
      verbosity: 0
    
    # network interfaces
    net:
      port: {{ $mongodb_port }}
      unixDomainSocket:
        enabled: false
        pathPrefix: {{ $mongodb_root }}/tmp
      ipv6: false
      bindIpAll: true
      #bindIp:
    
    # replica set options
    replication:
      replSetName: replicaset
      enableMajorityReadConcern: true
    
    # sharding options
    #sharding:
      #clusterRole:
    
    # process management options
    processManagement:
       fork: false
       pidFilePath: {{ $mongodb_root }}/tmp/mongodb.pid
    
    # set parameter options
    setParameter:
       enableLocalhostAuthBypass: true
    
    # security options
    security:
      authorization: enabled
      keyFile: /etc/mongodb/keyfile
    
  keyfile: |-
    {{ randAscii 64 | b64enc }}
---
# Source: mongodb/templates/metrics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-metrics-config
  labels:
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
data:
  metrics-config.yaml: "exporters:\n  prometheus:\n    const_labels: []\n    enable_open_metrics: false\n    endpoint: 0.0.0.0:9216\n    metric_expiration: 30s\n    resource_to_telemetry_conversion:\n      enabled: true\n    send_timestamps: false\nextensions:\n  health_check:\n    check_collector_pipeline:\n      enabled: true\n      exporter_failure_threshold: 5\n      interval: 2m\n    endpoint: 0.0.0.0:13133\n    path: /health/status\n  memory_ballast:\n    size_mib: 512\nprocessors:\n  batch:\n    timeout: 5s\n  memory_limiter:\n    check_interval: 10s\n    limit_mib: 1024\n    spike_limit_mib: 256\nreceivers:\n  apecloudmongodb:\n    collect-all: true\n    collection_interval: 15s\n    compatible-mode: true\n    direct-connect: true\n    global-conn-pool: false\n    log-level: info\n    uri: mongodb://${env:MONGODB_ROOT_USER}:${env:MONGODB_ROOT_PASSWORD}@127.0.0.1:27017/admin?ssl=false&authSource=admin\nservice:\n  extensions:\n  - memory_ballast\n  - health_check\n  pipelines:\n    metrics:\n      exporters:\n      - prometheus\n      processors:\n      - memory_limiter\n      receivers:\n      - apecloudmongodb\n  telemetry:\n    logs:\n      level: info\n    metrics:\n      address: 0.0.0.0:8888"
---
# Source: mongodb/templates/scriptstemplate.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-scripts
  labels:
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
data:
  mongos-setup.sh: |-
    #!/bin/sh
    
    PORT=27018 
    CONFIG_SVR_NAME=$KB_CLUSTER_NAME"-configsvr"
    DOMAIN=$CONFIG_SVR_NAME"-headless."$KB_NAMESPACE".svc.cluster.local"
    mongos --bind_ip_all --configdb $CONFIG_SVR_NAME/$CONFIG_SVR_NAME"-0."$DOMAIN:$PORT,$CONFIG_SVR_NAME"-1."$DOMAIN:$PORT,$CONFIG_SVR_NAME"-2."$DOMAIN:$PORT
  replicaset-setup.sh: |-
    #!/bin/sh
    
    {{- $mongodb_root := getVolumePathByName ( index $.podSpec.containers 0 ) "data" }}
    {{- $mongodb_port_info := getPortByName ( index $.podSpec.containers 0 ) "mongodb" }}
    
    # require port
    {{- $mongodb_port := 27017 }}
    {{- if $mongodb_port_info }}
    {{- $mongodb_port = $mongodb_port_info.containerPort }}
    {{- end }}
    
    PORT={{ $mongodb_port }}
    MONGODB_ROOT={{ $mongodb_root }}
    RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
    RPL_SET_NAME=${RPL_SET_NAME%-};
    mkdir -p $MONGODB_ROOT/db
    mkdir -p $MONGODB_ROOT/logs
    mkdir -p $MONGODB_ROOT/tmp
    MODE=$1
    mongod $MODE --bind_ip_all --port $PORT --replSet $RPL_SET_NAME  --config /etc/mongodb/mongodb.conf
    
  replicaset-post-start.sh: |-
    #!/bin/sh
    # usage: replicaset-post-start.sh type_name is_configsvr
    # type_name: component.type, in uppercase
    # is_configsvr: true or false, default false
    {{- $mongodb_root := getVolumePathByName ( index $.podSpec.containers 0 ) "data" }}
    {{- $mongodb_port_info := getPortByName ( index $.podSpec.containers 0 ) "mongodb" }}
    
    # require port
    {{- $mongodb_port := 27017 }}
    {{- if $mongodb_port_info }}
    {{- $mongodb_port = $mongodb_port_info.containerPort }}
    {{- end }}
    
    set -e
    PORT={{ $mongodb_port }}
    MONGODB_ROOT={{ $mongodb_root }}
    INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+\$");
    INDEX=${INDEX#-};
    if [ $INDEX -ne 0 ]; then exit 0; fi
    
    until mongosh --quiet --port $PORT --eval "print('ready')"; do sleep 1; done
    
    RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
    RPL_SET_NAME=${RPL_SET_NAME%-};
    
    TYPE_NAME=$1
    IS_CONFIGSVR=$2
    MEMBERS=""
    i=0
    while [ $i -lt $(eval echo \$KB_"$TYPE_NAME"_N) ]; do
      host=$(eval echo \$KB_"$TYPE_NAME"_"$i"_HOSTNAME)
      host=$host"."$KB_NAMESPACE".svc.cluster.local"
      until mongosh --quiet --port $PORT --host $host --eval "print('peer is ready')"; do sleep 1; done
      if [ $i -eq 0 ]; then 
        MEMBERS="{_id: $i, host: \"$host:$PORT\", priority:2}"
      else 
        MEMBERS="$MEMBERS,{_id: $i, host: \"$host:$PORT\"}"
      fi
      i=$(( i + 1))
    done
    CONFIGSVR=""
    if [ ""$IS_CONFIGSVR = "true" ]; then CONFIGSVR="configsvr: true,"; fi
    
    until is_inited=$(mongosh --quiet --port $PORT --eval "rs.status().ok" -u root --password $MONGODB_ROOT_PASSWORD || mongosh --quiet --port $PORT --eval "try { rs.status().ok } catch (e) { 0 }") ; do sleep 1; done
    if [ $is_inited -eq 1 ]; then
      exit 0
    fi;
    mongosh --quiet --port $PORT --eval "rs.initiate({_id: \"$RPL_SET_NAME\", $CONFIGSVR members: [$MEMBERS]})";
    
    (until mongosh --quiet --port $PORT --eval "rs.isMaster().isWritablePrimary"|grep true; do sleep 1; done;
    echo "create user";
    mongosh --quiet --port $PORT admin --eval "db.createUser({ user: \"$MONGODB_ROOT_USER\", pwd: \"$MONGODB_ROOT_PASSWORD\", roles: [{role: 'root', db: 'admin'}] })") </dev/null  >/dev/null 2>&1 &
    
  shard-agent.sh: |-
    #!/bin/sh
    
    INDEX=$(echo $KB_POD_NAME | grep -o "\-[0-9]\+\$");
    INDEX=${INDEX#-};
    if [ $INDEX -ne 0 ]; then
      trap : TERM INT; (while true; do sleep 1000; done) & wait
    fi

    # wait main container ready
    PORT=27018
    until mongosh --quiet --port $PORT --eval "rs.status().ok"; do sleep 1; done
    # add shard to mongos
    SHARD_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
    SHARD_NAME=${SHARD_NAME%-};
    DOMAIN=$SHARD_NAME"-headless."$KB_NAMESPACE".svc.cluster.local"
    MONGOS_HOST=$KB_CLUSTER_NAME"-mongos"
    MONGOS_PORT=27017
    SHARD_CONFIG=$SHARD_NAME/$SHARD_NAME"-0."$DOMAIN:$PORT,$SHARD_NAME"-1."$DOMAIN:$PORT,$SHARD_NAME"-2."$DOMAIN:$PORT
    until mongosh --quiet --host $MONGOS_HOST --port $MONGOS_PORT --eval "print('service is ready')"; do sleep 1; done
    mongosh --quiet --host $MONGOS_HOST --port $MONGOS_PORT --eval "sh.addShard(\"$SHARD_CONFIG\")"

    trap : TERM INT; (while true; do sleep 1000; done) & wait
---
# Source: mongodb/templates/backuppolicytemplate.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: BackupPolicyTemplate
metadata:
  name: mongodb-backup-policy-template
  labels:
    clusterdefinition.kubeblocks.io/name: mongodb
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: mongodb
  backupPolicies:
  - componentDefRef: replicaset
    ttl: 7d
    schedule:
      baseBackup:
        type: full
        enable: false
        cronExpression: "0 18 * * 0"
    snapshot:
      target:
        role: leader
        connectionCredentialKey:
          passwordKey: password
          usernameKey: username
    full:
      backupToolName: xtrabackup-apecloud-mysql
---
# Source: mongodb/templates/backuptool.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: BackupTool
metadata:
  name: mongodb-physical-backup-tool
  labels:
    clusterdefinition.kubeblocks.io/name: mongodb
spec:
  image: mongo:5.0.14
  deployKind: job
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 128Mi
  env:
    - name: DATA_DIR
      value: /data/mongodb/db
  physical:
    restoreCommands:
      - |
        set -e
        mkdir -p ${DATA_DIR}
        res=`ls -A ${DATA_DIR}`
        if [ ! -z ${res} ]; then
          echo "${DATA_DIR} is not empty! Please make sure that the directory is empty before restoring the backup."
          exit 1
        fi
        tar -xvf ${BACKUP_DIR}/${BACKUP_NAME}.tar.gz -C ${DATA_DIR}/../
        mv ${DATA_DIR}/../${BACKUP_NAME}/* ${DATA_DIR}
        PORT=27017
        MONGODB_ROOT=/data/mongodb
        RPL_SET_NAME=$(echo $KB_POD_NAME | grep -o ".*-");
        RPL_SET_NAME=${RPL_SET_NAME%-};
        mkdir -p $MONGODB_ROOT/db
        mkdir -p $MONGODB_ROOT/logs
        mkdir -p $MONGODB_ROOT/tmp
        MODE=$1
        mongod $MODE --bind_ip_all --port $PORT --dbpath $MONGODB_ROOT/db --directoryperdb --logpath $MONGODB_ROOT/logs/mongodb.log  --logappend --pidfilepath $MONGODB_ROOT/tmp/mongodb.pid&
        until mongosh --quiet --port $PORT --host $host --eval "print('peer is ready')"; do sleep 1; done
        PID=`cat $MONGODB_ROOT/tmp/mongodb.pid`

        mongosh --quiet --port $PORT local --eval "db.system.replset.deleteOne({})"
        mongosh --quiet --port $PORT local --eval "db.system.replset.find()"
        mongosh --quiet --port $PORT admin --eval 'db.dropUser("root", {w: "majority", wtimeout: 4000})' || true
        kill $PID
        wait $PID
    incrementalRestoreCommands: []
  logical:
    restoreCommands: []
    incrementalRestoreCommands: []
  backupCommands:
    - |
     set -e
     mkdir -p ${BACKUP_DIR}/${BACKUP_NAME}
     cp -R ${DATA_DIR}/* ${BACKUP_DIR}/${BACKUP_NAME}/
     cd  ${BACKUP_DIR}
     tar -czvf ${BACKUP_NAME}.tar.gz ./${BACKUP_NAME}
     rm -rf ${BACKUP_DIR}/${BACKUP_NAME}
  incrementalBackupCommands: []
---
# Source: mongodb/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: mongodb
  labels:
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  type: mongodb
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_tcp-monogdb)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_tcp-monogdb)"
    headlessEndpoint: "$(KB_CLUSTER_COMP_NAME)-0.$(HEADLESS_SVC_FQDN):$(SVC_PORT_tcp-monogdb)"
    headlessHost: "$(POD_NAME_PREFIX)-0.$(HEADLESS_SVC_FQDN)"
    headlessPort: "$(SVC_PORT_tcp-monogdb)"
  componentDefs:
    - name: replicaset
      characterType: mongodb
      scriptSpecs:
        - name: mongodb-scripts
          templateRef: mongodb-scripts
          volumeName: scripts
          namespace: default
          defaultMode: 493
      configSpecs:
        - name: mongodb-config
          templateRef: mongodb5.0-config-template
          namespace: default
          volumeName: mongodb-config
          constraintRef: mongodb-config-constraints
          keys:
            - mongodb.conf
          defaultMode: 256
        - name: mongodb-metrics-config
          templateRef: mongodb-metrics-config
          namespace: default
          volumeName: mongodb-metrics-config
          defaultMode: 0777
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: 9216
      logConfigs:
        - name: running
          filePathPattern: /data/mongodb/log/mongodb.log*
      workloadType: Consensus
      consensusSpec:
        leader:
          name: "primary"
          accessMode: ReadWrite
        followers:
          - name: "secondary"
            accessMode: Readonly
        updateStrategy: Serial
      probes:
        roleProbe:
          periodSeconds: 2
          failureThreshold: 3
      service:
        ports:
          - protocol: TCP
            port: 27017
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: mongodb
            ports:
              - name: mongodb
                protocol: TCP
                containerPort: 27017
            command:
              - /scripts/replicaset-setup.sh
            env:
              - name: MONGODB_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MONGODB_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
            lifecycle:
              postStart:
                exec:
                  command:
                    - /scripts/replicaset-post-start.sh
                    - REPLICASET
            volumeMounts:
              - mountPath: /data/mongodb
                name: data
              - mountPath: /etc/mongodb/mongodb.conf
                name: mongodb-config
                subPath: mongodb.conf
              - mountPath: /etc/mongodb/keyfile
                name: mongodb-config
                subPath: keyfile
              - name: scripts
                mountPath: /scripts/replicaset-setup.sh
                subPath: replicaset-setup.sh
              - name: scripts
                mountPath: /scripts/replicaset-post-start.sh
                subPath: replicaset-post-start.sh
          - name: metrics
            image:  registry.cn-hangzhou.aliyuncs.com/apecloud/agamotto:0.0.4
            imagePullPolicy: "IfNotPresent"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
            env:
              - name: MONGODB_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MONGODB_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
            command:
              - "/bin/agamotto"
              - "--config=/opt/conf/metrics-config.yaml"
            ports:
              - name: http-metrics
                containerPort: 9216
            volumeMounts:
              - name: mongodb-metrics-config
                mountPath: /opt/conf
    - name: mongos
      scriptSpecs:
        - name: mongodb-scripts
          templateRef: mongodb-scripts
          volumeName: scripts
          namespace: default
          defaultMode: 493
      workloadType: Stateless
      service:
        ports:
          - name: mongos
            port: 27017
            targetPort: mongos
      podSpec:
        containers:
          - name: mongos
            ports:
              - name: mongos
                containerPort: 27017
            command:
              - /scripts/mongos-setup.sh
            volumeMounts:
              - name: scripts
                mountPath: /scripts/mongos-setup.sh
                subPath: mongos-setup.sh
    - name: configsvr
      scriptSpecs:
        - name: mongodb-scripts
          templateRef: mongodb-scripts
          volumeName: scripts
          namespace: default
          defaultMode: 493
      characterType: mongodb
      workloadType: Consensus
      consensusSpec:
        leader:
          name: "primary"
          accessMode: ReadWrite
        followers:
          - name: "secondary"
            accessMode: Readonly
        updateStrategy: Serial
      probes:
        roleProbe:
          periodSeconds: 2
          failureThreshold: 3
      service:
        ports:
          - name: configsvr
            port: 27018
            targetPort: configsvr
      podSpec:
        containers:
          - name: configsvr
            ports:
              - name: configsvr
                containerPort: 27018
            command:
              - /scripts/replicaset-setup.sh
              - --configsvr
            lifecycle:
              postStart:
                exec:
                  command:
                    - /scripts/replicaset-post-start.sh
                    - CONFIGSVR
                    - "true"
            volumeMounts:
              - name: scripts
                mountPath: /scripts/replicaset-setup.sh
                subPath: replicaset-setup.sh
              - name: scripts
                mountPath: /scripts/replicaset-post-start.sh
                subPath: replicaset-post-start.sh
    - name: shard
      scriptSpecs:
        - name: mongodb-scripts
          templateRef: mongodb-scripts
          volumeName: scripts
          namespace: default
          defaultMode: 493
      characterType: mongodb
      workloadType: Consensus
      consensusSpec:
        leader:
          name: "primary"
          accessMode: ReadWrite
        followers:
          - name: "secondary"
            accessMode: Readonly
        updateStrategy: BestEffortParallel
      probes:
        roleProbe:
          periodSeconds: 2
          failureThreshold: 3
      service:
        ports:
          - name: shard
            port: 27018
            targetPort: shard
      podSpec:
        containers:
          - name: shard
            ports:
              - name: shard
                containerPort: 27018
            command:
              - /scripts/replicaset-setup.sh
              - --shardsvr
            lifecycle:
              postStart:
                exec:
                  command:
                    - /scripts/replicaset-post-start.sh
                    - SHARD
                    - "false"
            volumeMounts:
              - name: scripts
                mountPath: /scripts/replicaset-setup.sh
                subPath: replicaset-setup.sh
              - name: scripts
                mountPath: /scripts/replicaset-post-start.sh
                subPath: replicaset-post-start.sh
          - name: agent
            command:
              - /scripts/shard-agent.sh
            volumeMounts:
              - name: scripts
                mountPath: /scripts/shard-agent.sh
                subPath: shard-agent.sh
---
# Source: mongodb/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: mongodb-5.0.14
  labels:
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: mongodb
  componentVersions:
    - componentDefRef: replicaset
      versionsContext:
        containers:
          - name: mongodb
            image: mongo:5.0.14
            imagePullPolicy: IfNotPresent
    - componentDefRef: mongos
      versionsContext:
        containers:
          - name: mongos
            image: mongo:5.0.14
            imagePullPolicy: IfNotPresent
    - componentDefRef: configsvr
      versionsContext:
        containers:
          - name: configsvr
            image: mongo:5.0.14
            imagePullPolicy: IfNotPresent
    - componentDefRef: shard
      versionsContext:
        containers:
          - name: shard
            image: mongo:5.0.14
          - name: agent
            image: mongo:5.0.14
            imagePullPolicy: IfNotPresent
---
# Source: mongodb/templates/configconstraint.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ConfigConstraint
metadata:
  name: mongodb-config-constraints
  labels:
    helm.sh/chart: mongodb-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  configurationSchema:
    cue: ""

  # mysql configuration file format
  formatterConfig:
    format: yaml
---
# Source: mongodb-cluster/templates/replicaset.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  name: mycluster
  labels:
    helm.sh/chart: mongodb-cluster-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb-cluster
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: mongodb
  clusterVersionRef: mongodb-5.0.14
  terminationPolicy: Halt
  affinity:
    topologyKeys: 
      - kubernetes.io/hostname
  componentSpecs:
    - name: replicaset
      componentDefRef: replicaset
      monitor: false
      replicas: 3
      volumeClaimTemplates:
        - name: data # ref clusterdefinition components.containers.volumeMounts.name
          spec:
            storageClassName: 
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Gi
---
# Source: mongodb-cluster/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "mycluster-mongodb-cluster-test-connection"
  labels:
    helm.sh/chart: mongodb-cluster-0.5.0-alpha.8
    app.kubernetes.io/name: mongodb-cluster
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "5.0.14"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['mycluster-mongodb-cluster:']
  restartPolicy: Never
