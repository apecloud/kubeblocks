---
# Source: redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis7-config-template
  labels:
    helm.sh/chart: redis-0.5.0-alpha.8
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "7.0.6"
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile "/data/running.log"
    databases 16
    always-show-logo no
    set-proc-title yes
    proc-title-template "{title} {listen-addr} {server-mode}"
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    rdb-del-sync-files no
    dir ./
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync yes
    repl-diskless-sync-delay 5
    repl-diskless-sync-max-replicas 0
    repl-diskless-load disabled
    repl-disable-tcp-nodelay no
    replica-priority 100
    acllog-max-len 128
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    lazyfree-lazy-user-del no
    lazyfree-lazy-user-flush no
    oom-score-adj no
    oom-score-adj-values 0 200 800
    disable-thp yes
    appendonly yes
    appendfilename "appendonly.aof"
    appenddirname "appendonlydir"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    aof-timestamp-enabled no
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-listpack-entries 512
    hash-max-listpack-value 64
    list-max-listpack-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-listpack-entries 128
    zset-max-listpack-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    dynamic-hz yes
    aof-rewrite-incremental-fsync yes
    rdb-save-incremental-fsync yes
    jemalloc-bg-thread yes
    enable-debug-command yes
    protected-mode no
    
    # maxmemory <bytes>
    {{- $request_memory := getContainerRequestMemory ( index $.podSpec.containers 0 ) }}
    {{- if gt $request_memory 0 }}
    maxmemory {{ $request_memory }}
    {{- end -}}
---
# Source: redis/templates/scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
data:
  setup.sh: |
    #!/bin/sh
    set -ex
    KB_PRIMARY_POD_NAME_PREFIX=${KB_PRIMARY_POD_NAME%%\.*}
    if [ "$KB_PRIMARY_POD_NAME_PREFIX" = "$KB_POD_NAME" ]; then
      echo "primary instance skip create a replication relationship."
      exit 0
    else
      until redis-cli -h $KB_PRIMARY_POD_NAME -p 6379 ping; do sleep 1; done
      redis-cli -h 127.0.0.1 -p 6379 replicaof $KB_PRIMARY_POD_NAME 6379 || exit 1
    fi
  redis-start.sh: |
    #!/bin/sh
    set -ex
    echo "include /etc/conf/redis.conf" >> /etc/redis/redis.conf
    echo "replica-announce-ip $KB_POD_FQDN" >> /etc/redis/redis.conf
    exec redis-server /etc/redis/redis.conf \
    --loadmodule /opt/redis-stack/lib/redisearch.so ${REDISEARCH_ARGS} \
    --loadmodule /opt/redis-stack/lib/redisgraph.so ${REDISGRAPH_ARGS} \
    --loadmodule /opt/redis-stack/lib/redistimeseries.so ${REDISTIMESERIES_ARGS} \
    --loadmodule /opt/redis-stack/lib/rejson.so ${REDISJSON_ARGS} \
    --loadmodule /opt/redis-stack/lib/redisbloom.so ${REDISBLOOM_ARGS}
  redis-sentinel-setup.sh: |-
    #!/bin/sh
    set -ex
    {{- $clusterName := $.cluster.metadata.name }}
    {{- $namespace := $.cluster.metadata.namespace }}
    {{- /* find redis-sentinel component */}}
    {{- $sentinel_component := fromJson "{}" }}
    {{- $redis_component := fromJson "{}" }}
    {{- $primary_index := 0 }}
    {{- $primary_pod := "" }}
    {{- range $i, $e := $.cluster.spec.componentSpecs }}
      {{- if eq $e.componentDefRef "redis-sentinel" }}
        {{- $sentinel_component = $e }}
      {{- else if eq $e.componentDefRef "redis" }}
        {{- $redis_component = $e }}
        {{- if index $e "primaryIndex" }}
            {{- if ne ($e.primaryIndex | int) 0 }}
              {{- $primary_index = ($e.primaryIndex | int) }}
            {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- /* build primary pod message, because currently does not support cross-component acquisition of environment variables, the service of the redis master node is assembled here through specific rules  */}}
    {{- $primary_pod = printf "%s-%s-0.%s-%s-headless.%s.svc" $clusterName $redis_component.name $clusterName $redis_component.name $namespace }}
    {{- if ne $primary_index 0 }}
      {{- $primary_pod = printf "%s-%s-%d-0.%s-%s-headless.%s.svc" $clusterName $redis_component.name $primary_index $clusterName $redis_component.name $namespace }}
    {{- end }}
    {{- $sentinel_monitor := printf "%s-%s %s" $clusterName $sentinel_component.name $primary_pod }}
    cat>/etc/sentinel/redis-sentinel.conf<<EOF
    port 26379
    sentinel resolve-hostnames yes
    sentinel announce-hostnames yes
    sentinel monitor {{ $sentinel_monitor }} 6379 2
    sentinel down-after-milliseconds {{ $clusterName }}-{{ $sentinel_component.name }} 5000
    sentinel failover-timeout {{ $clusterName }}-{{ $sentinel_component.name }} 60000
    sentinel parallel-syncs {{ $clusterName }}-{{ $sentinel_component.name }} 1
    {{- /* $primary_svc := printf "%s-%s.%s.svc" $clusterName $redis_component.name $namespace */}}
    EOF
  redis-sentinel-start.sh: |-
    #!/bin/sh
    set -ex
    {{- $clusterName := $.cluster.metadata.name }}
    {{- $namespace := $.cluster.metadata.namespace }}
    {{- /* find redis component */}}
    {{- $redis_component := fromJson "{}" }}
    {{- range $i, $e := $.cluster.spec.componentSpecs }}
      {{- if eq $e.componentDefRef "redis" }}
      {{- $redis_component = $e }}
      {{- end }}
    {{- end }}
    {{- /* build redis engine service */}}
    {{- $primary_svc := printf "%s-%s.%s.svc" $clusterName $redis_component.name $namespace }}
    echo "Waiting for redis service {{ $primary_svc }} to be ready..."
    until redis-cli -h {{ $primary_svc }} -p 6379 ping; do sleep 1; done
    echo "redis service ready, Starting sentinel..."
    echo "sentinel announce-ip $KB_POD_FQDN" >> /etc/sentinel/redis-sentinel.conf
    exec redis-server /etc/sentinel/redis-sentinel.conf --sentinel
    echo "Start sentinel succeeded!"
  redis-sentinel-ping.sh: |-
    #!/bin/sh
    set -ex
    response=$(
          timeout -s 3 $1 \
          redis-cli \
            -h localhost \
            -p 26379 \
            ping
        )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
# Source: redis/templates/backuppolicytemplate.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: BackupPolicyTemplate
metadata:
  name: redis-backup-policy-template
  labels:
    clusterdefinition.kubeblocks.io/name: redis
    helm.sh/chart: redis-0.5.0-alpha.8
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "7.0.6"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: redis
  backupPolicies:
  - componentDefRef: redis
    ttl: 7d
    schedule:
      baseBackup:
        type: snapshot
        enable: false
        cronExpression: "0 18 * * 0"
    snapshot:
      target:
        connectionCredentialKey:
          passwordKey: password
          usernameKey: username
---
# Source: redis/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: redis
  labels:
    helm.sh/chart: redis-0.5.0-alpha.8
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "7.0.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: redis
  connectionCredential:
    username: ""
    password: ""
    endpoint: "$(SVC_FQDN):$(SVC_PORT_redis)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_redis)"
  componentDefs:
    - name: redis
      workloadType: Replication
      characterType: redis
      probes:
        roleProbe:
          failureThreshold: 2
          periodSeconds: 2
          timeoutSeconds: 1
      replicationSpec:
        switchPolicies:
          - type: MaximumAvailability
            switchStatements:
              demote:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
              promote:
                - replicaof no one
              follow:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
          - type: MaximumDataProtection
            switchStatements:
              demote:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
              promote:
                - replicaof no one
              follow:
                - replicaof $KB_NEW_PRIMARY_ROLE_NAME 6379
        switchCmdExecutorConfig:
          image: redis:7.0.5
          switchSteps:
          - role: NewPrimary
            command:
              - /bin/sh
              - -c
            args:
              - redis-cli -h $(KB_SWITCH_ROLE_ENDPOINT) -p 6379 $(KB_SWITCH_PROMOTE_STATEMENT)
          - role: Secondaries
            command:
              - /bin/sh
              - -c
            args:
              - redis-cli -h $(KB_SWITCH_ROLE_ENDPOINT) -p 6379 $(KB_SWITCH_FOLLOW_STATEMENT)
          - role: OldPrimary
            command:
              - /bin/sh
              - -c
            args:
              - redis-cli -h $(KB_SWITCH_ROLE_ENDPOINT) -p 6379 $(KB_SWITCH_DEMOTE_STATEMENT)
      service:
        ports:
          - name: redis
            port: 6379
            targetPort: redis
          - name: metrics
            port: 9121
            targetPort: metrics
      configSpecs:
        - name: redis-replication-config
          templateRef: redis7-config-template
          constraintRef: redis7-config-constraints
          namespace: default
          volumeName: redis-config
      scriptSpecs:
        - name: redis-scripts
          templateRef: redis-scripts
          namespace: default
          volumeName: scripts
          defaultMode: 493
      monitor:
        builtIn: false
        exporterConfig:
          scrapePort: 9121
          scrapePath: "/metrics"
      logConfigs:
        - name: running
          filePathPattern: /data/running.log
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: redis
            ports:
              - name: redis
                containerPort: 6379
            volumeMounts:
              - name: data
                mountPath: /data
              - name: redis-config
                mountPath: /etc/conf
              - name: scripts
                mountPath: /scripts
              - name: redis-conf
                mountPath: /etc/redis
            command: ["/scripts/redis-start.sh"]
            lifecycle:
              postStart:
                exec:
                  command: ["/scripts/setup.sh"]
          - name: redis-exporter
            image: oliver006/redis_exporter:latest
            imagePullPolicy: IfNotPresent
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
            ports:
              - name: metrics
                containerPort: 9121
            livenessProbe:
              httpGet:
                path: /
                port: metrics
            readinessProbe:
              httpGet:
                path: /
                port: metrics
      systemAccounts:
# Seems redis-cli has its own mechanism to parse input tokens and there is no elegent way
# to pass $(KB_ACCOUNT_STATEMENT) to redis-cli without causing parsing error.
# Instead, using a shell script to wrap redis-cli and pass $(KB_ACCOUNT_STATEMENT) to it will do.
        cmdExecutorConfig:
          image: docker.io/redis:7.0.5
          command:
          - sh
          - -c
          args:
          - "redis-cli -h $(KB_ACCOUNT_ENDPOINT) $(KB_ACCOUNT_STATEMENT)"
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allcommands allkeys
          - name: kbdataprotection
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allcommands allkeys
          - name: kbmonitoring
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allkeys +get
          - name: kbprobe
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) allkeys +get
          - name: kbreplicator
            provisionPolicy:
              type: CreateByStmt
              scope: AllPods
              statements:
                creation: ACL SETUSER $(USERNAME) ON \>$(PASSWD) +psync +replconf +ping
    - name: redis-sentinel
      workloadType: Stateful
      characterType: redis
      service:
        ports:
          - name: redis-sentinel
            targetPort: redis-sentinel
            port: 26379
      configSpecs:
        - name: redis-replication-config
          templateRef: redis7-config-template
          constraintRef: redis7-config-constraints
          namespace: default
          volumeName: redis-config
      scriptSpecs:
        - name: redis-scripts
          templateRef: redis-scripts
          namespace: default
          volumeName: scripts
          defaultMode: 493
      volumeTypes:
        - name: data
          type: data
      podSpec:
        initContainers:
        - name: init-redis-sentinel
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/conf
            - name: sentinel-conf
              mountPath: /etc/sentinel
            - name: scripts
              mountPath: /scripts
          command: [ "/scripts/redis-sentinel-setup.sh" ]
        containers:
        - name: redis-sentinel
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 26379
              name: redis-sentinel
          volumeMounts:
            - name: data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/conf
            - name: sentinel-conf
              mountPath: /etc/sentinel
            - name: scripts
              mountPath: /scripts
          command:
            - /bin/bash
          args:
            - -c
            - |
              set -ex
              /scripts/redis-sentinel-start.sh
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /scripts/redis-sentinel-ping.sh 5
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /scripts/redis-sentinel-ping.sh 1
---
# Source: redis/templates/clusterversion.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterVersion
metadata:
  name: redis-7.0.6
  labels:
    helm.sh/chart: redis-0.5.0-alpha.8
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "7.0.6"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: redis
  componentVersions:
  - componentDefRef: redis
    versionsContext:
      containers:
      - name: redis
        image: redis/redis-stack-server:7.0.6-RC8
        imagePullPolicy: IfNotPresent
  - componentDefRef: redis-sentinel
    versionsContext:
      initContainers:
        - name: init-redis-sentinel
          image: redis/redis-stack-server:7.0.6-RC8
          imagePullPolicy: IfNotPresent
      containers:
        - name: redis-sentinel
          image: redis/redis-stack-server:7.0.6-RC8
          imagePullPolicy: IfNotPresent
---
# Source: redis/templates/configconstraint.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ConfigConstraint
metadata:
  name: redis7-config-constraints
  labels:
    helm.sh/chart: redis-0.5.0-alpha.8
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "7.0.6"
    app.kubernetes.io/managed-by: Helm
spec:

  cfgSchemaTopLevelName: RedisParameter

  # ConfigurationSchema that impose restrictions on engine parameter's rule
  configurationSchema:
    cue: |-
      // Copyright ApeCloud, Inc.
      //
      // Licensed under the Apache License, Version 2.0 (the "License");
      // you may not use this file except in compliance with the License.
      // You may obtain a copy of the License at
      //
      //     http://www.apache.org/licenses/LICENSE-2.0
      //
      // Unless required by applicable law or agreed to in writing, software
      // distributed under the License is distributed on an "AS IS" BASIS,
      // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      // See the License for the specific language governing permissions and
      // limitations under the License.
      
      #RedisParameter: {
      
      	"acllog-max-len": int & >=1 & <=10000 | *128
      
      	"acl-pubsub-default"?: string & "resetchannels" | "allchannels"
      
      	activedefrag?: string & "yes" | "no"
      
      	"active-defrag-cycle-max": int & >=1 & <=75 | *75
      
      	"active-defrag-cycle-min": int & >=1 & <=75 | *5
      
      	"active-defrag-ignore-bytes": int | *104857600
      
      	"active-defrag-max-scan-fields": int & >=1 & <=1000000 | *1000
      
      	"active-defrag-threshold-lower": int & >=1 & <=100 | *10
      
      	"active-defrag-threshold-upper": int & >=1 & <=100 | *100
      
      	"active-expire-effort": int & >=1 & <=10 | *1
      
      	appendfsync?: string & "always" | "everysec" | "no"
      
      	appendonly?: string & "yes" | "no"
      
      	"client-output-buffer-limit-normal-hard-limit": int | *0
      
      	"client-output-buffer-limit-normal-soft-limit": int | *0
      
      	"client-output-buffer-limit-normal-soft-seconds": int | *0
      
      	"client-output-buffer-limit-pubsub-hard-limit": int | *33554432
      
      	"client-output-buffer-limit-pubsub-soft-limit": int | *8388608
      
      	"client-output-buffer-limit-pubsub-soft-seconds": int | *60
      
      	"client-output-buffer-limit-replica-soft-seconds": int | *60
      
      	"client-query-buffer-limit": int & >=1048576 & <=1073741824 | *1073741824
      
      	"close-on-replica-write"?: string & "yes" | "no"
      
      	"cluster-allow-pubsubshard-when-down"?: string & "yes" | "no"
      
      	"cluster-allow-reads-when-down"?: string & "yes" | "no"
      
      	"cluster-enabled"?: string & "yes" | "no"
      
      	"cluster-preferred-endpoint-type"?: string & "tls-dynamic" | "ip"
      
      	"cluster-require-full-coverage"?: string & "yes" | "no"
      
      	databases: int & >=1 & <=10000 | *16
      
      	"hash-max-listpack-entries": int | *512
      
      	"hash-max-listpack-value": int | *64
      
      	"hll-sparse-max-bytes": int & >=1 & <=16000 | *3000
      
      	"latency-tracking"?: string & "yes" | "no"
      
      	"lazyfree-lazy-eviction"?: string & "yes" | "no"
      
      	"lazyfree-lazy-expire"?: string & "yes" | "no"
      
      	"lazyfree-lazy-server-del"?: string & "yes" | "no"
      
      	"lazyfree-lazy-user-del"?: string & "yes" | "no"
      
      	"lfu-decay-time": int | *1
      
      	"lfu-log-factor": int | *10
      
      	"list-compress-depth": int | *0
      
      	"list-max-listpack-size": int | *-2
      
      	"lua-time-limit": int & 5000 | *5000
      
      	maxclients: int & >=1 & <=65000 | *65000
      
      	"maxmemory-policy"?: string & "volatile-lru" | "allkeys-lru" | "volatile-lfu" | "allkeys-lfu" | "volatile-random" | "allkeys-random" | "volatile-ttl" | "noeviction"
      
      	"maxmemory-samples": int | *3
      
      	"min-replicas-max-lag": int | *10
      
      	"min-replicas-to-write": int | *0
      
      	"notify-keyspace-events"?: string
      
      	"proto-max-bulk-len": int & >=1048576 & <=536870912 | *536870912
      
      	"rename-commands"?: string & "APPEND" | "BITCOUNT" | "BITFIELD" | "BITOP" | "BITPOS" | "BLPOP" | "BRPOP" | "BRPOPLPUSH" | "BZPOPMIN" | "BZPOPMAX" | "CLIENT" | "COMMAND" | "DBSIZE" | "DECR" | "DECRBY" | "DEL" | "DISCARD" | "DUMP" | "ECHO" | "EVAL" | "EVALSHA" | "EXEC" | "EXISTS" | "EXPIRE" | "EXPIREAT" | "FLUSHALL" | "FLUSHDB" | "GEOADD" | "GEOHASH" | "GEOPOS" | "GEODIST" | "GEORADIUS" | "GEORADIUSBYMEMBER" | "GET" | "GETBIT" | "GETRANGE" | "GETSET" | "HDEL" | "HEXISTS" | "HGET" | "HGETALL" | "HINCRBY" | "HINCRBYFLOAT" | "HKEYS" | "HLEN" | "HMGET" | "HMSET" | "HSET" | "HSETNX" | "HSTRLEN" | "HVALS" | "INCR" | "INCRBY" | "INCRBYFLOAT" | "INFO" | "KEYS" | "LASTSAVE" | "LINDEX" | "LINSERT" | "LLEN" | "LPOP" | "LPUSH" | "LPUSHX" | "LRANGE" | "LREM" | "LSET" | "LTRIM" | "MEMORY" | "MGET" | "MONITOR" | "MOVE" | "MSET" | "MSETNX" | "MULTI" | "OBJECT" | "PERSIST" | "PEXPIRE" | "PEXPIREAT" | "PFADD" | "PFCOUNT" | "PFMERGE" | "PING" | "PSETEX" | "PSUBSCRIBE" | "PUBSUB" | "PTTL" | "PUBLISH" | "PUNSUBSCRIBE" | "RANDOMKEY" | "READONLY" | "READWRITE" | "RENAME" | "RENAMENX" | "RESTORE" | "ROLE" | "RPOP" | "RPOPLPUSH" | "RPUSH" | "RPUSHX" | "SADD" | "SCARD" | "SCRIPT" | "SDIFF" | "SDIFFSTORE" | "SELECT" | "SET" | "SETBIT" | "SETEX" | "SETNX" | "SETRANGE" | "SINTER" | "SINTERSTORE" | "SISMEMBER" | "SLOWLOG" | "SMEMBERS" | "SMOVE" | "SORT" | "SPOP" | "SRANDMEMBER" | "SREM" | "STRLEN" | "SUBSCRIBE" | "SUNION" | "SUNIONSTORE" | "SWAPDB" | "TIME" | "TOUCH" | "TTL" | "TYPE" | "UNSUBSCRIBE" | "UNLINK" | "UNWATCH" | "WAIT" | "WATCH" | "ZADD" | "ZCARD" | "ZCOUNT" | "ZINCRBY" | "ZINTERSTORE" | "ZLEXCOUNT" | "ZPOPMAX" | "ZPOPMIN" | "ZRANGE" | "ZRANGEBYLEX" | "ZREVRANGEBYLEX" | "ZRANGEBYSCORE" | "ZRANK" | "ZREM" | "ZREMRANGEBYLEX" | "ZREMRANGEBYRANK" | "ZREMRANGEBYSCORE" | "ZREVRANGE" | "ZREVRANGEBYSCORE" | "ZREVRANK" | "ZSCORE" | "ZUNIONSTORE" | "SCAN" | "SSCAN" | "HSCAN" | "ZSCAN" | "XINFO" | "XADD" | "XTRIM" | "XDEL" | "XRANGE" | "XREVRANGE" | "XLEN" | "XREAD" | "XGROUP" | "XREADGROUP" | "XACK" | "XCLAIM" | "XPENDING" | "GEORADIUS_RO" | "GEORADIUSBYMEMBER_RO" | "LOLWUT" | "XSETID" | "SUBSTR" | "BITFIELD_RO" | "ACL" | "STRALGO"
      
      	"repl-backlog-size": int | *1048576
      
      	"repl-backlog-ttl": int | *3600
      
      	"replica-allow-chaining"?: string & "yes" | "no"
      
      	"replica-ignore-maxmemory"?: string & "yes" | "no"
      
      	"replica-lazy-flush"?: string & "yes" | "no"
      
      	"reserved-memory-percent": int & >=0 & <=100 | *25
      
      	"set-max-intset-entries": int & >=0 & <=500000000 | *512
      
      	"slowlog-log-slower-than": int | *10000
      
      	"slowlog-max-len": int | *128
      
      	"stream-node-max-bytes": int | *4096
      
      	"stream-node-max-entries": int | *100
      
      	"tcp-keepalive": int | *300
      
      	timeout: int | *0
      
      	"tracking-table-max-keys": int & >=1 & <=100000000 | *1000000
      
      	"zset-max-listpack-entries": int | *128
      
      	"zset-max-listpack-value": int | *64
      
      	"protected-mode"?: string & "yes" | "no"
      
      	"enable-debug-command"?: string & "yes" | "no" | "local"
      
      	...
      }
      

  ## require db instance restart
  staticParameters:
    - cluster-enabled
    - databases
    - maxclients

  ## reload parameters
  ## dynamicParameters
  dynamicParameters:


  # redis configuration file format
  formatterConfig:
    format: redis
---
# Source: redis-cluster/templates/cluster.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  name: mycluster
  labels: 
    helm.sh/chart: redis-cluster-0.5.0-alpha.8
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/instance: mycluster
    app.kubernetes.io/version: "7.0.6"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefinitionRef: redis  # ref clusterDefinition.name
  clusterVersionRef: redis-7.0.6 # ref clusterVersion.name
  terminationPolicy: Delete
  affinity:
    topologyKeys: 
      - kubernetes.io/hostname
  componentSpecs:
    - name: redis # user-defined
      componentDefRef: redis # ref clusterDefinition componentDefs.name
      monitor: false
      enabledLogs:     ["running"]
      replicas: 2
      primaryIndex: 0
      switchPolicy:
        type: Noop
      resources:
        limits:
          cpu: "500m"
          memory: "3Gi"
        requests:
          cpu: "500m"
          memory: "1Gi"
      volumeClaimTemplates:
        - name: data # ref clusterdefinition components.containers.volumeMounts.name
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
    - name: redis-sentinel # user-defined
      componentDefRef: redis-sentinel # ref clusterDefinition componentDefs.name
      replicas: 3
      resources:
        limits:
          cpu: "500m"
          memory: "3Gi"
        requests:
          cpu: "500m"
          memory: "1Gi"
      volumeClaimTemplates:
        - name: data # ref clusterdefinition components.containers.volumeMounts.name
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
