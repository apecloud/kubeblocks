apiVersion: dbaas.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: %s
spec:
  components:
  - antiAffinity: false
    componentType: Consensus
    typeName: consensus
    logConfigs:
    - filePathPattern: /data/mysql/log/mysqld.err
      name: error
    monitor:
      builtIn: true
    podSpec:
      containers:
      - name: mysql
    consensusSpec:
      followers:
      - accessMode: Readonly
        name: follower
      leader:
        accessMode: ReadWrite
        name: leader
      updateStrategy: BestEffortParallel
    defaultReplicas: 3
    probes:
      roleChangedProbe:
        failureThreshold: 2
        periodSeconds: 1
        timeoutSeconds: 1
    systemAccounts:
      cmdExecutorConfig:
        image: docker.io/mysql:8.0.30
        command: ["mysql"]
        args:
        - -h$(KB_ACCOUNT_ENDPOINT) 
        - -u$(MYSQL_USER) 
        - -p$(MYSQL_PASSWORD)        
        - -e $(KB_ACCOUNT_STATEMENT)
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: $(CONN_CREDENTIAL_SECRET_NAME)
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(CONN_CREDENTIAL_SECRET_NAME)
              key: password   
      passwordConfig:
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases
      accounts:
        - name: kbadmin
          provisionPolicy:
            type: CreateByStmt
            scope: AnyPods
            statements:
              creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY "$(PASSWD)"; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
              deletion: DROP USER IF EXISTS $(USERNAME);
        - name: kbdataprotection
          provisionPolicy:
            type: CreateByStmt
            scope: AllPods
            statements:
              creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY "$(PASSWD)";GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO $(USERNAME); GRANT LOCK TABLES,RELOAD,PROCESS,REPLICATION CLIENT, SUPER,SELECT,EVENT,TRIGGER,SHOW VIEW ON *.* TO $(USERNAME);
              deletion: DROP USER IF EXISTS $(USERNAME);
        - name: kbprobe
          provisionPolicy:
            type: ReferToExisting
            secretRef: 
              namespace: default
              name: $(CONN_CREDENTIAL_SECRET_NAME)           
        - name: kbmonitoring
          provisionPolicy:
            type: CreateByStmt
            scope: AnyPods
            statements:        
              creation: CREATE USER IF NOT EXISTS $(USERNAME) IDENTIFIED BY "$(PASSWD)"; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
              deletion: DROP USER IF EXISTS $(USERNAME);          
  type: state.mysql