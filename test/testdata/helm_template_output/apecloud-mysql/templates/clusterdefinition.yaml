---
# Source: apecloud-mysql/templates/clusterdefinition.yaml
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: apecloud-mysql
  labels:
    helm.sh/chart: apecloud-mysql-0.5.0-beta.24
    app.kubernetes.io/name: apecloud-mysql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "8.0.30"
    app.kubernetes.io/managed-by: Helm
spec:
  type: mysql
  connectionCredential:
    username: root
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_mysql)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_mysql)"
  componentDefs:
    - name: mysql
      characterType: mysql
      probes:
        roleProbe:
          failureThreshold: 2
          periodSeconds: 1
          timeoutSeconds: 1
      monitor:
        builtIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: 9104
      logConfigs:
        - name: error
          filePathPattern: /data/mysql/log/mysqld-error.log
        - name: general
          filePathPattern: /data/mysql/log/mysqld.log
        - name: slow
          filePathPattern: /data/mysql/log/mysqld-slowquery.log
      configSpecs:
        - name: mysql-consensusset-config
          templateRef: mysql8.0-config-template
          constraintRef: mysql8.0-config-constraints
          volumeName: mysql-config
          namespace: default
      scriptSpecs:
        - name: apecloud-mysql-scripts
          templateRef: apecloud-mysql-scripts
          namespace: default
          volumeName: scripts
          defaultMode: 493
      workloadType: Consensus
      consensusSpec:
        leader:
          name: leader
          accessMode: ReadWrite
        followers:
          - name: follower
            accessMode: Readonly
        learner:
          name: learner
          accessMode: Readonly
      service:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
      horizontalScalePolicy:
        type: Snapshot
        backupPolicyTemplateName: apecloud-mysql-backup-policy-for-hscale
      volumeTypes:
        - name: data
          type: data
      podSpec:
        containers:
          - name: mysql
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /data/mysql
                name: data
              - mountPath: /opt/mysql
                name: mysql-config
              - name: scripts
                mountPath: /scripts
              - name: annotations
                mountPath: /etc/annotations
            ports:
              - containerPort: 3306
                name: mysql
              - containerPort: 13306
                name: paxos
            env:
              - name: MYSQL_ROOT_HOST
                value: "%"
              - name: MYSQL_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: MYSQL_DATABASE
                value: "mydb"
              - name: MYSQL_USER
                value: "u1"
              - name: MYSQL_PASSWORD
                value: "u1"
              - name: CLUSTER_ID
                value: "1"
              - name: CLUSTER_START_INDEX
                value: "1"
              - name: REPLICATION_USER
                value: "replicator"
              - name: REPLICATION_PASSWORD
                value: ""
              - name: MYSQL_TEMPLATE_CONFIG
                value: 
              - name: MYSQL_CUSTOM_CONFIG
                value: 
              - name: MYSQL_DYNAMIC_CONFIG
                value: 
            command: ["/scripts/setup.sh"]
            lifecycle:
              preStop:
                exec:
                  command: ["/scripts/pre-stop.sh"]
          - name: metrics
            image:  registry.cn-hangzhou.aliyuncs.com/apecloud/mysqld-exporter:0.14.1
            imagePullPolicy: "IfNotPresent"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
            env:
              - name: MYSQL_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: DATA_SOURCE_NAME
                value: "$(MYSQL_USER):$(MYSQL_PASSWORD)@(localhost:3306)/"
            command:
              - "/bin/mysqld_exporter"
              - "--collect.info_schema.wesql_consensus"
            ports:
              - name: http-metrics
                containerPort: 9104
            livenessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              httpGet:
                path: /
                port: http-metrics
            readinessProbe:
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
              httpGet:
                path: /
                port: http-metrics
        volumes:
          - name: annotations
            downwardAPI:
              items:
                - path: "leader"
                  fieldRef:
                    fieldPath: metadata.annotations['cs.apps.kubeblocks.io/leader']
                - path: "component-replicas"
                  fieldRef:
                    fieldPath: metadata.annotations['apps.kubeblocks.io/component-replicas']
      systemAccounts:
        cmdExecutorConfig:
          image: registry.cn-hangzhou.aliyuncs.com/apecloud/apecloud-mysql-server:8.0.30-5.alpha5.20230319.g28f261a.5
          command:
          - mysql
          args:
          - -u$(MYSQL_ROOT_USER)
          - -p$(MYSQL_ROOT_PASSWORD)
          - -h$(KB_ACCOUNT_ENDPOINT)
          - -e
          - $(KB_ACCOUNT_STATEMENT)
          env:
          - name: MYSQL_ROOT_USER
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: username
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: $(CONN_CREDENTIAL_SECRET_NAME)
                key: password
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbdataprotection
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO $(USERNAME); GRANT LOCK TABLES,RELOAD,PROCESS,REPLICATION CLIENT, SUPER,SELECT,EVENT,TRIGGER,SHOW VIEW ON *.* TO $(USERNAME);
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbprobe
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
                update: ALTER USER (USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbmonitoring
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
          - name: kbreplicator
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION SLAVE ON *.* TO $(USERNAME) WITH GRANT OPTION;
                update: ALTER USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';
