apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component-name: %s
    app.kubernetes.io/instance: %s
    app.kubernetes.io/name: state.redis-7-apecloud-redis
    app.kubernetes.io/managed-by: kubeblocks
    kubeblocks.io/role: primary
  name: %s
  namespace: default
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component-name: %s
      app.kubernetes.io/instance: %s
      app.kubernetes.io/name: state.redis-7-apecloud-redis
      kubeblocks.io/test: test
      app.kubernetes.io/managed-by: kubeblocks
  template:
    metadata:
      labels:
        app.kubernetes.io/component-name: %s
        app.kubernetes.io/instance: %s
        app.kubernetes.io/name: state.redis-7-apecloud-redis
        kubeblocks.io/test: test
        app.kubernetes.io/managed-by: kubeblocks
    spec:
      containers:
        - args:
            - /etc/conf/redis.conf
          command:
            - /bin/bash
            - -c
          env:
            - name: KB_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: KB_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: KB_SA_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.serviceAccountName
            - name: KB_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: KB_HOSTIP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: KB_PODIP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: KB_PODIPS
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIPs
            - name: KB_CLUSTER_NAME
              value: redis
            - name: KB_COMP_NAME
              value: redis-rsts
            - name: KB_CLUSTER_COMP_NAME
              value: redis-redis-rsts
            - name: KB_PRIMARY_POD_NAME
              value: redis-redis-rsts-1-0.redis-redis-rsts-headless
          envFrom:
            - configMapRef:
                name: redis-redis-rsts-env
          image: registry.hub.docker.com/library/redis:7.0.5
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    set -ex
                    SECONDARY_ROLE=secondary
                    KB_ROLE_NAME=primary
                    if [ "$KB_ROLE_NAME" = "$SECONDARY_ROLE" ]; then
                      until redis-cli -h $KB_PRIMARY_POD_NAME -p 6379 ping; do sleep 1; done
                      redis-cli -h 127.0.0.1 -p 6379 replicaof $KB_PRIMARY_POD_NAME 6379 || exit 1
                    else
                      echo "primary instance skip create a replication relationship."
                      exit 0
                    fi
          name: redis
          resources:
            limits:
              cpu: 280m
              memory: 380Mi
          ports:
            - containerPort: 6379
              name: redis
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/conf
              name: conf
            - mountPath: /etc/conf/primary
              name: primary
            - mountPath: /etc/conf/secondary
              name: secondary
            - mountPath: /etc/conf/role
              name: pod-role
  updateStrategy:
    type: OnDelete